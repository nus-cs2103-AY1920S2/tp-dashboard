[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d FlashSpeed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-W17-1/main[image:https://travis-ci.org/AY1920S2-CS2103T-W17-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "//https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "//https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::docs/images/Ui2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::images/Ui2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d What is it?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language. University students often have hectic schedules. With this in mind, FlashSpeed was created to allow students to be able to study and revise foreign vocabulary on the fly. With a single command, you can start a quick study session on FlashSpeed whenever!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "Keeping, flipping, and tracking physical flashcards can be a pain. FlashSpeed enhances the studying process by having virtual flashcards and a smarter review system. Users will be tested more frequently on flashcards that they had trouble memorizing previously."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "By using FlashSpeed, you will learn faster and remember for longer!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Who is it for?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is intended for university students reading a foreign language module who need an effective way to memorize a lot of new vocabulary fast and for the long term. It can also be used by students who need to remember a lot of information (e.g. historical dates, definitions, etc.) before an exam."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "Of course, anyone who needs a powerful memorization tool can benefit from using FlashSpeed!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "* https://ay1920s2-cs2103t-w17-1.github.io/main/UserGuide.html[User Guide]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "* https://ay1920s2-cs2103t-w17-1.github.io/main/DeveloperGuide.html[Developer Guide]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "* https://ay1920s2-cs2103t-w17-1.github.io/main/AboutUs.html[About Us]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "* https://ay1920s2-cs2103t-w17-1.github.io/main/ContactUs.html[Contact Us]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "//* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "//* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "//* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "//* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "//* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "* FlashSpeed is built on top of the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Some parts of the sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "lacedaemon98": 2,
      "amrl": 37,
      "-": 21
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "mainClassName \u003d \u0027com.flashspeed.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveName \u003d \u0027flashspeed.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u0027site-name\u0027: \u0027FlashSpeed\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-1/main\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 6,
      "lacedaemon98": 1,
      "amrl": 6,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "FlashSpeed was developed by the https://github.com/AY1920S2-CS2103T-W17-1[CS2103T-W17-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d AMIRUL ARDY BIN MOHAMED RASI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::amrl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty}[https://github.com/amrl[github]] [\u003c\u003camrl#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "Role: Technical Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "Responsibilities: User Guide, Deliverables and deadline, Integration, Automated build and test tools"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d CHIEW KOK SENG"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::kschiew.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty}[http://github.com/kschiew[github]] [\u003c\u003ckschiew#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Role: Software Architect +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Responsibilities: App Architecture, Logic, Storage, Statistics"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d LEONG ZHAN HAO, NICHOLAS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::ncslzh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty}[https://github.com/ncslzh[github]] [\u003c\u003cncslzh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Role: DevOps +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Responsibilities: Developer Guide, Agenda/Issue tracker, Game Algorithm"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d LIAO LIXIN"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::olixino.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "{empty}[http://github.com/oLiXino[github]] [\u003c\u003colixino#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "Responsibilities: Play View, Model, Game Component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d PHAM TRAN TUAN LINH"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::lacedaemon98.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty}[http://github.com/lacedaemon98[github]] [\u003c\u003clacedaemon98#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "Role: Developer, Designer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "Responsibilities: UI/UX, Visual, Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 2,
      "ncslzh": 7,
      "kschiew": 12,
      "lacedaemon98": 2,
      "amrl": 2,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-W17-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to make improvement."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** `e0310544 [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** `e0309862 [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** `e0332767 [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** `pham98 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** `lixin11 [at] u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oLiXino": 10,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d FlashSpeed - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d FlashSpeed - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "By: `FlashSpeed Foundation`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::introduction[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "FlashSpeed enhances the revision process by implementing a \u003c\u003csmart-review-system,smarter review system\u003e\u003e in its design. Users will be tested more frequently on words that they have gotten wrong in a game session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "The main features of FlashSpeed allows users to:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "* create their own \u003c\u003cdeck, decks\u003e\u003e of \u003c\u003ccard, cards\u003e\u003e (flashcards)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* choose a deck to \u003c\u003cplay, play\u003e\u003e (review) which uses the smart review design mentioned above."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[Purpose]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "This document specifies architecture, software design decisions and implementation for the FlashSpeed application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Audience"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "This document is intended for anyone who wants to understand the system architecture, design and implementation of FlashSpeed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "The following groups are in particular are the intended audience of this document."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* FlashSpeed developers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* FlashSpeed features enhancement team members"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d How to use"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Section 3 - Design contains information about the main components of FlashSpeed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Firstly, refer to \u003c\u003c#Design-Architecture, 3.1 Architecture\u003e\u003e section to learn more about the overall architecture."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Then proceed to sections 3.2 - 3.6 to learn more about each individual component in the architecture."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Section 4 - Implementation contains information about the main commands and the implementations of each command used in FlashSpeed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Appendix - Information related to the development process and design choices of FlashSpeed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::introduction[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::design-arch[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is mainly built on top of a few core components, runner components, and helper components. The core is where"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "the bulk of the design decisions are made and data processing is performed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "The *_Architecture Diagram_* below gives a high-level overview of the FlashSpeed App."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "*The Runners:* +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/com/flashspeed/Main.java[`Main`] and link:{repoURL}/src/main/java/com/flashspeed/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "* At launch: Initializes the core components in the correct sequence, sets up their initial states, and connects them up"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "with each other."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "* At exit: Performs cleanup of components where necessary and shuts down FlashSpeed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "*The Helpers:* +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "The following classes plays an important role at the architecture level:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `LogsCenter` : Writes log messages from many different running components to the FlashSpeed\u0027s log file and console."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `Index` : Provides storage of index numbers and easy conversion between one- and zero-based indices."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `Messages` : Keeps many user-visible messages for invalid user actions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `Exceptions` : Contains different types of specific exceptions which can occur due to invalid user actions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "*The Core:* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of FlashSpeed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrl"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data and current state of FlashSpeed in-memory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from and writes data to a data file on the hard disk."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::design-arch[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d 3.1.1 How the core components interact with each other"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "The _Sequence Diagram_ below shows how the core components interact with each other for the scenario where the user issues the command `remove 2`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Component interactions for the `remove 2` command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//tag::UI-component[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/flashspeed/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `DeckListPanel`, `CardListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/com/flashspeed/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `HelpWindow` will only be shown when executing `help` command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `StatisticsPopUp` will only be shown after finishing or stopping a *Play session*."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* Either `CardListPanel` or `PlayPanel` is displayed depending on the current \u003c\u003cview, view\u003e\u003e."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//end::UI-component[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::design-logic[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amrl"
        },
        "content": "link:{repoURL}/src/main/java/com/flashspeed/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".  `Logic` uses the `MasterParser` class to parse the user command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a card)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::design-logic[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".Interactions inside the Logic Component for the `delete 1` command"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amrl"
        },
        "content": "NOTE: The lifeline for `RemoveDeckCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::model[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ".Structure of the Deck Component within the Model Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "image::ModelClassDeckDiagram.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amrl"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/flashspeed/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* stores the Library\u0027s current state and data."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* stores and manipulates a `GameManager` object that represents one game session."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* stores and manipulates a `Deck` object that represents the deck that the user is viewing when user is in \u003c\u003cdeck-view, deck view\u003e\u003e."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* stores and manipulates a  `Card` object that represents the card that the user is playing with when user is in \u003c\u003cplay, play view\u003e\u003e."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* stores and manipulates `View` object that represents the \u003c\u003cview, view\u003e\u003e that the user is currently in."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDeck\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::model[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amrl"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/flashspeed/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amrl"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amrl"
        },
        "content": "* can save all the decks and cards created in JSON format and read them back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Classes used by multiple components are in the `com.flashspeed.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// tag::createdeck[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Creating a Deck"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The `create` command allows user to create a new Deck in the current Library."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax: `create DECK_NAME`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "This functionality is implemented by getting the Deck based on the index provided. Subsequently, the Card(s) that belongs to the selected Deck will be displayed on `CardListPanel` via a `TableView`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The validation of the arguments in the `create` command is performed in `CreateDeckCommandParser#parse()`. It ensures"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kschiew"
        },
        "content": "that the user has entered a non-null deck name."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kschiew"
        },
        "content": "In `CreateDeckCommandParser#parse()`, the `DECK_NAME` of is extracted"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kschiew"
        },
        "content": "from the arguments in the `create` command. The `DECK_NAME` is converted to a Name object. An `CreateDeckCommand`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kschiew"
        },
        "content": "object is then constructed with the Deck name as its parameter."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kschiew"
        },
        "content": "When `CreateDeckCommand#execute()` is executed, an empty Deck with the Name parsed in the `CreateDeckCommand` will be"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kschiew"
        },
        "content": "created when the Model Manager invokes the `ModelManager#selectDeck()` command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kschiew"
        },
        "content": "After that, `ModelManager#setSelectedDeck()` method will be called to update the UI and display the Deck content"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "on `CardListPanel`. Lastly, the name of the selected Deck will be displayed together with the"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kschiew"
        },
        "content": "`MESSAGE_SUCCESS` on the `ResultDisplay` panel."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The following sequence diagram shows the sequence of operations due to a `create` command."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kschiew"
        },
        "content": ".Interactions inside the Model and Logic components when the user enters `create Japanese` into the input box."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::CreateSequenceDiagram.png[Something]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::create-deck-consideration[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: If the user is already viewing another deck and decides to create a new deck, there was a consideration whether to switch the UI for the user view to the new deck or continue to let the user view the current deck."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* **Alternative 1 (current choice):** Switch the view to the new Deck"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Pros: Able to use the new Deck immediately without typing an additional command to select it."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* **Alternative 2:** Keep the view at the current Deck"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Pros: Don\u0027t have to type in an additional command to return back to the current Deck if a new Deck is created"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "We chose Alternative 1 in the end as we believed that it will be more likely for the user to want to use the new deck immediately after creating it."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::create-deck-consideration[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[Four-Two-Two]]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Naming convention of command key words."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Initially, both `CreateDeckCommand` and `AddCardCommand` share the same keyword, which is the `add` keyword."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kschiew"
        },
        "content": "In order to distinguish these two commands from each other,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kschiew"
        },
        "content": "the Model Manager will check if any deck is currently selected."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kschiew"
        },
        "content": "If there is, `AddCardCommandParser#parse()` will be called to parse the arguments."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Otherwise, `CreateDeckCommandParser#parse()` will be called."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The benefit of this design is that it results in fewer number of command words."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kschiew"
        },
        "content": "This helps the user on the navigability of the application due to a few number of command words to remember."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kschiew"
        },
        "content": "However, the glaring disadvantage is that unexpected outcomes are more likely to occur."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kschiew"
        },
        "content": "For example, assume that the user wants to create a new deck. So, he/she types in the following command:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kschiew"
        },
        "content": "`create Deck 2`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kschiew"
        },
        "content": "However, the user has forgotten that a deck is currently being selected."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Therefore, the `AddCardCommandParser#parse()` will be invoked."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kschiew"
        },
        "content": "This is certainly not the expected outcome that the user has expected."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kschiew"
        },
        "content": "And so, our team has decided to implement the current approach,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kschiew"
        },
        "content": "which is to assign different keywords to these two different feature."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// end::createdeck[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kschiew"
        },
        "content": "//tag::selectdeck[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d Selecting a Deck"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "UI implementation will be discussed in detail only in this section. In other sections, detailed UI implementation will be omitted."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The `select` command allows user to view the Card content of a Deck."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Accepted syntax: `select INDEX`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "This functionality is implemented by getting the Deck based on the index provided. Subsequently, the selected Deck will be highlighted on `DeckListPanel` and the Card(s) that belongs to it will be displayed on `CardListPanel` via a `TableView`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The validation of the arguments in the `select` command is performed in `SelectDeckCommandParser#parse()`. It ensures that the user has entered a valid index (valid data type and range). This is also used for separation of parsing"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kschiew"
        },
        "content": "logic and model management logic."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kschiew"
        },
        "content": "In `SelectDeckCommandParser#parse()`, the `INDEX` of the selected Deck is extracted"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kschiew"
        },
        "content": "from the arguments in the `select` command. The `INDEX` is converted to an Index object. An `SelectCardCommand`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kschiew"
        },
        "content": "object is then constructed with the Index as its parameter."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "When `SelectDeckCommand#execute()` is executed a list of currently available Deck is requested from the `ModelManager#getFilteredDeckList()` method. The `ModelManager#selectDeck()` command will be invoked to update the variable that keeps track of the current Deck. After that, `ModelManager#setSelectedDeck()` method will be called to update the UI by highlighting the selected Deck on `DeckListPanel` and displaying its content on `CardListPanel`. Lastly, the name of the selected Deck will be displayed together with the `MESSAGE_SUCCESS` on the `ResultDisplay` panel."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "The UI will have to be constantly updated when we select to view a Deck, and other Decks might be selected afterward. As a result, an `ObservableValue\u003cDeck\u003e` variable will have to be updated constantly via the `ModelManager#setSelectedDeck()` method. Various event listeners are implemented in the UI classes (e.g `CardListPanel`, `DeckListPanel`) in order to instantly react if there is any changes to the selected Deck."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kschiew"
        },
        "content": ".Interactions inside Model, Logic and UI components to reflect UI changes when selecting a deck"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::SelectDeckSequenceDiagram.png[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kschiew"
        },
        "content": "//end::selectdeck[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kschiew"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// tag::addcard[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d Adding a Card"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The `add` command allows user to create a new Card in the current Deck."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax: `add FRONT_VALUE:BACK_VALUE`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kschiew"
        },
        "content": "This functionality is implemented by getting the Deck based on the current deck selected."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The Model Manager will be responsible of keeping track of the current deck."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Subsequently, the Model Manager creates a new card  adds it to the current Deck."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "The display on `CardListPanel` will be updated via updating the `TableView`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The validation of the arguments in the `add` command is performed in `AddCardCommandParser#parse()`. It ensures"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kschiew"
        },
        "content": "that the user has entered a non-null front value as well as a non-null back value."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The lack thereof will cause a `InvalidFaceValueException` to be thrown."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kschiew"
        },
        "content": "In `AddCardCommandParser#parse()`, the `FRONT_VALUE` and the `BACK_VALUE` are extracted"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kschiew"
        },
        "content": "from the arguments in the `add` command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Both values will be converted to a `FrontFace` object and a `BackFace` object respectively."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kschiew"
        },
        "content": "A `AddCardCommand` object is then constructed with the \u0027FrontFace\u0027 and \u0027BackFace\u0027 objects as its parameters."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kschiew"
        },
        "content": "When `AddCardCommand#execute()` is called, a `Card` object with the `FrontFace` and `BackFace`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kschiew"
        },
        "content": "parsed in the `CreateDeckCommand` will be"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kschiew"
        },
        "content": "created when the Model Manager invokes the `ModelManager#addCard()` command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kschiew"
        },
        "content": "After that, `ModelManager#setSelectedDeck()` method will be called to update the UI and display the Deck content"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "on `CardListPanel`. Lastly, the name of the selected Deck will be displayed together with the"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kschiew"
        },
        "content": "`MESSAGE_SUCCESS` on the `ResultDisplay` panel."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The following sequence diagram shows the sequence of operations due to an `add` command."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kschiew"
        },
        "content": ".Interactions inside Model and Logic components when user enters `add ありがとう:thanks` into the input box."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "See \u003c\u003cFour-Two-Two, 4.2.2 - Design Considerations for creating a Deck - Aspect: Naming convention of command keywords\u003e\u003e."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// end::addcard[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::editcard[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Editing a Card: Shortcut Formats"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The `edit` command allows for the values of a Card\u0027s face(s) to be changed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `edit INDEX FRONT:BACK`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* `edit INDEX :BACK`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `edit INDEX FRONT:`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "amrl"
        },
        "content": "This functionality is implemented by replacing the Card to be edited in the Deck with a new Card containing"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "amrl"
        },
        "content": "the new face values (`FRONT` and `BACK`). The shortcut versions of the command (second and third formats above) allows"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "amrl"
        },
        "content": "for one face value of the Card to be edited while preserving the other face value. In this situation, the unedited face"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "amrl"
        },
        "content": "value in the new Card will be a blank string (since either `FRONT` or `BACK` will be a blank string). Subsequently, this"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "amrl"
        },
        "content": "blank value will be replaced by the associated value in the Card to be replaced."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "amrl"
        },
        "content": "Below is a summary of the operations flow during the editing of a card."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Operations flow during an Edit command."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::EditCardActivityDiagram.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "amrl"
        },
        "content": "The validation of the arguments in the `edit` command is performed in `EditCommandParser#parse()`. Note that"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "amrl"
        },
        "content": "the validation only checks that the command is well-formed, i.e. understandable by FlashSpeed. It does not check for the validity of the command"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "amrl"
        },
        "content": "in the current environment (e.g. if we are currently in Deck view or not). This is for separation of parsing"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "amrl"
        },
        "content": "logic and model management logic."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "amrl"
        },
        "content": "In `EditCommandParser#parse()`, the `INDEX` of the card to be edited and the new face value(s) are extracted"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "amrl"
        },
        "content": "from the arguments in the `edit` command. The `INDEX` is converted to an Index object. An `EditCardCommand`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "amrl"
        },
        "content": "object is then constructed with the Index and the new Card as its parameters."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "amrl"
        },
        "content": "When `EditCardCommand#execute()` is executed, the environment is then checked. The `edit` command is only valid when"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "amrl"
        },
        "content": "we are currently in a Deck, thus a check on the current view is performed using `ModelManager#getView()`. Then"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "amrl"
        },
        "content": "the Index of the card to be edited is checked by ensuring it is in the range of [0, size of current Deck) using"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "amrl"
        },
        "content": "`ModelManager#getCurrentDeck().getSize()`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "amrl"
        },
        "content": "To perform a replacement of a Card in the current Deck, we need the old Card and the new Card. The old Card is required"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "amrl"
        },
        "content": "so we can know which Card is to be replaced via an equality check and also to know the face value which needs to be"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "amrl"
        },
        "content": "preserved (if needed). We can get the Card to be edited using `ModelManager#getCard()` with the provided Index."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "amrl"
        },
        "content": "The new Card can then be created."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "amrl"
        },
        "content": "We can then perform the replacement using `ModelManager#replaceCard()` with the old Card and the new Card as the parameters."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The following sequence diagram shows the sequence of operations due to an `edit` command."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Operations performed for the `edit 1 fr:bk` command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::EditSequenceDiagram.png[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the replacement Card is formed during the start of execution"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "amrl"
        },
        "content": "* **Alternative 1 (current choice):** A blank string in a face of the new Card means we use the face value in the Card to be replaced."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Pros: Easy to implement. Can use the extracted values in the arguments as is. Let the final step (`UniqueCardList#replace()`) handle the replacement logic."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Cons: From `EditCardCommandParser` until the end of the command execution in `LogicManager`, there may exist a Card with a face containing a blank string. May not be a desirable object to have."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "amrl"
        },
        "content": "* **Alternative 2:** Get the Card to be edited directly in `EditCardCommandParser` so we can immediately produce the new Card with its final face values."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Pros: The Card to replace the old Card will be fully formed from the start."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Cons: No separation of parsing and model management logic since we would need to do a view check and get a Card from the current Deck all while in the parser."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::editcard[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::play[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Starting a play session"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The `play` command creates a new session to play with a specific deck."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax: `play INDEX`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The play command changes the mode of the application to `PLAY` mode and creates a new session with the Deck at the given `INDEX`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The value of the `FRONT` of the selected `Deck` will be displayed to the user."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The first validation of the `play` command is performed in `PlayCommandParser#parse()`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The validation only checks that the `play` command has the correct format as the `INDEX` argument is given by the user and it is performed on the login level."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "In `PlayCommandParser#parse()`, the `INDEX` of the deck is extracted from the arguments in the `play` command. The `INDEX` is converted to an Index object. An `PlayCommand`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "object is then constructed with the Index."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "After the object of the `PlayCommand\u0027 is constructed, `PlayCommand#execute()` will be executed and the second validation of the `play` command is performed."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "This validation firstly checks if the given `INDEX` argument is a non-negative integer and is within the number of cards in the selected Deck. Then the validation checks if"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "there is any card currently in the selected deck by checking if the `FRONT` face and `BACK` face of the card returned by `ModelManager#play()` are both empty."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "A valid `play` command will change the `MODE` of the `ModelManager` to `PLAY` mode and a `GameManager` object will be constructed in `ModelManager`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The first card of the selected deck is obtained using `deck#asUnmodifiableObservableList().get(0)` and returned to UI. The `FRONT` face of the first card will be displayed to the user."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The following sequence diagram shows how the `play` operation works."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".Interactions inside Logic and Model components when `play 1` is executed"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "image::PlaySequenceDiagram.png[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::flip[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Flipping a Card"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The `flip` command flips a card in the selected deck to view the `BACK` face of the card."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax: `flip`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The `flip` command displays the `BACK` face of the card that the user is currently playing with to the user so that user is able to check if his or her answer is correct."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "No user parameter is required, hence a parser is not needed."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "An `FlipCommand` object is constructed and `FlipCommand#execute()` is executed. In `FlipCommand#execute()`, validation for the `flip` command is performed."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The validation will check if `ModelManager` is in `PLAY` mode using `ModelManager#getMode()`. if `ModelManager` is in `PLAY` mode, then the validation will check if the card has been flipped"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "by checking if the returned `BACK` face of the card is empty since a card can only be flipped once."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "After that, `ModelManager#flip()` will be executed. In `ModelManager#flip()`, `GameManager#flip()` will be executed and the `BACK` face of the card is obtained using `GameManager#cards.get(counter).getBackFace()` and returned to `ModelManager`."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "A valid `flip` command returns the `BACK` face of the card that the user is currently playing to the UI and displays it to the user."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The following sequence diagram shows how the `flip` operation works."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".Interactions inside Logic and Model components when `flip` is executed"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "image::FlipSequenceDiagram.png[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::answer[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Answering in a play session"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "User answers to the card that he or she is currently playing with using `yes` or `no` command."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Accepted syntax: `yes` or `no`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "After flipping the card, users indicates if he or she gets the correct answer by using `yes` and `no` command."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Validation and extraction of input in parser"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "No user parameter is required, hence a parser is not needed."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution of Command object"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "An `AnswerYesCommand` or `AnswerNoCommand` object is constructed and `AnswerYesCommand#execute()` or `AnswerNoCommand#execute()` is executed accordingly. Validation for the `yes` and `no` command is performed to check"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "if if `ModelManager` is in `PLAY` mode using `ModelManager#getMode()`. if `ModelManager` is in `PLAY` mode, then the validation will check if the card has been flipped"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "using `ModelManager#getGame().isFlipped()` since a card should not have been flipped before user answers to the card."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "After that, `ModelManager#answerYes()` or `ModelManager#answerNo()` will be executed accordingly. In `ModelManager#answerYes()` and `ModelManager#answerNo()`, `GameManager#answerYes()` and `GameManager#answerNo()` will be executed accordingly"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "and the next card is obtained using `GameManager#cards.get(counter)` and returned to `ModelManager`. `ModelManager` will check if `ModelManager` will check if the session has ended as the user have run through every card in the deck by checking"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "if the returned card is empty."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "A valid `yes` or `no` command returns the next card to the UI and the `FRONT` face of the card is displayed to the user."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "The following sequence diagrams show how the `yes` and `no` operation work."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".Interactions inside Logic and Model components when `yes` is executed"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "image::AnswerYesSequenceDiagram.png[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".Interactions inside Logic and Model components when `no` is executed"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "image::AnswerNoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::play[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::design-consideration-play[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using `yes` and `no` instead of the actual answer."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* **Alternative 1 (current choice):** Using a simple yes or no"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Pros: User can definitively choose if their answer was correct or not. This leads to accurate evaluation and statistics calculation."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Cons: Not as interactive as if the user were to type in the correct word/sentence itself."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* **Alternative 2:** Typing in the actual answer itself."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Pros: More interactive to the user."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Cons: Typos or slightly incomplete (but correct) answers can be typed it by the user."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "As the answers typed in mush exactly match the one on the card, it may result in inaccurate evaluation and statistics calculation at the end of the game."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::design-consideration-play[]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::appendixA[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* has a need to memorize a large number of new vocabulary words in a foreign language"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* can accomplish most tasks faster via CLI, compared to a hypothetical GUI-version"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Value proposition*: study new vocabulary words anytime and anywhere"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendixA[]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::appendixB[]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |create a new \u003c\u003cdeck,deck\u003e\u003e |"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |delete a deck |remove decks that I no longer need"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |list all decks |check what decks I can choose from to use"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |add a \u003c\u003ccard,card\u003e\u003e to a deck |add words that I want to practice with"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |delete a card from a deck|remove words that I no longer want to practice with"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |show both sides of a card|check the translation of a word"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |show all cards in a deck (view deck) |"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |edit a card in a deck |update or enhance the content of a card"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |delete all decks |start afresh with a clean slate program"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |delete all cards in a deck |start afresh with a clean deck of the same name"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* * *` |user |exit the program by typing | exit the program without using the mouse"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* *` |user |have a \u003c\u003cspaced-repetition-system,spaced-repetition system\u003e\u003e |memorize new words even more effectively"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* *` |user |find a deck by name |locate the deck without having to go through the entire list of decks"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* *` |user |find a specific card by name in any language |locate the card without having to go through the entire list of decks and cards"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* *` |user |be able to choose which side of the card to see first |have two ways of memorizing new words."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`* *` |user |keep track of how many cards I have visited | so that I can see my progress of learning a deck"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`*` |user |clone a deck of cards |so that I can create custom sets of decks from existing decks quickly"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`*` |user |add audio files to cards |add more information such as the correct pronunciation to the card"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`*` |user |choose to have a card I appear more times |have cards that are harder to memorize appear more frequently"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|`*` |user |timer for going through a deck |see how much time it took me to memorize a deck of cards"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendixB[]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "(For all use cases below, the *System* is the `FlashSpeed` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC01: Help"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  User requests help."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  FlashSpeed pops up a new small window and shows all possible commands and their usage."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC02: Create a new deck"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  User requests to create a deck of a certain name."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  FlashSpeed creates a new deck and the deck shows up on the UI."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given name already exists."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::appendixC[]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC03: Delete a deck"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1. FlashSpeed shows a list of decks."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2. User chooses a deck and deletes it."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3. The deck disappears from the list of decks."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1. The list is empty."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC04: View a deck (select)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1. FlashSpeed shows a list of all decks."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2. Uer chooses a deck and requests to view that deck."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3. FlashSpeed shows a list of all cards in the deck."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1. The list is empty."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendixC[]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC05: Add a card to a deck"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  FlashSpeed shows a list of decks."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  User chooses a deck and requests to view that deck."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3.  FlashSpeed shows a list of all cards in the deck."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "4.  User requests to add a specific card in the deck."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "5.  FlashSpeed adds the card and the card shows up in the deck."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given deck index is invalid."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 4a. The deck already contains the same card the user requested to add."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 4a. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC06: Delete a card from a deck"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  FlashSpeed shows a list of decks."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  User chooses a deck and requests to list all cards in that deck."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3.  FlashSpeed shows a list of all cards in the deck."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "4.  User requests to delete a specific card in the deck."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "5.  FlashSpeed deletes the card and the card disappears from the deck."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 3a. The deck is empty."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 4a. The given index is invalid."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 4a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC07: Edit a card in a deck"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  FlashSpeed shows a list of decks."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  User chooses a deck and requests to list all cards in that deck."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3.  FlashSpeed shows a list of all cards in the deck."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "4.  User requests to edit a specific card in the deck."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "5.  FlashSpeed edits the card."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 3a. The deck is empty."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 4a. The given index is invalid."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 4a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC08: Delete all decks"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  User requests to delete all decks."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  FlashSpeed deletes all decks."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC09: Exit"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1. User requests to exit FlashSpeed."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC10: Playing a deck"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1. FlashSpeed shows a list of all decks."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2. User chooses a deck and requests to play that deck."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3. FlashSpeed changes into game view and starts the game."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1. The list is empty."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d UC10: Playing a game."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "1.  FlashSpeed shows a list of all decks."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "2.  User chooses a deck and requests to play that deck."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "3.  FlashSpeed changes into game view and starts the game."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "4.  FlashSpeed shows a card."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "5.  User flips the card."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "6.  FlashSpeed shows the other side of the card."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "7.  User types in yes or no to indicate the correctness of their answer."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "8.  FlashSpeed goes to next card."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "9.  Use case repeats from step 4 to step 7 until all cards are answered and the game ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "10.  FlashSpeed shows the statistics of game."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 2a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 3a. The deck is empty."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 3a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* 4a. The given index is invalid."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** 4a1. FlashSpeed shows an error message."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".  Should be able to hold up to 1000 decks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::appendixE[]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "amrl"
        },
        "content": "Windows, Linux, Unix, macOS."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[deck]] Deck::"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "amrl"
        },
        "content": "A Deck is a group of Cards."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[card]] Card::"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "amrl"
        },
        "content": "A Card mimics a physical flashcard. It has two faces. One side for prompting the user and the other side for the content the user wants to memorize."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[smart-review-system]] Smarter Review System::"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "The smarter review system is adopted from the well known \u003c\u003cspaced-repetition-system, Space Repetition System\u003e\u003e."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Cards that are answered wrongly in Play Mode will be shown more frequently in this system."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[spaced-repetition-system]] Space Repetition System::"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "amrl"
        },
        "content": "Spaced repetition is an evidence-based learning technique that is usually performed with flashcards. Newly introduced and more difficult flashcards are shown more frequently while older and less difficult flashcards are shown less frequently in order to exploit the psychological spacing effect."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendixE[]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//tag::views[]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[view]] View::"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "amrl"
        },
        "content": "The state or mode which FlashSpeed is in."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "There are three different views in FlashSpeed."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* \u003c\u003clibrary-view, Library View\u003e\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* \u003c\u003cdeck-view, Deck View\u003e\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* \u003c\u003cplay, Play View\u003e\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[library-view]] Library View::"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "amrl"
        },
        "content": "When no deck is selected and no cards are shown."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ".In Library view. No deck is selected."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::library.png[]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[[deck-view]] Deck View::"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "amrl"
        },
        "content": "When a deck is selected and its cards are shown."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ".In Deck view. A deck has been selected."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "[[play]] Play View::"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "amrl"
        },
        "content": "When in a study session of a deck."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ".In Play view. A deck is being studied."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui2.png[]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//end::views[]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Anki*"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Author: Damien Elmes"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Study algorithm is useful for easily memorizing content."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Extensive card browser"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Not as appealing UI."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Not friendly for fast typist to execute commands/tasks (no CLI)."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Shows the GUI with a set of sample decks and cards. The minimum optimum window size for the app is already set."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Help functionality"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Opening Help Window"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Opens the help window"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: Pressing the `F1` key on the keyboard. +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Opens the help window"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Closing the Help Window"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: Help Window is opened"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: Pressing the `Alt + F4` keys on the keyboard. +"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Closes the help window"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: Pressing the `X` button on the help window. +"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Closes the help window"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Reading off from where you last left off."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Open the help window."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Scroll down to any part of the User Guide to read."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Close the help window."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Re-launch the help window. +"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: The help window opens to the page you last left off from."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::appendixG[]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Deck functionality"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Creating a deck."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `create Russian` +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Deck shows up on the deck list on the left panel and the (currently empty) card list is shown on the right panel."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `create x` (where x is a deck name that already exists) +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No new deck is created. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect create commands to try: `create`, `create  `"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Similar to previous"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Deleting a deck from the deck list shown on the left panel."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: Ensure that FlashSpeed contains at least 1 Deck, which can be seen on the left panel."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `remove 1` +"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: First deck is deleted from the list. Name of the deleted deck is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `remove 0` +"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No deck is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect delete commands to try: `remove`, `remove x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Renaming a deck."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: Ensure that FlashSpeed contains at least 1 Deck, which can be seen on the left panel."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `rename 1 Russian` +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: New deck name shows up on the deck list on the left panel."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `rename 0 Russian` +"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No deck is renamed. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect create commands to try: `rename Russian`, `rename`, `rename x Russian` (where x is larger than the list size),"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   `rename 1 y` (where y is a deck name that already exists) +"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Card functionality"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Adding a card to a deck."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: A deck needs to be selected first via `select INDEX`"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `add 아녕하세요 : hello` +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Card shows up on the card list on the right panel."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `add 안녕:하세요:hello`"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No card is created. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect create commands to try: `add 안녕하세요: `, `add :hello` +"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Expected: Similar to previous"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Deleting a card from the card list shown on the right panel."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: A deck needs to be selected first via `select INDEX`"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: First card is deleted from the list. Name of the deleted card is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No card is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Editing a card."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: A deck needs to be selected first via `select INDEX`"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `edit 1 안녕 : Hi!` +"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: New card information is reflected on the card list on the left panel."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `edit 1 안녕:` +"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: New card information (the front side) is reflected on the card list on the left panel."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `edit 1 : Hi!` +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: New card information (the back side) is reflected on the card list on the left panel."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `edit 0 안녕하세요: Hi!` +"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No card is edited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect create commands to try: `edit`, `edit test : test test`, `edit x Russian : 러시안어` (where x is larger than the list size),"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   `rename 1 y` (where y is a card that already exists) +"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendixG[]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Game-play functionality"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Starting a game"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: Ensure that FlashSpeed contains at least 1 Deck, which can be seen on the left panel."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `play 1` +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: First deck is chosen and play mode starts."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `play 0` +"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: No deck chosen and played. Error details shown in the status message."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Other incorrect delete commands to try: `play`, `play x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Flipping a card in game"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: FlashSpeed is in a game session and the current card has not been flipped yet."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `flip` +"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: The back side of the card is shown."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `flip` when the back side of the card is already shown +"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Nothing happens. Error details shown in the status message."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Answering yes or no in game"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: FlashSpeed is in a game session and the current card has already been flipped."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `yes` or `no` +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: The next card is shown or the game ends."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `yes` or `no` when the card is not yet flipped. +"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: Nothing happens. Error details shown in the status message."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Ending a game"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: FlashSpeed is in a game session."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case: `flip` + `yes` until the game ends +"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   Expected: A statistics screen will popup showing the statistics of the game."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d\u003d Game statistics"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Display game statistics"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Prerequisites: Ensure that FlashSpeed contains at least 1 Deck, which can be seen on the left panel."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".... Start a game session with a deck."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".... Cycle through `flip`, `yes` or `no`."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".... Take note of the progress bar / counters / number of cards answered wrongly."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".... When the game end, the statistics of your game will show up."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".... Ensure that the numbers you have calculated / seen / taken note of tally up."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "FlashSpeed, a flashcard application, is aimed specifically at helping University students with learning a new language."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is significantly different from Address Book 3 (AB3) although it is based off of it."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "amrl"
        },
        "content": "In addition to changing existing features in AB3, we needed to add additional features that would complete our flashcard application. For example, the Play feature is a new feature"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "amrl"
        },
        "content": "introduced in FlashSpeed."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Challenges and Effort*"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Card and Deck Model* +"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "AB3 contained a `person` class, which we wanted to refactor into our `card` class since each card contained information that"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "could be easily refactored from `person`. However, since we wanted it to be possible to have many cards in a deck and many decks in a library,"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "there was a design consideration of how we should implement `deck`. After much discussion, we decided to implement it as what can"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "be described as a \"layered AB3\" implementation, where in AB3, an addressbook contains persons, but now we have a bigger library that"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "contains multiple addressbooks."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Play feature* +"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "amrl"
        },
        "content": "Since this was a brand new feature that was created from scratch,"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "amrl"
        },
        "content": "there were multiple suggestions from different members for"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "best way to implement it. After much discussion and some compromise from each design, we came out with our final implementation. Additionally, since"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "it was a new feature, even after we did the initial implementation, there were things that we did not foresee, such as how the UI would"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "amrl"
        },
        "content": "handle the different views depending on the state of the game and the defensive code to implement to prevent bugs."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *User Interface Design* +"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "We were brainstorming for a good interface that could support the three views that we had: Library View, Deck View and Play View."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "amrl"
        },
        "content": "We managed to create about 2-3 mock-ups that everyone thought looked really good."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "amrl"
        },
        "content": "We then examined the User Experience (UX) advantages"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "amrl"
        },
        "content": "between the mock-ups and decided ultimately that an enhanced AB3 layout was the best for our flashcard purposes."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *User Interface Implementation* +"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "amrl"
        },
        "content": "As none of the members in our team were experienced with UI design, our initial mock-up and vision of the UI proved too difficult for us to implement within our time frame."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "amrl"
        },
        "content": "However, Robert (our UI Lead) focused on building and designing the UI while the rest of the team focused on the functional components of FlashSpeed."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "amrl"
        },
        "content": "Robert would ask us for input based on the experimental UIs that he had designed and improve it based on our suggestions. +"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Design Considerations* +"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "amrl"
        },
        "content": "For each major enhancement, there were always a few design alternatives to choose from. As each team member felt that their design considerations had merit,"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "amrl"
        },
        "content": "in our first major enhancement meeting, we spent 2 hours deciding on the initial design implementation. After that meeting, our team decided"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "amrl"
        },
        "content": "on a faster way to resolve such cases by spending a maximum of 30 minutes discussing before casting a vote. It worked well for the"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "future meetings."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*Achievements*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "amrl"
        },
        "content": ". We managed to create FlashSpeed to what we envisioned it to be with the features we wanted."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "amrl"
        },
        "content": ". Although we did not manage to implement all the user-stories that we brain-stormed, we implemented all the essential functionality of FlashSpeed plus a few more nice features."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "amrl"
        },
        "content": ". FlashSpeed can safely support most digitized written languages in the world, due to our stringent parser checks and language support from Java."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "amrl"
        },
        "content": ". We learnt a lot about important processes and considerations in software development, e.g consistent coding style, version control skills, documentation writing, extensive testing, etc."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::appendix[]"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 70,
      "ncslzh": 654,
      "kschiew": 84,
      "lacedaemon98": 27,
      "amrl": 122,
      "-": 310
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d FlashSpeed - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 2,
      "-": 121
    }
  },
  {
    "path": "docs/HelpWindow.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::UserGuide.adoc[]"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 3
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d FlashSpeed - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": ". Run the `Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "After forking the repo, the documentation will still have the FlashSpeed Foundation branding and refer to the `AY1920S2-CS2103T-W17-1/main` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S2-CS2103T-W17-1/main`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, FlashSpeed\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "ncslzh": 5,
      "kschiew": 1,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d FlashSpeed - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "e.g. `com.flashspeed.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "e.g. `LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 3,
      "kschiew": 2,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d FlashSpeed - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "By: `FlashSpeed Foundation`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::intro[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language. University students often have hectic schedules. With this in mind, FlashSpeed was created to allow students to be able to study and revise foreign vocabulary on the fly. With a single command, you can start a quick study session on FlashSpeed whenever!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "Keeping, flipping, and tracking physical flashcards can be a pain. FlashSpeed enhances the studying process by having virtual flashcards and a smarter review system. Users will be tested more frequently on flashcards that they had trouble memorizing previously. By using FlashSpeed, you will learn faster and remember for longer!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "This guide will walk you through the many exciting features of FlashSpeed as well as give step-by-step instructions on how to use them. Helpful tips and notes are also provided! +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "We hope you enjoy using our app. Happy FlashSpeeding!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Language Support"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed can support almost every popular language and their associated script. You can even use emojis in your cards! 😍 +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can use FlashSpeed to study: +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "- Japanese"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "- Korean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "- French"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "- Spanish"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "- German"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "- Hindi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "- Russian"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "- ...and many more!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "The display of the characters may be limited to your own operating systems\u0027s language support. Please refer to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "your operating system\u0027s manual or user guide to find out the languages and scripts supported."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "Technical info: FlashSpeed, which is built with Java, supports the Unicode standard with UTF-16 character encoding for"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "textual representation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::intro[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "Getting FlashSpeed up and running is fast and easy. Follow these simple steps to get started!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Ensure you have Java `11` installed in your computer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Download the latest `flashspeed.jar` file link:https://github.com/AY1920S2-CS2103T-W17-1/main/releases[here]. This is the entire FlashSpeed app in one convenient package."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Copy `flashspeed.jar` to a folder of your choice. This will be FlashSpeed\u0027s home folder. All files created by FlashSpeed will be automatically stored here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Double-click `flashspeed.jar` to start it. FlashSpeed will appear in a few seconds."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Type a command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the Help window."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "* **`create`**`Japanese 1` : creates a deck named `Japanese 1` in the library"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "* **`remove`**`3` : removes the 3rd deck shown in the decks list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command or \u003c\u003cCommand Summary\u003e\u003e for a condensed view of all commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Command Format and Input*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Words in `\u003c\u003e` are the command parameters to be supplied by you, +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. for the command format of `create \u003cdeck\u003e`, `\u003cdeck\u003e` is a parameter of your choice, such as `create Japanese 1`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "* All *parameters* will have any leading and trailing whitespace removed before being processed, +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `\u003cdeck\u003e` is equal to `\u0026#32;\u003cdeck\u003e\u0026#32;`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//tag::views[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Different Views*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "A view is simply the state or mode of FlashSpeed you are in now."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "You will be able to identify the view you are in from what you are currently seeing in FlashSpeed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "Some commands only work in certain views. Don\u0027t worry, this guide will tell you all you need to know!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed can be in one of 3 different views, namely:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Library view:* when no deck is selected and no cards are shown"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": ".In Library view. No deck is selected."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::library.png[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Deck view:* when a deck is selected and its cards are shown"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": ".In Deck view. A deck has been selected."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Play view:* when in a study session of a deck"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrl"
        },
        "content": ".In Play view. A deck is being studied."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui2.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//end::views[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can view this user guide in a new popup window by"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "typing `help` in the input box and pressing kbd:[Enter]. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can close the help window either by clicking on the close button"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "or pressing kbd:[Alt]+kbd:[F4] while the help window is in focus."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can exit FlashSpeed by typing `exit` in the input box"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrl"
        },
        "content": "and pressing kbd:[Enter]. Bye! +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Resetting the library : `reset`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `reset`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrl"
        },
        "content": "If you want to delete everything in the library to start fresh, you can choose to reset the library."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "Simply type `reset` in the input box and press kbd:[Enter]. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amrl"
        },
        "content": "You cannot reset the library while in Play view."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After resetting. A new start!"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::reset.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::library-view[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Library view"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amrl"
        },
        "content": "**Even though the commands in this section are mainly library based, you can use them in both the Library view and Deck view!**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amrl"
        },
        "content": ".No deck selected. You\u0027re now in Library view."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::library.png[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::library-view[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// tag::createdeck[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a deck : `create`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `create \u003cdeck\u003e`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kschiew"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Creates a deck with the deck name specified by the user. The deck name cannot be empty."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kschiew"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kschiew"
        },
        "content": "After downloading and setting up FlashSpeed, you\u0027re all set to go!"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kschiew"
        },
        "content": "But before anything else, you will have to first *create a deck*."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amrl"
        },
        "content": "The process of creating a deck in FlashSpeed is easy."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amrl"
        },
        "content": "Let\u0027s say you want to create a deck to revise some Japanese verbs"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amrl"
        },
        "content": "to prepare for your upcoming test."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kschiew"
        },
        "content": "To do so:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amrl"
        },
        "content": ". Firstly, type `create` followed by the deck name into the input box."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amrl"
        },
        "content": "* e.g. `create Japanese Verbs`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amrl"
        },
        "content": "+"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Typing the command to create the Japanese Verbs deck."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::create1.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amrl"
        },
        "content": ". Press kbd:[Enter]."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kschiew"
        },
        "content": ". Voila!"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amrl"
        },
        "content": "+"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After creating the Japanese Verbs deck."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kschiew"
        },
        "content": "image::create2.png[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// end::createdeck[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::select-deck[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kschiew"
        },
        "content": "[[selectDeck]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a deck : `select`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `select \u003cindex\u003e`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Formal definition*:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Selects and shows all cards in the deck at the specified `index`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amrl"
        },
        "content": "The `index` refers to the index number shown in the displayed decks list. The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amrl"
        },
        "content": "If you want to view the cards in a particular deck, you can use `select` followed by the deck\u0027s index number."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amrl"
        },
        "content": "The index number is the number to the left of its name."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amrl"
        },
        "content": "After selecting a deck, FlashSpeed will enter the Deck view and"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amrl"
        },
        "content": "show all the cards in that deck. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amrl"
        },
        "content": "In the Deck view, you can use any of the Deck mode commands listed in \u003c\u003cdeckViewAnchor, 3.3. Deck view\u003e\u003e."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amrl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amrl"
        },
        "content": "Selects and shows all cards in the 1st deck."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Selecting a deck and showing its cards."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::select-deck[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a deck : `remove`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `remove \u003cindex\u003e`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Formal definition*: Removes the deck in the library at the specified `index`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amrl"
        },
        "content": "The `index` refers to the index number shown in the displayed decks list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amrl"
        },
        "content": "The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amrl"
        },
        "content": "Similarly, you can remove a deck in the library using `remove` followed by the index number of that deck. Bye bye, deck!"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amrl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `remove 2` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amrl"
        },
        "content": "Removes the 2nd deck from the library."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After removing the Japanese Verbs deck. It\u0027s gone."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::remove.png[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// tag::renameAndPlay[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Renaming a deck : `rename`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `rename \u003cindex\u003e \u003cdeck\u003e`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Renames the deck in the library at the specified `index`. The `index` refers to the index number shown in the displayed decks list. The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can rename a deck in the library using `rename` followed by the index number of the deck and the new name of the deck. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amrl"
        },
        "content": "The deck name cannot by empty."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `rename 2 Japanese Verbs` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "amrl"
        },
        "content": "Renames the 2nd deck in the library to \"Japanese Verbs\"."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After renaming a deck from \"Korean\" to \"Japanese Verbs\". Wow, what a change."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::rename.png[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amrl"
        },
        "content": "[[playDeck]]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Playing a deck : `play`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `play \u003cindex\u003e`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Starts a study session with the deck in the library at the specified `index`. The `index` refers to the index number shown in the displayed decks list. The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amrl"
        },
        "content": "Alright, this is what you\u0027ve been waiting for! In order to start a study session with a certain deck,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amrl"
        },
        "content": "type `play` followed by the deck\u0027s index number and press kbd:[Enter]. Good luck on your learning journey."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amrl"
        },
        "content": "FYI: we \"play\" a deck because learning is fun! +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `play 1` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "amrl"
        },
        "content": "Starts a study session with the 1st deck in the library."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Studying/Playing the Japanese deck."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui2.png[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "// end::renameAndPlay[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kschiew"
        },
        "content": "[[deckViewAnchor]]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Deck view"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "amrl"
        },
        "content": "**Important: All commands in this section can only be used in Deck view.**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "amrl"
        },
        "content": "**To enter Deck view, you must \u003c\u003cselectDeck, select a deck\u003e\u003e.**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After selecting a deck. You\u0027re now in Deck view."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// tag::addcard[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "amrl"
        },
        "content": "[#_adding_a_card_add]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a card : `add`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `add \u003cfront\u003e:\u003cback\u003e`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kschiew"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Creates a card and adds it to a deck,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "amrl"
        },
        "content": "with the `front` and `back` values of the card specified by the user."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "amrl"
        },
        "content": "Both the `front` and `back` values cannot be empty."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kschiew"
        },
        "content": "****"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *One and only one* colon (\":\") can be used in this command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "amrl"
        },
        "content": "Since a colon is used as the separator, there should not be any colons in the `front` or `back` values."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "amrl"
        },
        "content": "Alright, after creating a new deck and giving it a great name, what\u0027s next?"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Adding cards* into the deck, of course!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "amrl"
        },
        "content": "Once again, the process is easy:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kschiew"
        },
        "content": ". Select the deck to which you want to add cards, with the `select` command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "amrl"
        },
        "content": "+"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `select 1`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kschiew"
        },
        "content": ". Inside the input box, type:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "amrl"
        },
        "content": "* `add`, followed by"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "amrl"
        },
        "content": "*  the word/sentence that you want as the `front` of the card, then"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "amrl"
        },
        "content": "*  a colon \":\" right after, and finally"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "amrl"
        },
        "content": "*  the word/sentence that you want as the `back` of the card."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "amrl"
        },
        "content": "+"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `add ありがとう:thanks`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "amrl"
        },
        "content": ". Press kbd:[Enter]."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kschiew"
        },
        "content": ". Voila!"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "amrl"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Adding a new card into the Japanese deck."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::add.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kschiew"
        },
        "content": "// end::addcard[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a card : `edit`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format 1: `edit \u003cindex\u003e \u003cfront\u003e:\u003cback\u003e` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format 2: `edit \u003cindex\u003e :\u003cback\u003e` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format 3: `edit \u003cindex\u003e \u003cfront\u003e:`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Edits the card in the current deck at the specified `index`. The `index` refers to the index number shown in the displayed cards list. The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Existing values will be updated to the given values."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "amrl"
        },
        "content": "* Empty values for the `front` or `back` will leave the original `front` or `back` intact."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *One and only one* colon (\":\") can be used in this command."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "amrl"
        },
        "content": "Since a colon is used as the separator, there should not be any colons in the `front` or `back` values."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can edit the front and/or back values of any card in the current deck."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amrl"
        },
        "content": "The way to do so is similar to the \u003c\u003c_adding_a_card_add, `add`\u003e\u003e command as shown before. +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "amrl"
        },
        "content": "Type `edit`, followed by the index number of the card to be edited, then the new `front` value, then a colon (\":\"), and finally the new `back` value. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "amrl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "amrl"
        },
        "content": "You don\u0027t have to supply both the `front` and `back` values of a card if you only want to change one of them,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "amrl"
        },
        "content": "i.e. if you only wish to change the `back` of a card, `front` can be left blank, and vice versa."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `edit 2 ありがとう:thanks` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "amrl"
        },
        "content": "Edits the front and back values of the 2nd card in the deck to be `ありがとう` and `thanks` respectively."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `edit 2 :thanks` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "amrl"
        },
        "content": "Edits the back value of the 2nd card in the deck to be `thanks`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `edit 2 ありがとう:` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "amrl"
        },
        "content": "Edits the front value of the 2nd card in the deck to be `ありがとう`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Editing the 2nd card\u0027s back value from \"thank you\" to \"thanks\"."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::edit.png[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a card : `delete`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Formal definition*: Deletes the card in the current deck at the specified `index`. The `index` refers to the index number shown in the displayed cards list. The `index` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can delete a card from the selected deck by using `delete` followed by the index number of that card. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* `delete 3` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "Deletes the 3rd card in the current deck."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "amrl"
        },
        "content": ".After deleting the 3rd card in the current deck. It\u0027s not there anymore."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::delete.png[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Returning to the library : `return`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `return`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "amrl"
        },
        "content": "Once you\u0027re done viewing or modifying the selected deck,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "amrl"
        },
        "content": "you can return to the Library view with `return`, i.e. no deck will be selected. +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Returned to the Library view. No deck selected!"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::library.png[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Play view"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "Format: `play \u003cindex\u003e`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "amrl"
        },
        "content": "**Important: All commands in this section can only be used in Play view.**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "amrl"
        },
        "content": "**To enter Play view, you must \u003c\u003cplayDeck,play a deck\u003e\u003e.**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::play-view-language[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "amrl"
        },
        "content": "This is what you will see when you test yourself."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "amrl"
        },
        "content": "Strengthen your memory by frequently reviewing your cards!"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "amrl"
        },
        "content": "When playing a deck, each card will initially only show its front face to allow you to recall its associated back face."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::play-view-language[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Playing the Japanese deck. がんばってください。 Ganbatte kudasai!"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::Ui2.png[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "amrl"
        },
        "content": "****"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::flip-language[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Flipping a card : `flip`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `flip`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "amrl"
        },
        "content": "Are you ready to reveal the back face of the card?"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "amrl"
        },
        "content": "Let\u0027s flip it to check if your memory is spot on."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "amrl"
        },
        "content": "To flip a card, simply type `flip` into the input box and press kbd:[Enter]. +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::flip-language[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Flipping to reveal the back face of the card. Did you get it right?"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "amrl"
        },
        "content": "image::flip.png[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::answer-language[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Answering : `yes`/`no`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "Format: `yes` or `no`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "amrl"
        },
        "content": "Were you able to recall the correct back value? +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "amrl"
        },
        "content": "If you could, type `yes` into the input box and press kbd:[Enter]. Congratulations! +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "amrl"
        },
        "content": "If you could not or your guess was incorrect, type `no` into the input box and press kbd:[Enter]. Don\u0027t give up! +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::answer-language[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can only answer after flipping the card."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "amrl"
        },
        "content": "If you answered `no` for a card, you will have an opportunity to see it again later in the same session."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed optimizes for cards you find difficult."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "amrl"
        },
        "content": ".The next card (if any) will be immediately shown after answering."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::yes.png[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "amrl"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// tag::stop-language[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d\u003d Stopping a session: `stop`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "amrl"
        },
        "content": "Format: `stop`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "amrl"
        },
        "content": "A play session will end automatically when there are no more cards to review."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "amrl"
        },
        "content": "However, you can also stop an ongoing session immediately by typing `stop` into the input box and pressing kbd:[Enter]."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "amrl"
        },
        "content": "But of course, try your best and don\u0027t use this too often!"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "// end::stop-language[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "amrl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "amrl"
        },
        "content": "The session statistics will be shown either after completing a session or after manually stopping."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "amrl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can close the statistics window either by clicking on the close button"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "amrl"
        },
        "content": "or pressing kbd:[Alt]+kbd:[F4] while the statistics window is in focus."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "amrl"
        },
        "content": ".Statistics shown after manually stopping the session. You will also see it if you complete a session."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::stop.png[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d\u003d Save data"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "amrl"
        },
        "content": "All data in FlashSpeed (e.g. decks, cards) is saved automatically. It is all neatly placed in the folder you put FlashSpeed in. +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "amrl"
        },
        "content": "You don\u0027t have to worry about saving your precious flashcards manually!"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//tag::faq[]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: Does this application require an Internet connection? +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "amrl"
        },
        "content": "*A*: No, FlashSpeed does not require an Internet connection to use."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: What is the maximum length of text I can enter into a flashcard? +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "amrl"
        },
        "content": "*A*: The flashcard method of studying benefits from succinct and concise flashcards."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "amrl"
        },
        "content": "Even though FlashSpeed does not limit the maximum length of text that can be entered and stored,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "amrl"
        },
        "content": "it will only show the text up to the size of the available display space."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "amrl"
        },
        "content": "Therefore, we recommend keeping any text *under 60 characters*."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*Q*: How do I save my data? +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*A*: FlashSpeed automatically saves your data whenever you make a change. There is no need to save manually."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: Will my data be sent anywhere else or shared with third parties? +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "amrl"
        },
        "content": "*A*: Your data is stored locally on your own computer."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed does not use any Internet connection so no data can be sent to any online servers."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*A*: Simply copy the `data` folder in FlashSpeed\u0027s home folder over to the home folder in the other computer."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: How do I update FlashSpeed to the latest version when there is an update? +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "amrl"
        },
        "content": "*A*: You can check for any updates to FlashSpeed link:https://github.com/AY1920S2-CS2103T-W17-1/main/releases[here]."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "amrl"
        },
        "content": "You can then follow the same instructions as found in \u003c\u003cQuick Start\u003e\u003e."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "amrl"
        },
        "content": "*Q*: I am not able to run this application. What can I do? +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "amrl"
        },
        "content": "*A*: Refer to \u003c\u003cQuick Start\u003e\u003e for the installation guide. Ensure that your computer has Java 11 installed. FlashSpeed may not be able to run on other versions of Java."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "amrl"
        },
        "content": "Alternatively, you can contact us https://ay1920s2-cs2103t-w17-1.github.io/main/ContactUs.html[here] for any further help."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "//end::faq[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "amrl"
        },
        "content": "[[commandSummary]]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Help* : `help` +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Exit* : `exit` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Reset* : `reset`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Select* : `select \u003cindex\u003e` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `select 2`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Create* : `create \u003cdeck\u003e` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `create Japanese 1`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Remove* : `remove \u003cindex\u003e` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `remove 2`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Rename* : `rename \u003cindex\u003e \u003cdeck\u003e` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `rename 2 Japanese Verbs`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Play* : `play \u003cindex\u003e` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `play 2`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Add* `add \u003cfront\u003e:\u003cback\u003e` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `add ありがとう:thanks`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Edit* : `edit \u003cindex\u003e \u003cfront\u003e:\u003cback\u003e` or `edit \u003cindex\u003e :\u003cback\u003e` or `edit \u003cindex\u003e \u003cfront\u003e:` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "amrl"
        },
        "content": "e.g. `edit 1 ありがとう:thanks` or `edit 1 :thanks` or `edit 1 ありがとう:`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Delete* : `delete \u003cindex\u003e` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Return* : `return`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Flip* : `flip`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Yes* : `yes`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *No* : `no`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Stop* : `stop`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "amrl"
        },
        "content": "// tag::command-table[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "amrl"
        },
        "content": "[width\u003d\"60%\",cols\u003d\"30%,10%,10%,10%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "amrl"
        },
        "content": "|       3+|View"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "amrl"
        },
        "content": "|Command  |Library |Deck |Play"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`help`   |√      |√    |√"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`exit`   |√       |√    |√"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`reset`  |√       |√    |"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`select` |√       |√    |"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`create` |√       |√    |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`remove` |√       |√    |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`rename` |√       |√    |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`play`   |√       |√    |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`add`    |        |√    |"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`edit`   |        |√    |"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`delete` |        |√    |"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`return` |        |√    |"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`flip`   |        |     |√"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`yes`    |        |     |√"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`no`     |        |     |√"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "amrl"
        },
        "content": "|`stop`   |        |     |√"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "amrl"
        },
        "content": "// end::command-table[]"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 13,
      "kschiew": 43,
      "ncslzh": 2,
      "lacedaemon98": 62,
      "amrl": 402,
      "-": 100
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". Enter an arbitrary description e.g. flashspeed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "ncslzh": 2,
      "-": 40
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Creates the `flashspeed.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "-": 98
    }
  },
  {
    "path": "docs/team/amrl.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d Amirul Ardy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d PROJECT: FlashSpeed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is a text-based flashcard application which enables users to store virtual flashcards, categorize them within"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "decks, and launch review sessions of cards within those decks. It is designed for university students who are learning a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "foreign language or reading a language module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "It was developed as a team project for the CS2103T Software Engineering module in the National University of Singapore"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "(NUS). FlashSpeed was built on top of the AddressBook-Level3 project created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "FlashSpeed is written in Java and has a GUI created using JavaFX. Users interact with FlashSpeed mainly using textual commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "My roles in this project include being the technical leader and in-charge of the User Guide."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "As technical leader my responsibilities include ensuring the establishment of the week\u0027s tasks, adherence to the proper development workflow, and quality checks on pull requests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Major enhancement*: Added the *ability to edit cards and edit using shortened commands.*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "** What it does: Allows the user to perform the editing of card values using any one of three different command formats, where two of the formats are shortened forms (i.e. edit INDEX FRONT:BACK, edit INDEX :BACK, edit INDEX FRONT:)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Justification: This feature improves the product significantly because a user will be able to perform the editing of only the values they want to change, rather than having to retype the same value. This provides convenience and overall efficiency to the user. This functionality had the possibility to require a change in the entire logical chain but I decided that a reuse of existing functionality (e.g. add, delete, etc. to perform a Card replacement) would both reduce the possibility of logical bugs and code rewrite."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Highlights: This is the only command in the application which can take in multiple formats. The implementation of this feature required design considerations across the entire model of the application (e.g. overwrite values in the Card or do a full replacement with a new Card, where should the new Card interface with the Deck to retrieve the unchanged values if any, etc.) The edit functionality fulfilled its extended goals while being able to be treated as another standard command by the user and other developers."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Minor enhancement*: Added the implementations for the functional units of the application, i.e. Cards, Decks, and its UniqueCardLists."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Highlights: These are the abstractions of data which makes FlashSpeed a flashcard application. They are built in such a way that developers of the higher level logic and model management can treat them as total black boxes. These are also the items which users will be interacting with mostly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003damrl\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003damrl\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "** \u003e 1.2k LoC"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "** \u003e 40 Pull Requests: https://github.com/AY1920S2-CS2103T-W17-1/main/pulls?q\u003dauthor%3Aamrl[PRs]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Documentation contributed*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "** User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** In-charge of document"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Wrote or edited all sections either fully or partially"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Reformatted the structure and layout for ease of readability and navigability (e.g. topic headings, section spacing, etc.)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Maintenance of document to be up-to-date with current application version"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Added all tips and notes, command summary table, etc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Developer Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Wrote the `Design: Architecture` section and `Implementation: Editing a Card` section in the Developer Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** UML diagrams:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/ArchitectureDiagram.png[Architecture],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/LogicClassDiagram.png[Logic Class],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/ArchitectureSequenceDiagram.png[Architecture Sequence],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/DeleteSequenceDiagram.png[Remove Sequence],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/EditCardActivityDiagram.png[Edit Card Activity],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/blob/master/docs/images/EditSequenceDiagram.png[Edit Sequence]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Others:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Wrote the content in the README and site home page which includes our product description, marketing blurb, and target users"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Managed all releases `v1.1` - `v1.4` (6 releases) on GitHub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Added functionality and methods in ModelManager which uses our Cards and Decks as functional units"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Review/mentoring contributions:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** PRs reviewed: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/81[#81] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/84[#84] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/95[#95] etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Bug fixes in team members\u0027 sections: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/116[#116] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/129[#129] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/131[#131] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/139[#139] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/222[#222] etc."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Changes:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Morphed product site to be in line with our FlashSpeed product and branding"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Morphed codebase to remove and replace all AddressBook-Level3 references to become FlashSpeed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Set-up of Netlify"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Set-up and maintenance of GitHub issue tracker"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "*** Maintenance of Travis according to project workflow"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "---"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlibrary-view]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "---"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dselect-deck]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "---"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommand-table]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-arch]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "---"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditcard]"
      }
    ],
    "authorContributionMap": {
      "amrl": 95
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "// include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "// include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "// include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "// include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "amrl": 4,
      "-": 68
    }
  },
  {
    "path": "docs/team/kschiew.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d Chiew Kok Seng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d PROJECT: FlashSpeed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "---"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "who are learning a foreign language."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "University students often have hectic schedules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "With this in mind,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "FlashSpeed was created to allow students to be able to study and revise foreign vocabulary on the fly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "FlashSpeed was developed as a team project for the CS2103T Software Engineering module in the National University of Singapore"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "(NUS). It is considered a brownfield project as it was built on top of the AddressBook-Level3 project created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "FlashSpeed is written in Java and has a GUI created using https://openjfx.io/[JavaFX], with a storage system implemented using"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/FasterXML/jackson[Jackson]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Major enhancement 1*: designed the *architecture* of the app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** What it does: creates the backbone structure of the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Justification: This contribution is critical to the development of the product"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "because it created the basic structure of the app as well as designed the logic of the application,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "so that different features could be developed simultaneously."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Highlights: This contribution sets the tone of the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "It required an in-depth analysis of how the application should work in the future."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The implementation too was challenging as it required making high-level design choices."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Credits: Some of the high-level structure of FlashSpeed is inspired by Anki, a digital flashcard application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Major enhancement 2*: added the *storage function* to the app."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** What it does: allows the user to save and load the decks of cards created by the user to/from a local directory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Justification: This feature improves the usability of the product significantly"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "because a user needs to be able to retrieve the decks of cards that he/she has created in the past."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Highlights: This enhancement requires an deep understanding of how JSON files and the Jackson library."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "The implementation was quite challenging as there are quite a few layers of abstraction in the storage system"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "implemented by the original project that FlashSpeed is built upon."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Major enhancement 3*: added the ability to *generate statistics* after every game session."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** What it does: allows the user to look at the statistics related to the game session that he/she played."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Justification: This feature increases the usage rate of the app,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "because it provides a feedback on the performance of the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "By quantifying the performance, this gives user motivation to do better in subsequent game sessions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Thus, the user will start more game sessions and hence the app"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "usage time will increase."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Highlights: The difficulty was manageable,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "as most of the enhancement was essentially arithmetic manipulation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Minor enhancement*: Implemented the library class that contains the decks of cards along with another teammate,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "LiXin. Built and enhanced the Model and Logic Component with Amirul and LiXin."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkschiew\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Functional and Test code]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Opened https://github.com/AY1920S2-CS2103T-W17-1/main/issues?q\u003dauthor%3Akschiew+[22 issues], and got assigned https://github.com/AY1920S2-CS2103T-W17-1/main/issues?q\u003dassignee%3Akschiew[17 issues] on GitHub."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Created test utilities for teammates to utilize during testing (Pull requests https://github.com/AY1920S2-CS2103T-W17-1/main/pull/300[#300], https://github.com/AY1920S2-CS2103T-W17-1/main/pull/285[#285])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "(Pull requests https://github.com/AY1920S2-CS2103T-W17-1/main/pull/315[#36]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/pull/377[#377])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Changed the language used in the User Guide to be more user-friendly (Pull requests https://github.com/AY1920S2-CS2103T-W17-1/main/pull/170[#170] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/201[#201])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W17-1/main/pull/295[#295]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/pull/84[#84]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/pull/347[#347]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/kschiew/ped/issues/1[#1] https://github.com/kschiew/ped/issues/2[#2]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "https://github.com/kschiew/ped/issues/3[#3] https://github.com/kschiew/ped/issues/4[#4]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kschiew"
        },
        "content": "*** Integrated a third party library (Jackson) to the project (https://github.com/AY1920S2-CS2103T-W17-1/main/pull/119[#119])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kschiew"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcreatedeck]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddcard]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "//include::../UserGuide.adoc[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kschiew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kschiew"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kschiew"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcreatedeck]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddcard]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "kschiew": 116
    }
  },
  {
    "path": "docs/team/lacedaemon98.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d Pham Tran Tuan Linh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d\u003d PROJECT: FlashSpeed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::flashspeed_logo.png[width\u003d\"100\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language. University students often have hectic schedules. With this in mind, FlashSpeed was created to allow students to be able to study and revise foreign vocabulary on the fly. With a single command, you can start a quick study session on FlashSpeed whenever!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "Keeping, flipping, and tracking physical flashcards can be a pain. FlashSpeed enhances the studying process by having virtual flashcards and a smarter review system. Users will be tested more frequently on flashcards that they had trouble memorizing previously."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "By using FlashSpeed, you will learn faster and remember for longer!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Major enhancement 1*: Develop everything related to User Interface (UI) and User Experience (UX): colour scheme, displaying contents, placement of contents."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** What it does: Allows the user to view and interact with the application"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Justification: This component is crucial to the application because it visualises the whole application in order for it to function."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Highlights: This component requires a lot of research, planning and in-depth analysis of the behaviours of all existing and future features. E.g: When and how the scenes should be switched?; JavaFX and FXML research; When the user updates a content, how to show the updated content immediately?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Major enhancement 2*: Modify `LogicManager` and `ModelManager` classes and integrate them with GUI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** What it does: `LogicManager` and `ModelManager` facilitate the logic behind every command made by the user and reflect the changes on GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Justification: These components act as the brain cells of FlashSpeed to process every operation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Highlights: These components require in-depth understanding on the behaviours and the logic behind all features."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Contribute to the logic behind *Play view* commands and `select` command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Design the application logo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ".Draft version (left) and Final version (right) of FlashSpeed logo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "image::logos.jpg[width\u003d\"300\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dlacedaemon98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlacedaemon98\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Functional \u0026 Test code]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Actively initiate discussions and generate ideas outside meetings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Display help without Internet connection needed by showing the User Guide directly when using `help` instead of just showing the link: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/194[#194] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/195[#195]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Spot and fix bugs in other members\u0027 features such as `reset`, `stop`, `exit`, etc.: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/271[#271] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/175[#175] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/193[#193]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** PRs reviewed: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/222[#222] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/335[#335]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Reported bugs and provided suggestions for other teams: https://github.com/lacedaemon98/ped/issues/1[#1] https://github.com/lacedaemon98/ped/issues/2[#2] https://github.com/lacedaemon98/ped/issues/3[#3] https://github.com/lacedaemon98/ped/issues/4[#4] https://github.com/lacedaemon98/ped/issues/5[#5] https://github.com/lacedaemon98/ped/issues/6[#6] https://github.com/lacedaemon98/ped/issues/7[#7] https://github.com/lacedaemon98/ped/issues/8[#8]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Write multiple sections (shown below)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "*** Provide all the product screenshots in the User Guide and Developer Guide and update them when there are changes to the current application"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviews]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaq]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dUI-component]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dselectdeck]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviews]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 92
    }
  },
  {
    "path": "docs/team/ncslzh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d Nicholas Leong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-1/main/tree/master"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d PROJECT: FlashSpeed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Users are able to categorize virtually created flashcards into their own decks and launch review sessions within those decks. +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "My roles in this project include being in charge of the weekly agenda, minutes taker and in-charge of the Developer Guide."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "Being in charge of the weekly agenda meant that I briefed team members of the upcoming tasks to be discussed every meeting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "I also took down any important discussion points needed to complete to agenda items. I also established deadlines for weekly tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Major enhancement*: Added the *game algorithm for the game mode.*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". In a game, the next card is always randomly chosen."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". If the card is answered incorrectly, the user will have to answer that card another time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. However, the user only needs to answer correctly 2 times in a row to clear that card."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   For example, if the user gets the same card wrong 10 times in a row, he only needs to answer that card 2 times"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   to clear it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ".. If the user answers the card correctly one time and wrong after that. The user will still need to answer the card correctly"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "twice in a row."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ". If the card is answered correctly on the first try, that card is cleared and the user no longer has to answer it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Justification: This feature improves the product significantly because it helps the user memorize words more effectively as well"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "as making the app more challenging and fun to use. Users can memorize words more effectively when the ones they get wrong are shown more often."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Highlights: This algorithm affected existing features, such as the Statistics at the end of the game as well as the progress bar of the game."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "It required the team to decide how we should re-implement the existing affected features to accommodate this enhancement."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Other major enhancement*: Added *the Card and its relevant classes.*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** What it does: Just like a traditional flashcard, a Card allows users to enter content for the front and back faces of a Card."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Justification: This feature is essential to FlashSpeed. Without it, there is no flashcard representation in our app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Highlights: This enhancement required very in-depth analysis of design alternatives, such as where should we implement it, how should"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "   it interact with upper classes (Model, UI, Storage, Deck). It required a few hours of discussion and debate before we finally settled on the final design."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Credits: AB3 Person Class - The skeleton of the Card class was derived from that Class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Minor enhancement: Re-implemented how some parsers handled user input by using Java Regex."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "This was implemented to simplify how we got parameters especially for the shortcut formats that we wanted to implement for EditCardCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* Minor enhancement: Re-implemented the Help Window to display the entire User Guide instead of just the link."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dncslzh\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dncslzh\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** \u003e 5000 LoC"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** *Note:* Although there is a huge difference in LOC shown on tP Dashboard, my team contributed very evenly to functional code."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "* *Other contributions:*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Setting up Github and Travis"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Setting up and maintaining the Milestone Tracker"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Maintaining most of the issues on issue tracker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** *Enhancements to existing features:*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Merged two general parsers into one big master parser https://github.com/AY1920S2-CS2103T-W17-1/main/pull/97[#97]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Add validation checks for commands to prevent some commands from being used in certain modes  https://github.com/AY1920S2-CS2103T-W17-1/main/pull/145[#145]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "** *Documentation contributed:*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Developer Guide:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** In-charge of document quality"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Reformatted the structure and layout for ease of readability and navigability (e.g. topic headings, section spacing, etc.)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Wrote introduction"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Wrote the entire Appendix A-G"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Others:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Updated AB3 naming found in any documents into FlashSpeed https://github.com/AY1920S2-CS2103T-W17-1/main/pull/159[#159]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Removed unwanted documents https://github.com/AY1920S2-CS2103T-W17-1/main/pull/189[#189]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** Changed website header https://github.com/AY1920S2-CS2103T-W17-1/main/pull/190[#190]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "*** Review/mentoring contributions:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "**** PRs reviewed: https://github.com/AY1920S2-CS2103T-W17-1/main/pull/75[#75] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/84[#84] https://github.com/AY1920S2-CS2103T-W17-1/main/pull/295[#295]  https://github.com/AY1920S2-CS2103T-W17-1/main/pull/348[#348]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../UserGuide.adoc[tag\u003drenameAndPlay]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-logic]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcreate-deck-consideration]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-consideration-play]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixC]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{more at Appendix C in DG}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixE]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{Appendix naming is not correct here, more at Appendix E in DG}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixG]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "{more at Appendix G in DG}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ncslzh": 125
    }
  },
  {
    "path": "docs/team/olixino.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d Liao Li Xin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d PROJECT: FlashSpeed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "FlashSpeed is a text-based flashcard application specifically designed for university students who are learning a foreign language."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "FlashSpeed was created to allow students to be able to study and revise foreign vocabulary on the fly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "If you are currently learning a new language or interested to do so, FlashSpeed will be yor best companion and helper along"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "the learning journey."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Major enhancement 1*: added the *play view* of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** What it does: allows users to start a new game session to test their memory of the vocabulary."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** Justification: This feature is one of the essence of the app and it improves the product significantly in terms of functionality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "because users not only can store and memorize vocabulary, but also can test their memory by playing a game."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** Highlights: This enhancement affects other commands in different view since some commands can only be executed in one view."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "It requires more validations to be introduced to other commands as well as changes to the Model component to ensure isolation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "in different views."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Major enhancement 2*: implemented the *model manager* class of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** What it does: enables the Model component to handle all possible commands to be made by the users."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** Justification: This enhancement allows every operation to be executed at the Model level and increases the maintainability and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "scalability of the code since all operations are handled at one same place."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** Highlight: This enhancement requires an in-depth understanding of the overall architecture of the product and changes to be made to other related classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Minor enhancement*: added create/remove/rename deck command and add/delete card commands as the core functionality of the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dolixino\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003doLiXino\u0026tabRepo\u003dAY1920S2-CS2103T-W17-1%2Fmain%5Bmaster%5D[Functional and Test code]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** added stop command to allow users to end the game session halfway (Pull request https://github.com/AY1920S2-CS2103T-W17-1/main/pull/173[#173])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** fixed bugs during testing (Pull requests https://github.com/AY1920S2-CS2103T-W17-1/main/pull/198[#198],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-1/main/pull/276[#276], https://github.com/AY1920S2-CS2103T-W17-1/main/pull/286[#286])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** Refine Play View section of User Guide to be more user friendly. (Pull request https://github.com/AY1920S2-CS2103T-W17-1/main/pull/225[#255])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "*** Reported bugs and provided suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "https://github.com/oLiXino/ped/issues/1[#1] https://github.com/oLiXino/ped/issues/2[#2] https://github.com/oLiXino/ped/issues/3[#3])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../UserGuide.adoc[tag\u003dplay-view-language]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "---"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../UserGuide.adoc[tag\u003dflip-language]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../UserGuide.adoc[tag\u003danswer-language]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstop-language]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "---"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dplay]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oLiXino": 85
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must implement the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kschiew"
        },
        "content": "Create a new `Remark` in `deck`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amrl"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amrl"
        },
        "content": "----"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "amrl"
        },
        "content": "----"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kschiew"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`DeckCard`]."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "amrl": 4,
      "-": 420
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": "----"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "amrl": 2,
      "-": 115
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "`CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/com/flashspeed/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/flashspeed/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/flashspeed/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.LibraryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FlashSpeed ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        LibraryStorage libraryStorage \u003d new JsonLibraryStorage(userPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s library and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The data from the sample library will be used instead if {@code storage}\u0027s library is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * or an empty library will be used instead if errors occur when reading {@code storage}\u0027s library."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Optional\u003cReadOnlyLibrary\u003e libraryOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "            libraryOptional \u003d storage.readLibrary();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (!libraryOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample library\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "            initialData \u003d libraryOptional.orElseGet(SampleDataUtil::getSampleLibrary);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"Starting FlashSpeed \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FlashSpeed ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 23,
      "amrl": 25,
      "-": 140
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashspeed.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_INPUT_CONTAINS_COLON \u003d \"Card face value(s) should not contain colon(s)!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d decks listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_DECK_VIEW \u003d \"Currently not in a deck!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_NOT_IN_LIBRARY_VIEW \u003d \"Currently not in library mode!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "ncslzh": 2,
      "amrl": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "amrl": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/com/flashspeed/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Executes the command and returns the result"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param commandText The command as entered by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return the result of the command execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws CommandException If an error occurs during command execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws ParseException If an error occurs during parsing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns a Read-Only copy of the current Library"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of decks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 library file path"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the currently selected Deck"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current View of the Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    View getView();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets selected deck in the Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param deck target deck"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setSelectedDeck(Deck deck);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003dRead-Only Property components for UI\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the selected Deck Read-only Property"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current View Read-only Property"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cView\u003e currentViewProperty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the currently playing Card Read-only Property"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e playingCardProperty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current Card flipped status Read-Only Property"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e flippedProperty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the no of Cards attempted Read-Only Property"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the no of Cards remaining Read-Only Property"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 7,
      "ncslzh": 2,
      "lacedaemon98": 69,
      "amrl": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.logic.parser.MasterParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final MasterParser masterParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Initializes LogicManager with the given Model and Storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.masterParser \u003d new MasterParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Executes the command and returns the result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param commandText The command as entered by the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return the result of the command execution"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws CommandException If an error occurs during command execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws ParseException If an error occurs during parsing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        command \u003d masterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "            storage.saveLibrary(model.getLibrary());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns a Read-Only copy of the current Library"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return model.getLibrary();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of decks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 library file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return model.getLibraryFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the currently selected Deck"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.getCurrentDeck();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current View of the Model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public View getView() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.getView();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets selected deck in the Model"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param deck target deck"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        model.setSelectedDeck(deck);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003dRead-Only Property components for UI\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the selected Deck Read-only Property"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.selectedDeckProperty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current View Read-only Property"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.currentViewProperty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the currently playing Card Read-only Property"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.playingCardProperty();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current Card flipped status Read-Only Property"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.flippedProperty();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the no of Cards attempted Read-Only Property"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.cardAttemptedProperty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the no of Cards remaining Read-Only Property"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.cardRemainingProperty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 8,
      "kschiew": 14,
      "ncslzh": 3,
      "lacedaemon98": 103,
      "amrl": 8,
      "-": 48
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /** The play mode is stopped */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final boolean stop;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean stop, Statistics statistics) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.stop \u003d stop;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this(feedbackToUser, false, false, false, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean isStop() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return stop;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 stop \u003d\u003d otherCommandResult.stop;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, stop, statistics);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "ncslzh": 2,
      "lacedaemon98": 15,
      "-": 65
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FlashSpeed...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "lacedaemon98": 1,
      "amrl": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Shows full help instructions for every command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "lacedaemon98": 1,
      "amrl": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/ResetLibraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Clears the library."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class ResetLibraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Library has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot reset library in the play view\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.setLibrary(new Library());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        model.returnToLibrary();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 8,
      "kschiew": 6,
      "ncslzh": 1,
      "lacedaemon98": 3,
      "amrl": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/ReturnToLibraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Returns to the library view."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class ReturnToLibraryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Returns to library view.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned to library view.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_LIBRARY \u003d \"Already in library view!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot return to library in the play view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (model.getView().equals(View.LIBRARY)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_IN_LIBRARY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        model.returnToLibrary();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof ReturnToLibraryCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 3,
      "kschiew": 33,
      "lacedaemon98": 1,
      "amrl": 7
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/cardcommands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Adds a card to the deck."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \": Adds a card to the current deck.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"FRONT:BACK\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"ありがとう:thanks\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot add card in the play view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public AddCardCommand(Card card) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof AddCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 7,
      "kschiew": 9,
      "ncslzh": 9,
      "lacedaemon98": 2,
      "amrl": 10,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/cardcommands/DeleteCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Deletes a card from the current deck."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Deletes a card from the current deck.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot delete card in the play view\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeleteCardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getCurrentDeck().getSize()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card cardToDelete \u003d model.getCard(targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 6,
      "kschiew": 12,
      "ncslzh": 5,
      "lacedaemon98": 1,
      "amrl": 13,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/cardcommands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Edits a card in the current deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \": Edits a card in the current deck.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Either FRONT or BACK can be omitted.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) FRONT:BACK\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"or \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) :BACK\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"or \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) FRONT:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 1: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"ありがとう:thanks\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"ありがとう:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 3: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \":thanks\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Card edited: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot edit card in the play view\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final FrontFace front;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final BackFace back;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private Card editedCard;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public EditCardCommand(Index targetIndex, FrontFace front, BackFace back) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.front \u003d front;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.back \u003d back;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getCurrentDeck().getSize()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card oldCard \u003d model.getCard(targetIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (front.toString().isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            FrontFace newFront \u003d new FrontFace(oldCard.getFrontFace().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(newFront, back);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else if (back.toString().isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            BackFace newBack \u003d new BackFace(oldCard.getBackFace().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(front, newBack);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(front, back);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "        model.replaceCard(oldCard, editedCard);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "                || (other instanceof EditCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 4,
      "kschiew": 13,
      "ncslzh": 32,
      "lacedaemon98": 1,
      "amrl": 43
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/deckcommands/CreateDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Creates a deck in the library."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Creates a deck in the library.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"NAME\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Japanese 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the library.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot create deck in the play view\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Creates an CreateDeckCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CreateDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.createDeck(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof CreateDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CreateDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 9,
      "kschiew": 14,
      "ncslzh": 4,
      "lacedaemon98": 2,
      "amrl": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/deckcommands/RemoveDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Removes a deck from the library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RemoveDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Removes a deck from the library.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot remove deck in the play view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RemoveDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deckToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof RemoveDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 15,
      "kschiew": 9,
      "ncslzh": 6,
      "lacedaemon98": 2,
      "amrl": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/deckcommands/RenameDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Renames the name of a deck in the library."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RenameDeckCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Renames the name of a deck in the library.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Existing name will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"NAME \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Japanese 2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_RENAME_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"New deck name must be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck name already exists in the library.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot rename deck in the play view\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param index of the deck in the library list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param name new name to edit the deck with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RenameDeckCommand(Index index, Name name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireAllNonNull(index, name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    // need to remake this method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        boolean result \u003d model.renameDeck(index, name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (!result) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck editedDeck \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        model.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RENAME_DECK_SUCCESS, editedDeck));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof RenameDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 index.equals(((RenameDeckCommand) other).index)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 name.equals(((RenameDeckCommand) other).name));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 6,
      "kschiew": 12,
      "ncslzh": 57,
      "lacedaemon98": 2,
      "amrl": 6
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/deckcommands/SelectDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Selects a deck in the library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class SelectDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Selects a deck in the library.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deck selected: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot select deck in the play view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Index targetIdx;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public SelectDeckCommand(Index targetIdx) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(targetIdx);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.targetIdx \u003d targetIdx;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (targetIdx.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        model.selectDeck(targetIdx);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Deck selectedDeck \u003d model.getDeck(targetIdx);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedDeck));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof SelectDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 targetIdx.equals(((SelectDeckCommand) other).targetIdx));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 3,
      "kschiew": 44,
      "ncslzh": 7,
      "lacedaemon98": 3,
      "amrl": 8
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/gamecommands/AnswerNoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents the command that indicates that the user answered the question incorrectly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class AnswerNoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"no\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Answer no if you have the wrong answer.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oops, you got it wrong!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot answer card in non-play view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_FLIPPED \u003d \"Card has not flipped yet!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_END_GAME \u003d \"Session completed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates a AnswerNoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public AnswerNoCommand() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() !\u003d View.PLAY) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!model.getGame().isFlipped()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FLIPPED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card nextCard \u003d model.answerNo();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (nextCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_END_GAME), false, false, true, model.stop());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof AnswerNoCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 33,
      "kschiew": 12,
      "ncslzh": 1,
      "lacedaemon98": 2,
      "amrl": 5
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/gamecommands/AnswerYesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents the command that indicates that the user answered the question correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class AnswerYesCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Answer yes if you have the correct answer.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Nice, you got it right!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot answer card in non-play view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_FLIPPED \u003d \"Card has not flipped yet!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_END_GAME \u003d \"Session completed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public AnswerYesCommand() { }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() !\u003d View.PLAY) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!model.getGame().isFlipped()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FLIPPED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card nextCard \u003d model.answerYes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (nextCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_END_GAME), false, false, true, model.stop());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof AnswerYesCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 29,
      "kschiew": 10,
      "ncslzh": 3,
      "lacedaemon98": 2,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/gamecommands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents the command that informs the model manager to fiip the current flashcard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Flips the card to see the back face.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Did you get your answer right?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot flip card in non-play view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_ALREADY_FLIPPED \u003d \"Card already flipped!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private BackFace backFace;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates an FlipCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public FlipCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.backFace \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() !\u003d View.PLAY) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d model.flip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (backFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_FLIPPED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof FlipCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 34,
      "kschiew": 9,
      "ncslzh": 3,
      "lacedaemon98": 2,
      "amrl": 1
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/gamecommands/PlayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represent the command that informs the Model Manager to start a game session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class PlayCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"play\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Plays a review session with a deck.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Selected deck: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_DECK_NOT_FOUND \u003d \"Deck not found in the library!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_NO_CARD \u003d \"Oops, there are no cards in the selected deck.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_ALREADY_PLAY \u003d \"You should complete or end this session \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"before playing a new one.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private final Index targetIdx;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates a PlayCommand with a specific {@code Deck}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public PlayCommand(Index targetIdx) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(targetIdx);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.targetIdx \u003d targetIdx;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck deck \u003d model.getDeck(targetIdx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getGame() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_PLAY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d model.play(targetIdx);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DECK_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (card.getFrontFace() \u003d\u003d null \u0026\u0026 card.getBackFace() \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_CARD));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, deck));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof PlayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                \u0026\u0026 targetIdx.equals(((PlayCommand) other).targetIdx));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 41,
      "kschiew": 11,
      "ncslzh": 2,
      "lacedaemon98": 6,
      "amrl": 3
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/commands/gamecommands/StopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents the command that stops the current game session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Stop the current game session.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Session stopped!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"You have not started a new game session\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates an StopCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public StopCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (model.getView() !\u003d View.PLAY) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, true, model.stop());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || other instanceof StopCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 28,
      "kschiew": 10,
      "lacedaemon98": 3
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/MasterParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.ResetLibraryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.ReturnToLibraryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.AnswerNoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.AnswerYesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.FlipCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.PlayCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.StopCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.cardparsers.AddCardCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.cardparsers.DeleteCardCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.cardparsers.EditCardCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.deckparsers.CreateDeckCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.deckparsers.RemoveDeckCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.deckparsers.RenameDeckCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.deckparsers.SelectDeckCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.gameparsers.PlayCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input for FlashSpeed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class MasterParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // to handle get of commandWord and args"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        /* List of commands:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - CreateDeck"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - RemoveDeck"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - RenameDeck"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - SelectDeck"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - AddCard"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - DeleteCard"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - EditCard"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Game:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Play"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Flip"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - AnswerYes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - AnswerNO"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Stop"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        General:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - Help"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - Exit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - ReturnToLibrary"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // Deck functions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case CreateDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new CreateDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case RemoveDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RemoveDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case RenameDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RenameDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case SelectDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new SelectDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // Card functions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new AddCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new DeleteCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new EditCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        // Game functions"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        case PlayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new PlayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        case AnswerYesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new AnswerYesCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        case AnswerNoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new AnswerNoCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new StopCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // General"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case ResetLibraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new ResetLibraryCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        case ReturnToLibraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new ReturnToLibraryCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 21,
      "kschiew": 30,
      "ncslzh": 91,
      "amrl": 1
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String strippedName \u003d name.strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!Name.isValidName(strippedName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new Name(strippedName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/cardparsers/AddCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INPUT_CONTAINS_COLON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern FRONT:BACK, spaces before and after \":\" are handled."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \"(?\u003cfront\u003e.*)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"(\\\\s*[\\u003a\\u02d0\\u02d1\\u02f8\\u05c3\\u2236\\u2360\\ua789\\ufe13\\uff1a\\ufe55]\\\\s*)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"(?\u003cback\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCardCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns an AddCardCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public AddCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String frontValue \u003d matcher.group(\"front\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String backValue \u003d matcher.group(\"back\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (frontValue.isBlank() || backValue.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.contains(\":\") || backValue.contains(\":\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INPUT_CONTAINS_COLON, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "        FrontFace front \u003d new FrontFace(frontValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        BackFace back \u003d new BackFace(backValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card card \u003d new Card(front, back);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new AddCardCommand(card);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 9,
      "ncslzh": 14,
      "amrl": 36
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/cardparsers/DeleteCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new DeleteCardCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns a DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 17,
      "amrl": 13
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/cardparsers/EditCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INPUT_CONTAINS_COLON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new EditCardCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern INDEX FRONT:BACK, spaces before and after \":\" is handled."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Also, can choose whether to allow no space between INDEX and FRONT:BACK."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Allows for fast edit (INDEX :BACK) or (INDEX FRONT:)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e\\\\d+)(\\\\s+)(?\u003cfront\u003e.*)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"(\\\\s*[\\u003a\\u02d0\\u02d1\\u02f8\\u05c3\\u2236\\u2360\\ua789\\ufe13\\uff1a\\ufe55]\\\\s*)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"(?\u003cback\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns a DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public EditCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String indexStr \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String frontValue \u003d matcher.group(\"front\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String backValue \u003d matcher.group(\"back\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.isBlank() \u0026\u0026 backValue.isBlank()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.contains(\":\") || backValue.contains(\":\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INPUT_CONTAINS_COLON, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(frontValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(backValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new EditCardCommand(index, front, back);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "ncslzh": 38,
      "amrl": 16
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/deckparsers/CreateDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new CreateDeckCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommandParser implements Parser\u003cCreateDeckCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateDeckCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an CreateDeckCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CreateDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String strippedArgs \u003d args.strip();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (strippedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(strippedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new CreateDeckCommand(deck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 24,
      "ncslzh": 6,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/deckparsers/RemoveDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new RemoveDeckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RemoveDeckCommandParser implements Parser\u003cRemoveDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an RemoveDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RemoveDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RemoveDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 18,
      "ncslzh": 12
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/deckparsers/RenameDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new RenameDeckCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RenameDeckCommandParser implements Parser\u003cRenameDeckCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern INDEX NAME, spaces between INDEX and NAME is handled."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e\\\\d+)(\\\\s+)(?\u003cname\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenameDeckCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an RenameDeckCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RenameDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String indexStr \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String newName \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (newName.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Name name \u003d new Name(newName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RenameDeckCommand(index, name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "ncslzh": 46,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/deckparsers/SelectDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an SelectDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public SelectDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new SelectDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 21,
      "ncslzh": 9
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/flashspeed/logic/parser/gameparsers/PlayCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.gameparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.PlayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Parses input arguments and creates a new PlayCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class PlayCommandParser implements Parser\u003cPlayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PlayCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * and returns an PlayCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public PlayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new PlayCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 22,
      "kschiew": 7,
      "ncslzh": 1
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/Game.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * The API of Game Component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public interface Game {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the value of whether a card has been flipped."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return true if a card has been flipped, false otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean isFlipped();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    BackFace flip();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns a random next card after user answers Yes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes the correct card from the deck."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Card answerYes();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a duplicate wrong card to the deck."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Card answerNo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the statistics report when user stops the sessions."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Statistics stop();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the current index of the card."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    int getCurrCardIdx();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the number of cards have been attempted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    int getCardAttempted();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns number of the remaining cards inside the deck."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    int getDeckSize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the card list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cCard\u003e getCards();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 63
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/GameManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Represents the model of the game session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class GameManager implements Game {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private Random randGen;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private boolean flipped;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private ObservableList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private int deckSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private int currCardIdx;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int cardAttempted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Initializes a GameManager with the given deck."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public GameManager(Deck deck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        randGen \u003d new Random();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.flipped \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.cards \u003d deck.asObservableList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.statistics \u003d new Statistics(cards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.deckSize \u003d this.cards.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.cardAttempted \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the value of whether a card has been flipped."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return true if a card has been flipped, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean isFlipped() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.flipped;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public BackFace flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (flipped) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx).getBackFace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns a random next card after user answers Yes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Removes the correct card from the deck."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerYes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        statistics.incrementCorrectAttempt(cards.get(currCardIdx));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        cards.remove(currCardIdx);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.deckSize -\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (this.deckSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Adds a duplicate wrong card to the deck."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerNo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        boolean hasTwoCards \u003d statistics.incrementWrongAttempt(cards.get(currCardIdx));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!hasTwoCards) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card currCard \u003d cards.get(currCardIdx);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cards.add(currCard);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            this.deckSize +\u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the statistics report when user stops the sessions."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Statistics stop() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.statistics;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the current index of the card."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getCurrCardIdx() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.currCardIdx;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the number of cards have been attempted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public int getCardAttempted() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardAttempted;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns number of the remaining cards inside the deck."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public int getDeckSize() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return deckSize;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the card list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 79,
      "kschiew": 6,
      "ncslzh": 28,
      "lacedaemon98": 12,
      "amrl": 11
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/Library.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Wraps all data at the library level."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Duplicates are not allowed (by .isSameDeck comparison)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Library implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates an Library using the Decks in {@code toBeCopied}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library(ReadOnlyLibrary toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the contents of the deck list with {@code decks}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Resets the existing data of this {@code Library} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void resetData(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the Library."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        int idxInInt \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.get(idxInInt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a deck to the library."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must not already exist in the library."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void addDeck(Deck p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void createDeck(Deck p) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        decks.add(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the library."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes {@code key} from this {@code Library}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code key} must exist in the library ."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void deleteDeck(Deck key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // TODO: refine"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return decks.asUnmodifiableObservableList().size() + \" decks\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() { // remove the code at the end"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof Library // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 decks.equals(((Library) other).decks));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return decks.getSize();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 22,
      "kschiew": 27,
      "ncslzh": 1,
      "amrl": 15,
      "-": 70
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Sets the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void setLibraryFilePath(Path libraryFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces library data with the data in {@code library}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void setLibrary(ReadOnlyLibrary library);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the library"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the library."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must exist in the library."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code deck} must not already exist in the library."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void createDeck(Deck deck);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Selects a deck."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void selectDeck(Index targetIdx);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the current deck;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the deck at index of library;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Deck getDeck(Index index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Renames the deck at index in library."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if there is no deck with the same name, false otherwise"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean renameDeck(Index targetIndex, Name name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Brings the user from deck view to library view."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void returnToLibrary();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Checks if a card with the same identity as {@code card} exists in the deck."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if {@code card} exists in the deck"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds the given card to the deck."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the given old card with the new card."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void replaceCard(Card target, Card card);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the current view of the model."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The current view of the model."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amrl"
        },
        "content": "    View getView();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the library."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deck list. */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered card list. */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the card with the given index."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Card getCard(Index index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Starts a game session with a given deck index."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param index index of the deck to play with."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return a randomly selected card from the deck"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Card play(Index index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    BackFace flip();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the next card after user answers Yes."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Card answerYes();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Card answerNo();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the game manager object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    GameManager getGame();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Stops the game session."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return the statistics report."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Statistics stop();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SimpleObjectProperty \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return selected Deck Read-only Property"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the current View Read-only Property"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cView\u003e currentViewProperty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the Card that is been playing Read-only Property"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e playingCardProperty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the Flipped status Read-only Property"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e flippedProperty();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the no of Cards attempted Read-only Property"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the no of Cards remaining Read-only Property"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *      * Sets the selected deck Read-only Property"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setSelectedDeck(Deck deck);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the value of currentView in Read-only Property"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Toggle currentView between LIBRARY and PLAY only to switch between CardListPanel and PlayPanel"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCurrentView(View view);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the playing card Read-only property"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setPlayingCard(Card card);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the value of flipped Read-only Property"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setFlipped(Boolean value);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the number of cards attempted Read-only Property"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCardAttempted(int value);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the number of remaining cards Read-only Property"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCardRemaining(int value);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 76,
      "kschiew": 24,
      "lacedaemon98": 86,
      "amrl": 36,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents the in-memory model of the library data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Library library;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private View view;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Optional\u003cIndex\u003e deckIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //Implement objects as SimpleObjectProperty to work with UI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cDeck\u003e selectedDeck \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cView\u003e currentView \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cCard\u003e playingCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cBoolean\u003e flipped \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e cardAttempted \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e cardRemaining \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private GameManager game;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes a ModelManager with the given library and userPrefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ModelManager(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireAllNonNull(library, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.fine(\"Initializing with library: \" + library + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.library \u003d new Library(library);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.deckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.view \u003d View.LIBRARY; // 1st view will always be in library"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCurrentView(View.LIBRARY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates a model manager."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this(new Library(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the current view of the model."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The current view of the model."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public View getView() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the index of the selected deck."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Optional\u003cIndex\u003e getDeckIndex() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.deckIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return userPrefs.getLibraryFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "        userPrefs.setLibraryFilePath(libraryFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Replaces library data with the data in {@code library}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void setLibrary(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.library.resetData(library);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the library"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the library."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return library.hasDeck(deck);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * The deck must exist in the library."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.deleteDeck(target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (selectedDeck !\u003d null \u0026\u0026 selectedDeck.getValue() !\u003d target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            Deck deck \u003d selectedDeck.getValue();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            returnToLibrary();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            setSelectedDeck(deck);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amrl"
        },
        "content": "            returnToLibrary();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code deck} must not already exist in the library."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.createDeck(deck);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Index currIndex \u003d Index.fromZeroBased(library.getDeckList().indexOf(deck));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        selectDeck(currIndex);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //setSelectedDeck(deck);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Selects a deck."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deckIndex \u003d Optional.of(targetIdx);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.view \u003d View.DECK;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amrl"
        },
        "content": "        setSelectedDeck(library.getDeck(targetIdx));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /** Renames the deck at index in library."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return true if there is no deck with the same name, false otherwise"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deck \u003d library.getDeck(targetIndex);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck temp \u003d new Deck(name);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (library.hasDeck(temp)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            deck.setName(name);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            returnToLibrary();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            selectDeck(targetIndex);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //setSelectedDeck(deck);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the current deck;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deckIndex.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the deck at index of library;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return library.getDeck(targetIdx);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Brings the user from deck view to library view."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void returnToLibrary() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.setValue(null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.view \u003d View.LIBRARY;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Checks if a card with the same identity as {@code card} exists in the deck."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @return true if {@code card} exists in the deck"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return deck.contains(card);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the card with the given index."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library.getDeck(deckIndex.get()).getCard(index);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void deleteCard(Card cardToDelete) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deck.remove(cardToDelete);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Adds the given card to the deck."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        deck.add(card);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Replaces the given old card with the new card."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deck.replace(target, card);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the library."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "amrl"
        },
        "content": "        library.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return filteredDecks.get(deckIndex.get().getZeroBased()).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Starts a game session with a given deck index."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @param index index of the deck to play with."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return a randomly selected card from the deck"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card play(Index index) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deck \u003d library.getDeck(index);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deck.asUnmodifiableObservableList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new Card(null, null);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d new GameManager(deck);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.view \u003d View.PLAY;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCurrentView(View.PLAY);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d deck.asUnmodifiableObservableList().get(game.getCurrCardIdx());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(0);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public BackFace flip() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(true);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.game.flip();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers Yes."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerYes() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d this.game.answerYes();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //Statistics statistics \u003d stop();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(game.getCardAttempted());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerNo() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d this.game.answerNo();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //Statistics statistics \u003d stop();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(game.getCardAttempted());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the game manager object."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public GameManager getGame() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return this.game;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Stops the game session."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the statistics report."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Statistics stop() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Statistics statistics \u003d this.game.stop();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d null;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(null);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.view \u003d View.LIBRARY;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCurrentView(View.LIBRARY);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library.equals(other.library)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 filteredDecks.equals(other.filteredDecks);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SimpleObjectProperty \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return selected Deck SimpleObjectProperty"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return selectedDeck;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the current View SimpleObjectProperty"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return currentView;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the Card that is been playing SimpleObjectProperty"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return playingCard;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the Flipped status SimpleObjectProperty"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return flipped;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the no of Cards attempted SimpleObjectProperty"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardAttempted;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Return the no of Cards remaining SimpleObjectProperty"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardRemaining;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *      * Sets the selected deck Read-only Property"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (deck !\u003d null) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            selectedDeck.setValue(deck);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            Index currIndex \u003d Index.fromZeroBased(library.getDeckList().indexOf(deck));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            deckIndex \u003d Optional.of(currIndex);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            this.view \u003d View.DECK;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the value of currentView in Read-only Property"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Toggle currentView between LIBRARY and PLAY only to switch between CardListPanel and PlayPanel"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        currentView.setValue(view);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the playing card Read-only property"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        playingCard.setValue(card);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the value of flipped Read-only Property"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        flipped.setValue(value);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the number of cards attempted Read-only Property"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted.setValue(value);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Sets the number of remaining cards Read-only Property"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardRemaining.setValue(value);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 139,
      "kschiew": 64,
      "ncslzh": 13,
      "lacedaemon98": 259,
      "amrl": 36,
      "-": 76
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/ReadOnlyLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Unmodifiable view of a library."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public interface ReadOnlyLibrary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 1,
      "kschiew": 5,
      "amrl": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "amrl": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Represents statistics report for one game session."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String NEW_GAME_ERR_MSG \u003d \"The game has not started yet!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // number of correct answers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private int correctAns;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // number of wrong answer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private int wrongAns;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    //Total number of questions played"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private int totalQns;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // hash map to keep track the number of attempts to get the correct answer for each card"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Map\u003cCard, Integer\u003e totalAttempts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Map\u003cCard, Integer\u003e correctAttempts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Map\u003cCard, Integer\u003e wrongAttempts;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Map\u003cCard, Integer\u003e cardTracker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    Statistics(int correctAns, int wrongAns, int totalQns, Map\u003cCard, Integer\u003e totalAttempts,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "               Map\u003cCard, Integer\u003e correctAttempts,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "               Map\u003cCard, Integer\u003e wrongAttempts, ObservableList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.correctAns \u003d correctAns;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.wrongAns \u003d wrongAns;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalQns \u003d totalQns;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalAttempts \u003d totalAttempts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.correctAttempts \u003d correctAttempts;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.wrongAttempts \u003d wrongAttempts;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cardTracker \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                for (Card card: cards) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                    put(card, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Statistics(ObservableList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.correctAns \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.wrongAns \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalQns \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.correctAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.wrongAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.cardTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        // initialize the number of attempt for each card as 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            totalAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            correctAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            wrongAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardTracker.put(cards.get(i), 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the number of correct answers so far."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getCorrectAns() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(correctAns \u003e\u003d 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.correctAns;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the number of incorrect answers so far."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getWrongAns() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(wrongAns \u003e\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.wrongAns;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the total number of cards played so far."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public int getTotalQns() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(totalQns \u003e\u003d 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this.totalQns;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Calculates the current score of the game."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return the current score of the game thus far."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public long getScore() throws ArithmeticException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (totalQns \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            throw new ArithmeticException(NEW_GAME_ERR_MSG);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Math.round(Double.valueOf(correctAns) / Double.valueOf(totalQns) * 100);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of attempts of a certain card."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private void incrementAttempt(Card card) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++totalQns;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        totalAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(totalAttempts.get(card) \u003e 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(totalQns \u003e 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of correct attempts of a certain card."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void incrementCorrectAttempt(Card card) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++correctAns;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        correctAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        cardTracker.merge(card, -1, Integer::sum);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        incrementAttempt(card);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of correct attempts of a certain card."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @return whether there are 2 cards in the current game"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean incrementWrongAttempt(Card card) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++wrongAns;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assert(wrongAns \u003e 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        wrongAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        incrementAttempt(card);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        int numCardsInDeck \u003d cardTracker.containsKey(card) ? cardTracker.get(card) : 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (numCardsInDeck \u003e 2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            // should never happen, but reset to 2 so no cards can be added."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            numCardsInDeck \u003d 2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            cardTracker.replace(card, 2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (numCardsInDeck \u003c 2) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardTracker.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        int wrongCounter \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String output \u003d \"Cards Attempted: \" + this.totalQns + \"\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + \"Correct Attempts: \" + this.correctAns + \"\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + \"Wrong Attempts: \" + this.wrongAns + \"\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + \"Score: \" + String.format(\"%2d\", getScore()) + \"% \\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        for (Map.Entry\u003cCard, Integer\u003e entry: wrongAttempts.entrySet()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (entry.getValue() \u003e 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                wrongCounter++;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (this.totalQns \u003d\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"You did not attempt any card!\" + \"\\n\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        } else if (wrongCounter \u003e 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"Here is a list of cards you guessed incorrectly:\" + \"\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            for (Map.Entry\u003cCard, Integer\u003e entry: wrongAttempts.entrySet()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                if (entry.getValue() \u003e 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                    output +\u003d String.format(\"%s : %s (%d %s)\\n\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                            entry.getKey().getFrontFace().getValue(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                            entry.getKey().getBackFace().getValue(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            entry.getValue(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            entry.getValue() \u003d\u003d 1 ? \"time\" : \"times\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"Congratulations! You got them all correct!\" + \"\\n\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 46,
      "kschiew": 101,
      "ncslzh": 18,
      "lacedaemon98": 15,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Path libraryFilePath \u003d Paths.get(\"data\" , \"library.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        setLibraryFilePath(newUserPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.libraryFilePath \u003d libraryFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 libraryFilePath.equals(o.libraryFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return Objects.hash(guiSettings, libraryFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + libraryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "amrl": 11,
      "-": 73
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.UniqueCardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents a Deck in the library."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private UniqueCardList cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck(Name name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return cards.getSize();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return cards.contains(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return cards.getCard(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds a card to the deck."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        cards.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        cards.remove(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setName(Name newName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the equivalent card from the list with the new card."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The old card must exist in the list and the new card must not already exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replace(Card toRemove, Card toAdd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        cards.replace(toRemove, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both decks have the same name."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This defines a weaker notion of equality between two decks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 otherDeck.getName().equalsLowerCase(getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.asObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both decks have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This defines a stronger notion of equality between two decks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (!(other instanceof Deck)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck otherDeck \u003d (Deck) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return otherDeck.getName().equalsLowerCase(getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // use method for custom field hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 34,
      "kschiew": 20,
      "ncslzh": 4,
      "amrl": 27,
      "-": 49
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents a Deck\u0027s name in FlashSpeed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \"Names should contain at least one (non-whitespace) character, i.e. should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        name \u003d name.strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return !test.strip().isEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Checks if the lower case form of the name is equal to another object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @param other the object being compared with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return True if the lowercase form of the name is equal to (@code other)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equalsLowerCase(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 name.toLowerCase().equals(((Name) other).name.toLowerCase())); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "ncslzh": 6,
      "lacedaemon98": 1,
      "amrl": 8,
      "-": 40
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " * unique in terms of identity in the UniqueDeckList. However, the removal of a deck uses Deck#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": " * as to ensure that the deck with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * @see Deck#isSameDeck(Deck)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns deck with the given index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Deck get(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d internalList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a deck to the library."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must not already exist in the library."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes the equivalent deck from the library."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must exist in the library."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Replaces the contents of the library with {@code decks}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CollectionUtil.requireAllNonNull(decks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 29,
      "kschiew": 24,
      "amrl": 22,
      "-": 78
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/card/BackFace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents the back face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class BackFace extends Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public BackFace(String value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(value.strip());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "ncslzh": 8,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents a Card in the deck."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final FrontFace frontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final BackFace backFace;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Card(FrontFace frontFace, BackFace backFace) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public FrontFace getFrontFace() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return this.frontFace;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public BackFace getBackFace() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return this.backFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns true if both cards have the same front and back faces."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return otherCard.getFrontFace().equals(getFrontFace())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 otherCard.getBackFace().equals(getBackFace());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return Objects.hash(frontFace, backFace);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return getFrontFace()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + \" : \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + getBackFace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 25,
      "ncslzh": 32,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/card/Face.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents a face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public abstract class Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Face(String value) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both faces have the same value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof Face)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Face otherFace \u003d (Face) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return otherFace.getValue().equals(getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "ncslzh": 11,
      "lacedaemon98": 5,
      "amrl": 17
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/card/FrontFace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents the front face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class FrontFace extends Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public FrontFace(String value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(value.strip());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "ncslzh": 9,
      "amrl": 1
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/card/UniqueCardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * A card is considered unique by comparing using {@code Card#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " * cards uses Card#equals(Object) for equality so as to ensure that the card being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * unique in terms of content in the UniqueCardList. The removal of a card also uses Card#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * @see Card#equals(Object)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void add(Card toAdd) throws DuplicateCardException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void remove(Card toRemove) throws DuplicateCardException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the card {@code toRemove} in the list with {@code toAdd}. {@code toRemove} must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card identity of {@code toAdd} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replace(Card toRemove, Card toAdd) throws CardNotFoundException, DuplicateCardException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireAllNonNull(toRemove, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "        int idx \u003d internalList.indexOf(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (idx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!toRemove.equals(toAdd) \u0026\u0026 contains(toAdd)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "        internalList.set(idx, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return FXCollections.observableArrayList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "                if (cards.get(i).equals(cards.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 16,
      "ncslzh": 84,
      "amrl": 35
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/exceptions/CardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class CardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 5
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 5
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/exceptions/DuplicateCardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 10
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 10
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Contains utility methods for populating {@code Library} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck sampleDeck \u003d new Deck(new Name(\"Sample Deck 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        sampleDeck.add(new Card(new FrontFace(\"front\"), new BackFace(\"back\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Deck[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            sampleDeck"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static ReadOnlyLibrary getSampleLibrary() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Library sampleLib \u003d new Library();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (Deck sampleDeck : getSampleDecks()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sampleLib.addDeck(sampleDeck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return sampleLib;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "amrl": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/flashspeed/model/util/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Defines the different views a user can be in at any point in time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public enum View {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "    LIBRARY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    DECK,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    PLAY"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 2,
      "amrl": 7
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/JsonAdaptedCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class JsonAdaptedCard {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card name is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String frontFace;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String backFace;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given deck details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"frontFace\") String frontFace, @JsonProperty(\"backFace\") String backFace) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedCard(Card card) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d card.getFrontFace().getValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d card.getBackFace().getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Getters for front face value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String getFrontFace() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return frontFace;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Getters for Back face value."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String getBackFace() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return backFace;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this Jackson-friendly adapted deck object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (frontFace \u003d\u003d null || backFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final FrontFace front \u003d new FrontFace(frontFace);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final BackFace back \u003d new BackFace(backFace);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Card(front, back);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 63,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/JsonAdaptedDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "class JsonAdaptedDeck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            \"Names should contain at least one (non-whitespace) character, i.e. should not be blank\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeck} with the given deck details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"name\") String name, @JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cards.addAll(cards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cards \u003d source.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .map(card -\u003e new JsonAdaptedCard(card))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedDeck(Name name, List\u003cCard\u003e cards) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d name.name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (cards \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cards \u003d cards.stream().map(card -\u003e new JsonAdaptedCard(card))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Changes the name of the JSON deck."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @param name The new name of the deck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The deck with the new name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedDeck setName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this Jackson-friendly adapted deck object into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck modelDeck \u003d new Deck(new Name(name));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (JsonAdaptedCard card : cards) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            FrontFace newFrontFace \u003d new FrontFace(card.getFrontFace());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            BackFace newBackFace \u003d new BackFace(card.getBackFace());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelDeck.add(new Card(newFrontFace, newBackFace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return modelDeck;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 50,
      "ncslzh": 1,
      "amrl": 7,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/JsonLibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A class to access Library data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class JsonLibraryStorage implements LibraryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLibraryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public JsonLibraryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return readLibrary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Similar to {@link #readLibrary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Optional\u003cJsonSerializableLibrary\u003e jsonLibrary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                filePath, JsonSerializableLibrary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!jsonLibrary.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Optional.of(jsonLibrary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Similar to {@link #saveLibrary(ReadOnlyLibrary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLibrary(library), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "amrl": 18,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/JsonSerializableLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * An Immutable Library that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "@JsonRootName(value \u003d \"decks\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class JsonSerializableLibrary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonSerializableLibrary} with the given decks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonSerializableLibrary(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code ReadOnlyLibrary} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLibrary}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonSerializableLibrary(ReadOnlyLibrary source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.addAll(source.getDeckList().stream().map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this library into the model\u0027s {@code Library} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (library.hasDeck(deck)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "            library.addDeck(deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 15,
      "amrl": 11,
      "-": 33
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/LibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents a storage for {@link Library}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "public interface LibraryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns Library data as a {@link ReadOnlyLibrary}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @see #getLibraryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Saves the given {@link ReadOnlyLibrary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param library cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @see #saveLibrary(ReadOnlyLibrary)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "amrl": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "public interface Storage extends LibraryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Manages storage of library data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private LibraryStorage libraryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public StorageManager(LibraryStorage libraryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.libraryStorage \u003d libraryStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryStorage.getLibraryFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return readLibrary(libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryStorage.readLibrary(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        saveLibrary(library, libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        libraryStorage.saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "amrl": 15,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/flashspeed/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/CardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * The Card List Panel of the App."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label defaultText;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private TableView\u003cCard\u003e itemTbl;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public CardListPanel(ObservableValue\u003cDeck\u003e selectedDeck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        TableColumn\u003cCard, Number\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"ID\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "        indexColumn.setCellValueFactory(column-\u003e new ReadOnlyObjectWrapper\u003cNumber\u003e("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "                itemTbl.getItems().indexOf(column.getValue()) + 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        TableColumn\u003cCard, FrontFace\u003e frontColumn \u003d new TableColumn\u003c\u003e(\"Front\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"frontFace\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        TableColumn\u003cCard, BackFace\u003e backColumn \u003d new TableColumn\u003c\u003e(\"Back\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"backFace\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // unchecked generics array creation for varargs parameter here"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        itemTbl.getColumns().addAll(indexColumn, frontColumn, backColumn);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setSortable(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setSortable(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.setResizable(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setResizable(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setResizable(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // Load deck page when selected deck changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "                itemTbl.getItems().clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                defaultText.setText(\"No deck selected\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                showCardList(newValue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Shows Cards of current Deck on right panel."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param deck current deck"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void showCardList(Deck deck) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        itemTbl.getItems().clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        ObservableList\u003cCard\u003e cardList \u003d deck.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (cardList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            defaultText.setText(\"Selected deck is empty\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (Card card : cardList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            itemTbl.getItems().add(card);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 69,
      "amrl": 23
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Platform.runLater(()-\u003ecommandTextField.requestFocus());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "lacedaemon98": 2,
      "amrl": 3,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": " * An UI component that displays information of a {@code Deck}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Label cardNo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        name.setText(deck.getName().name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardNo.setText(String.valueOf(deck.asUnmodifiableObservableList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "ncslzh": 1,
      "lacedaemon98": 3,
      "amrl": 8,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/DeckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Panel containing the list of decks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList, ObservableValue\u003cDeck\u003e selectedDeck,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "                         Consumer\u003cDeck\u003e onSelectedDeckChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // deckListView.getSelectionModel().clearAndSelect(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.fine(\"Selection in deck list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "            onSelectedDeckChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.fine(\"Selected deck changed to: \" + newValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected deck,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // if (Objects.equals(deckListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "            //     return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "                int index \u003d deckListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.scrollTo(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deck} using a {@code DeckCard}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 72
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //String userGuideUrl \u003d \"https://ay1920s2-cs2103t-w17-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "ncslzh": 6,
      "lacedaemon98": 3,
      "amrl": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private PlayPanel playPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private StatisticsPopUp statisticsPopUp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private StackPane rightPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Set window size to be optimal based on screen size"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setX(primaryScreenBounds.getMinX());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setY(primaryScreenBounds.getMinY());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMinWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMinHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMaxWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMaxHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        statisticsPopUp \u003d new StatisticsPopUp(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //toggle between Play view and other views depending on the current View."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (logic.getView() !\u003d View.PLAY) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            cardListPanel \u003d new CardListPanel(logic.selectedDeckProperty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            rightPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else if (logic.getView() \u003d\u003d View.PLAY) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "            playPanel \u003d new PlayPanel("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    logic.playingCardProperty(), logic.flippedProperty(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    logic.cardAttemptedProperty(), logic.cardRemainingProperty());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            rightPlaceholder.getChildren().add(playPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListPanel \u003d new DeckListPanel("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "                logic.getFilteredDeckList(), logic.selectedDeckProperty(), logic::setSelectedDeck);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrl"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getLibraryFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Stops the current play session and shows the statistics window."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param statistics statistics info of session to be shown"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void handleStop(Statistics statistics) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (!statisticsPopUp.isShowing()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp \u003d new StatisticsPopUp(statistics);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp \u003d new StatisticsPopUp(statistics);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        statisticsPopUp.hide();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckListPanel getDeckListPanel() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (commandResult.isStop()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                handleStop(commandResult.getStatistics());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "lacedaemon98": 50,
      "amrl": 23,
      "-": 179
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/PlayPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class PlayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"PlayPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int attempted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int remaining;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label front;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label back;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label noAttempted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label noRemaining;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label progressPercent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private VBox progressRoot;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label instruction;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public PlayPanel(ObservableValue\u003cCard\u003e playingCard, ObservableValue\u003cBoolean\u003e flipped,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "                     ObservableValue\u003cInteger\u003e cardAttempted, ObservableValue\u003cInteger\u003e cardRemaining) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //initialize view"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        back.setVisible(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressBar.setProgress(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressPercent.setText(\"0.0%\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressBar.prefWidthProperty().bind(progressRoot.widthProperty().subtract(40));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Load playing card"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        playingCard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                showPlayingCard(newValue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Show back face when flipped"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        flipped.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                back.setVisible(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                instruction.setText(\"Did you get your answer right? Answer \u0027yes\u0027 or \u0027no\u0027\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "                back.setVisible(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                instruction.setText(\"Type \u0027flip\u0027 to reveal back face\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Display new value and recalculate progress bar when number of Cards attempted changes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                attempted \u003d newValue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                setProgress();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                noAttempted.setText(String.valueOf(newValue));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Display new value and recalculate progress bar when number of Cards remaining changes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardRemaining.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                remaining \u003d newValue;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                setProgress();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                noRemaining.setText(String.valueOf(newValue));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Shows current playing card on right panel."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param card card to be shown"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void showPlayingCard(Card card) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        front.setText(card.getFrontFace().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        front.setWrapText(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        back.setText(card.getBackFace().toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        back.setWrapText(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        instruction.setText(\"Type \u0027flip\u0027 to reveal back face\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Changes value of progress bar based on noOfCards attempted and remaining"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void setProgress() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        double currentProgress \u003d Double.valueOf(attempted) / (attempted + remaining);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        double prog \u003d currentProgress * 100;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressPercent.setText(String.format(\"%.1f\", prog) + \"%\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressBar.setProgress(currentProgress);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 96,
      "amrl": 24
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A UI for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/StatisticsPopUp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * Controller for a statistics page"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class StatisticsPopUp extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsPopUp.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPopUp.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Label stats;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public StatisticsPopUp(Stage root, Statistics statistics) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (statistics !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            stats.setText(statistics.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public StatisticsPopUp(Statistics statistics) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this(new Stage(), statistics);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        logger.fine(\"Showing statistics of the previous play session\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns true if the statistics window is currently being shown."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Focuses on the statistics window."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "lacedaemon98": 82,
      "amrl": 5
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\"Data saved to .\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/flashspeed_logo.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private ObservableValue\u003cView\u003e view;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.view \u003d logic.currentViewProperty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "            mainWindow.show(); // this should be called before creating other UI parts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //listens for any changes in the current View to toggle between Play view and other views"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            this.view.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 1,
      "lacedaemon98": 8,
      "amrl": 6,
      "-": 77
    }
  },
  {
    "path": "src/main/java/com/flashspeed/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.collections.FXCollections?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cStackPane  xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003cAnchorPane  /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003cTableView fx:id\u003d\"itemTbl\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cplaceholder\u003e\u003cLabel fx:id\u003d\"defaultText\" text\u003d\"No deck selected\" style\u003d\"-fx-text-fill:white\" /\u003e\u003c/placeholder\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003c/TableView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 18
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cGridPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"10\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"90\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cVBox GridPane.columnIndex\u003d\"0\" style\u003d\"-fx-background-color: #4473c5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Enter command:\" style\u003d\"-fx-text-fill:white\"\u003e\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cTextField GridPane.columnIndex\u003d\"1\" fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\"   promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 20,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel fx:id\u003d\"\" text\u003d\"Number of cards: \"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel fx:id\u003d\"cardNo\"  /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "         title\u003d\"FlashSpeed\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    \u003cImage url\u003d\"@/images/flashspeed_logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\" \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\" \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"  /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "          \u003cVBox fx:id\u003d\"deckList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" maxWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "          \u003cStackPane fx:id\u003d\"rightPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border-2\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 1,
      "lacedaemon98": 18,
      "amrl": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/resources/view/PlayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.collections.FXCollections?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cStackPane style\u003d\"-fx-background-color: #ffffff\"  xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cGridPane \u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\" percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                \u003cColumnConstraints percentWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\" style\u003d\"-fx-background-color: #f4b184; -fx-border-width: 1 1 0 1;-fx-border-color: black; -fx-padding: 0 0 0 0 ;\" \u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "           \u003cVBox fx:id\u003d\"progressRoot\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cProgressBar style\u003d\"-fx-padding: 20 0 0 0 ;\" fx:id\u003d\"progressBar\" minWidth\u003d\"800\" \u003e\u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003cHBox alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                \u003cRegion prefWidth\u003d\"20\"\u003e\u003c/Region\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  text\u003d\"Cards attempted: \" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  fx:id\u003d\"noAttempted\" text\u003d\"0\" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/HBox\u003e\u003cHBox alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel fx:id\u003d\"stats2\" text\u003d\"Cards remaining: \" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  fx:id\u003d\"noRemaining\" text\u003d\"0\" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRegion prefWidth\u003d\"20\"\u003e\u003c/Region\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"progressPercent\"  style\u003d\"-fx-text-fill: black; -fx-font-size: 15; -fx-padding: 20 0 0 0 ;\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"1\" style\u003d\"-fx-background-color: #f4b184; -fx-border-width: 0 1 1 1;-fx-border-color: black; \"  \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"instruction\" style\u003d\"-fx-text-fill: black; -fx-font-size: 18;\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane  GridPane.rowIndex\u003d\"2\" style\u003d\"-fx-background-color: #4473c5; -fx-border-width: 0 1 1 1;-fx-border-color: black; \"  \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"front\" style\u003d\"-fx-text-fill: white; -fx-font-size: 50;\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"3\" style\u003d\"-fx-background-color: #ff5722; -fx-border-width: 0 1 1 1; -fx-border-color: black\"  \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"back\" style\u003d\"-fx-text-fill: white; -fx-font-size: 50;\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 72
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPopUp.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    \u003cImage url\u003d\"@/images/flashspeed_logo.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"800\" maxHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel fx:id\u003d\"stats\" text\u003d\"Label\" style\u003d\"-fx-font-size: 20;\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "lacedaemon98": 33
    }
  },
  {
    "path": "src/test/java/com/flashspeed/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/flashspeed_logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "amrl": 1,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/flashspeed/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 1,
      "-": 141
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                new JsonLibraryStorage(temporaryFolder.resolve(\"library.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        String deleteCommand \u003d \"remove 9\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //     String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //     assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        JsonLibraryStorage libraryStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                new JsonLibraryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionLibrary.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        StorageManager storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        String addCommand \u003d CreateDeckCommand.COMMAND_WORD + \" Japanese\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder().withName(\"Japanese\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        expectedModel.createDeck(expectedDeck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static class JsonLibraryIoExceptionThrowingStub extends JsonLibraryStorage {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private JsonLibraryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 11,
      "kschiew": 13,
      "ncslzh": 1,
      "amrl": 14,
      "-": 117
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(commandResult.equals("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(commandResult.equals("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"feedback\", false, false, false, null)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false, null)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false, null)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different stop value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(commandResult.equals("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true, null)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \"feedback\", true, false, false, null).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \"feedback\", false, true, false, null).hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \"feedback\", false, true, false, null).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different stop value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \"feedback\", false, false, true, null).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "ncslzh": 26,
      "-": 46
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_DECK_NAME_KOREAN_1 \u003d \"Korean 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_DECK_NAME_KOREAN_2 \u003d \"Korean 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_1_HELLO \u003d \"안녕하세요 : hello\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_1_YES \u003d \"네 : yes\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_1_NO \u003d \"아니요 : no\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_2_WEEKENDS \u003d \"주말 : weekends\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_2_WEEKDAYS \u003d \"평일 : weekdays\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String VALID_CARD_NAME_KOREAN_2_SUNDAY \u003d \"일요일 : sunday\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String INVALID_DECK_NAME \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String INVALID_CARD_NAME_COLONS_FRONT \u003d \":안녕하세요 : hello\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String INVALID_CARD_NAME_COLONS_BACK \u003d \"안녕하세요 : hello:\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library expectedLibrary \u003d new Library(actualModel.getLibrary());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedLibrary, actualModel.getLibrary());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deck at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * {@code model}\u0027s library."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static void showDeckAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck deck \u003d model.getFilteredDeckList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String deckName \u003d deck.getName().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        model.updateFilteredDeckList((x) -\u003e deckName.equals(x) ? true : false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(1, model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "ncslzh": 21,
      "amrl": 3,
      "-": 61
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "ncslzh": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                SHOWING_HELP_MESSAGE, true, false, false, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "ncslzh": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/ResetLibraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class ResetLibraryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_emptyLibrary_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertCommandSuccess(new ResetLibraryCommand(), model, ResetLibraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_nonEmptyLibrary_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager(DeckUtils.getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(DeckUtils.getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        expectedModel.setLibrary(new Library());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertCommandSuccess(new ResetLibraryCommand(), model, ResetLibraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager(DeckUtils.getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        model.play(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new ResetLibraryCommand(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "                model, ResetLibraryCommand.MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "ncslzh": 30,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/ReturnToLibraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class ReturnToLibraryCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_return_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager(DeckUtils.getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        model.selectDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new ReturnToLibraryCommand().execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(ReturnToLibraryCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager(DeckUtils.getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        model.play(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ReturnToLibraryCommand returnToLibraryCommand \u003d new ReturnToLibraryCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "                ReturnToLibraryCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e returnToLibraryCommand.execute(model));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_alreadyInLibraryView_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertCommandFailure(new ReturnToLibraryCommand(), model, ReturnToLibraryCommand.MESSAGE_ALREADY_IN_LIBRARY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "ncslzh": 32,
      "amrl": 8
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/cardcommands/AddCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.CardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class AddCardCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCardCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new AddCardCommand(validCard).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inPlayView_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(validCard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "                AddCardCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e addCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inLibraryView_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubLibraryView modelStub \u003d new ModelStubLibraryView();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(validCard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_NOT_IN_DECK_VIEW, () -\u003e addCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard1Command \u003d new AddCardCommand(card1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard2Command \u003d new AddCardCommand(card2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1Command));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard1CommandCopy \u003d new AddCardCommand(card1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1CommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(addCard2Command));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being added."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::equals);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Play View"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::equals);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Library View"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubLibraryView extends ModelStub {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return View.LIBRARY;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::equals);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "ncslzh": 373,
      "lacedaemon98": 6,
      "amrl": 13
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/cardcommands/DeleteCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.CardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_deleteAcceptedByModel_successful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardDeleted modelStub \u003d new ModelStubAcceptingCardDeleted();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card cardToDelete \u003d modelStub.getCard(validIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new DeleteCardCommand(validIndex).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(DeleteCardCommand.MESSAGE_SUCCESS, cardToDelete), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inPlayView_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(validIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "                DeleteCardCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e deleteCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_inLibraryView_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubLibraryView modelStub \u003d new ModelStubLibraryView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_NOT_IN_DECK_VIEW, () -\u003e deleteCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_targetIndexLargerThanDeckSize_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardDeleted modelStub \u003d new ModelStubAcceptingCardDeleted();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(invalidIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX, () -\u003e deleteCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard1Command \u003d new AddCardCommand(card1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard2Command \u003d new AddCardCommand(card2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1Command));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AddCardCommand addCard1CommandCopy \u003d new AddCardCommand(card1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1CommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(addCard1Command.equals(addCard2Command));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being deleted."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * The Deck in this model contains 2 cards"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingCardDeleted extends ModelStub {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubAcceptingCardDeleted() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card cardToDelete) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.remove(cardToDelete);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Play Mode"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubPlayMode() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card cardToDelete) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.remove(cardToDelete);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Library View"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubLibraryView extends ModelStub {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubLibraryView() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return View.LIBRARY;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card cardToDelete) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.remove(cardToDelete);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 16,
      "ncslzh": 414,
      "lacedaemon98": 5,
      "amrl": 18
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/cardcommands/EditCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.CardBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class EditCardCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_editBothSidesAcceptedByModel_successful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardEdited modelStub \u003d new ModelStubAcceptingCardEdited();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(\"Hello\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(\"안녕\");;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card editedCard \u003d new Card(front, back);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new EditCardCommand(validIndex, front, back).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(EditCardCommand.MESSAGE_SUCCESS, editedCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_editFrontOnlyAcceptedByModel_successful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardEdited modelStub \u003d new ModelStubAcceptingCardEdited();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace emptyFront \u003d new FrontFace(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(\"안녕\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new EditCardCommand(validIndex, emptyFront, back).execute(modelStub);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card newCard \u003d modelStub.getCard(validIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(EditCardCommand.MESSAGE_SUCCESS, newCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_editBackOnlyAcceptedByModel_successful() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardEdited modelStub \u003d new ModelStubAcceptingCardEdited();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(\"Hello\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace emptyBack \u003d new BackFace(\"\");;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new EditCardCommand(validIndex, front, emptyBack).execute(modelStub);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card newCard \u003d modelStub.getCard(validIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(EditCardCommand.MESSAGE_SUCCESS, newCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInViewMode_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(\"Hello\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(\"안녕\");;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(validIndex, front, back);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "                EditCardCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e editCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInDeckView_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubLibraryView modelStub \u003d new ModelStubLibraryView();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(\"Hello\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(\"안녕\");;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(validIndex, front, back);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_NOT_IN_DECK_VIEW, () -\u003e editCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_targetIndexLargerThanDeckSize_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardEdited modelStub \u003d new ModelStubAcceptingCardEdited();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(\"Hello\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back \u003d new BackFace(\"안녕\");;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(invalidIndex, front, back);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX, () -\u003e editCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final EditCardCommand standardCommand \u003d new EditCardCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                INDEX_FIRST_CARD, CardUtils.JAP_CARD_1.getFrontFace(), CardUtils.JAP_CARD_1.getBackFace());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        EditCardCommand commandWithSameValues \u003d new EditCardCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                INDEX_FIRST_CARD, CardUtils.JAP_CARD_1.getFrontFace(), CardUtils.JAP_CARD_1.getBackFace());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteCardCommand(Index.fromOneBased(1))));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                INDEX_SECOND_CARD, CardUtils.JAP_CARD_1.getFrontFace(), CardUtils.JAP_CARD_1.getBackFace())));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being deleted."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * The Deck in this model contains 2 cards"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingCardEdited extends ModelStub {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubAcceptingCardEdited() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card oldCard, Card newCard) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.replace(oldCard, newCard);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Play Mode"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubPlayMode() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card oldCard, Card newCard) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.replace(oldCard, newCard);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a card due to being in Library View"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubLibraryView extends ModelStub {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Deck deck;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubLibraryView() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card1 \u003d new CardBuilder().withFrontFace(\"Hello\").withBackFace(\"안녕하세요\").build();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card card2 \u003d new CardBuilder().withFrontFace(\"Yes\").withBackFace(\"네\").build();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card1);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardsList.add(card2);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck \u003d new DeckBuilder().withCards(cardsList).build();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.LIBRARY;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return deck.getCard(index);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card oldCard, Card newCard) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            deck.replace(oldCard, newCard);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 18,
      "ncslzh": 447,
      "lacedaemon98": 7,
      "amrl": 21
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/deckcommands/CreateDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class CreateDeckCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreateDeckCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_deckAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckAdded modelStub \u003d new ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().withName(\"Test\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new CreateDeckCommand(validDeck).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(CreateDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.decksAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInViewMode_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().withName(\"Test\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CreateDeckCommand createDeckCommand \u003d new CreateDeckCommand(validDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "                CreateDeckCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e createDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().withName(\"Test\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CreateDeckCommand createDeckCommand \u003d new CreateDeckCommand(validDeck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                CreateDeckCommand.MESSAGE_DUPLICATE_DECK, () -\u003e createDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck deck1 \u003d new DeckBuilder().withName(\"Malay\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck deck2 \u003d new DeckBuilder().withName(\"Japanese\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CreateDeckCommand createDeck1Command \u003d new CreateDeckCommand(deck1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CreateDeckCommand createDeck2Command \u003d new CreateDeckCommand(deck2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(createDeck1Command.equals(createDeck1Command));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CreateDeckCommand createDeck1CommandCopy \u003d new CreateDeckCommand(deck1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(createDeck1Command.equals(createDeck1CommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(createDeck1Command.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(createDeck1Command.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(createDeck1Command.equals(createDeck2Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a deck being created."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.LIBRARY;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::equals);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot add a deck due to being in Play Mode"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::equals);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being added."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubWithDeck extends ModelStub {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::equals);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "ncslzh": 373,
      "lacedaemon98": 9,
      "amrl": 10
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/deckcommands/RemoveDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RemoveDeckCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_deckAcceptedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckDeleted modelStub \u003d new ModelStubAcceptingDeckDeleted();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck validDeckToDelete \u003d DeckUtils.getTypicalLibrary().getDeck(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new RemoveDeckCommand(Index.fromZeroBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(String.format(RemoveDeckCommand.MESSAGE_DELETE_DECK_SUCCESS, validDeckToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInViewMode_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RemoveDeckCommand removeDeckCommand \u003d new RemoveDeckCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "                RemoveDeckCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e removeDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_targetIndexLargerThanDeckSize_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckDeleted modelStub \u003d new ModelStubAcceptingDeckDeleted();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RemoveDeckCommand removeDeckCommand \u003d new RemoveDeckCommand(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX, () -\u003e removeDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index first \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index second \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RemoveDeckCommand removeFirstCommand \u003d new RemoveDeckCommand(first);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RemoveDeckCommand removeSecondCommand \u003d new RemoveDeckCommand(second);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RemoveDeckCommand removeFirstCommandCopy \u003d new RemoveDeckCommand(first);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommand.equals(removeSecondCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a deck being removed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingDeckDeleted extends ModelStub {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public Library getLibrary() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return library;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            library.deleteDeck(target);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot delete a deck due to being in Play Mode"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public Library getLibrary() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return library;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            library.deleteDeck(target);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 16,
      "ncslzh": 324,
      "lacedaemon98": 8,
      "amrl": 29
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/deckcommands/RenameDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.logic.commands.deckcommands.RenameDeckCommand.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RenameDeckCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_deckAcceptedByModel_renameSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckRenamed modelStub \u003d new ModelStubAcceptingDeckRenamed();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new RenameDeckCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                Index.fromZeroBased(0), new Name(\"Korean\")).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck editedDeck \u003d new Deck(new Name(\"Korean\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(RenameDeckCommand.MESSAGE_RENAME_DECK_SUCCESS, editedDeck),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInViewMode_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand renameDeckCommand \u003d new RenameDeckCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                Index.fromZeroBased(0), new Name(\"Korean\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "                RenameDeckCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e renameDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_targetIndexLargerThanDeckSize_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckRenamed modelStub \u003d new ModelStubAcceptingDeckRenamed();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand renameDeckCommand \u003d new RenameDeckCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                invalidIndex, new Name(\"Korean\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX, () -\u003e renameDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_sameNameGiven_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckRenamed modelStub \u003d new ModelStubAcceptingDeckRenamed();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand renameDeckCommand \u003d new RenameDeckCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                Index.fromZeroBased(0), new Name(\"Japanese\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_DECK, () -\u003e renameDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index first \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index second \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Name newDeckName1 \u003d new Name(\"Korean\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Name newDeckName2 \u003d new Name(\"German\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand removeFirstCommandSameName \u003d new RenameDeckCommand(first, newDeckName1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand removeSecondCommandSameName \u003d new RenameDeckCommand(second, newDeckName1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand removeFirstCommandSameIndex \u003d new RenameDeckCommand(first, newDeckName2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(removeFirstCommandSameName.equals(removeFirstCommandSameName));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        RenameDeckCommand removeFirstCommandCopy \u003d new RenameDeckCommand(first, newDeckName1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(removeFirstCommandSameName.equals(removeFirstCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different names -\u003e return false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommandSameName.equals(removeFirstCommandSameIndex));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different index -\u003e return false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommandSameName.equals(removeSecondCommandSameName));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommandSameName.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(removeFirstCommandSameName.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being renamed."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingDeckRenamed extends ModelStub {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private FilteredList\u003cDeck\u003e filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public FilteredList\u003cDeck\u003e getFilteredDecks() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public Library getLibrary() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return library;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck deck \u003d library.getDeck(targetIndex);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck temp \u003d new Deck(name);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (library.hasDeck(temp)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                deck.setName(name);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot rename a deck due to being in Play Mode"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private FilteredList\u003cDeck\u003e filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public FilteredList\u003cDeck\u003e getFilteredDecks() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public Library getLibrary() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return library;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck deck \u003d library.getDeck(targetIndex);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck temp \u003d new Deck(name);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            if (library.hasDeck(temp)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                deck.setName(name);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 17,
      "ncslzh": 374,
      "lacedaemon98": 8,
      "amrl": 39
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/deckcommands/SelectDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class SelectDeckCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SelectDeckCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_deckAcceptedByModel_selectSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckSelected modelStub \u003d new ModelStubAcceptingDeckSelected();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck validDeckToSelect \u003d DeckUtils.getTypicalLibrary().getDeck(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new SelectDeckCommand(Index.fromZeroBased(0)).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(String.format(SelectDeckCommand.MESSAGE_SUCCESS, validDeckToSelect),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInViewMode_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubPlayMode modelStub \u003d new ModelStubPlayMode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "                SelectDeckCommand.MESSAGE_NOT_IN_VIEW_MODE, () -\u003e selectDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_targetIndexLargerThanDeckSize_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingDeckSelected modelStub \u003d new ModelStubAcceptingDeckSelected();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        SelectDeckCommand selectDeckCommand \u003d new SelectDeckCommand(invalidIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX, () -\u003e selectDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index first \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index second \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        SelectDeckCommand selectFirstCommand \u003d new SelectDeckCommand(first);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        SelectDeckCommand selectSecondCommand \u003d new SelectDeckCommand(second);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        SelectDeckCommand selectFirstCommandCopy \u003d new SelectDeckCommand(first);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a deck being selected."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingDeckSelected extends ModelStub {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private FilteredList\u003cDeck\u003e filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return library.getDeck(targetIdx);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot select a deck due to being in Play Mode"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private FilteredList\u003cDeck\u003e filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return filteredDecks;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Library library \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return library.getDeck(targetIdx);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 16,
      "ncslzh": 341,
      "lacedaemon98": 8,
      "amrl": 23
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/gamecommands/AnswerNoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class AnswerNoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_play_answerNoSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingGameAnswerNo modelStub \u003d new ModelStubAcceptingGameAnswerNo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new AnswerNoCommand().execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(AnswerNoCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubNotPlayMode modelStub \u003d new ModelStubNotPlayMode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerNoCommand answerNoCommand \u003d new AnswerNoCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "                AnswerNoCommand.MESSAGE_NOT_PLAY_MODE, () -\u003e answerNoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_gameNotFlipped_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubCardNotFlipped modelStub \u003d new ModelStubCardNotFlipped();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerNoCommand answerNoCommand \u003d new AnswerNoCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "                AnswerNoCommand.MESSAGE_NOT_FLIPPED, () -\u003e answerNoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerNoCommand answerNoCommand \u003d new AnswerNoCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(answerNoCommand.equals(answerNoCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerNoCommand answerNoCommandCopy \u003d new AnswerNoCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(answerNoCommand.equals(answerNoCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(answerNoCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(answerNoCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always answer no."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingGameAnswerNo extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            newGame.flip();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot play due to not in play mode."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubNotPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            newGame.flip();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot answer no since card is not flipped."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubCardNotFlipped extends ModelStub {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "ncslzh": 344,
      "lacedaemon98": 10,
      "amrl": 15
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/gamecommands/AnswerYesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class AnswerYesCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_play_answerYesSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingGameAnswerYes modelStub \u003d new ModelStubAcceptingGameAnswerYes();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new AnswerYesCommand().execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(AnswerYesCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubNotPlayMode modelStub \u003d new ModelStubNotPlayMode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerYesCommand answerYesCommand \u003d new AnswerYesCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "                AnswerYesCommand.MESSAGE_NOT_PLAY_MODE, () -\u003e answerYesCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_gameNotFlipped_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubCardNotFlipped modelStub \u003d new ModelStubCardNotFlipped();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerYesCommand answerYesCommand \u003d new AnswerYesCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "                AnswerYesCommand.MESSAGE_NOT_FLIPPED, () -\u003e answerYesCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerYesCommand answerYesCommand \u003d new AnswerYesCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(answerYesCommand.equals(answerYesCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        AnswerYesCommand answerYesCommandCopy \u003d new AnswerYesCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(answerYesCommand.equals(answerYesCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(answerYesCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(answerYesCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts answer yes."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingGameAnswerYes extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            newGame.flip();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot play due to not in play mode."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubNotPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            newGame.flip();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot answer no since card is not flipped."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubCardNotFlipped extends ModelStub {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "ncslzh": 344,
      "lacedaemon98": 10,
      "amrl": 15
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/gamecommands/FlipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_play_flipSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingCardFlipped modelStub \u003d new ModelStubAcceptingCardFlipped();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new FlipCommand().execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(FlipCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubNotPlayMode modelStub \u003d new ModelStubNotPlayMode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, FlipCommand.MESSAGE_NOT_PLAY_MODE, () -\u003e flipCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_alreadyFlipped_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubCardAlreadyFlipped modelStub \u003d new ModelStubCardAlreadyFlipped();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, FlipCommand.MESSAGE_ALREADY_FLIPPED, () -\u003e flipCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(flipCommand.equals(flipCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FlipCommand flipCommandCopy \u003d new FlipCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(flipCommand.equals(flipCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(flipCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(flipCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts a card being flipped."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingCardFlipped extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new BackFace(\"testString\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot flip due to not in play mode."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubNotPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new BackFace(\"testString\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot be flipped since card is already flipped."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubCardAlreadyFlipped extends ModelStub {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 11,
      "ncslzh": 319,
      "lacedaemon98": 10,
      "amrl": 14
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/gamecommands/PlayCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static com.flashspeed.testutil.TypicalIndexes.INDEX_THIRD_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class PlayCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_play_successful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingPlay modelStub \u003d new ModelStubAcceptingPlay();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new PlayCommand(INDEX_FIRST_DECK).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck chosenDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(PlayCommand.MESSAGE_SUCCESS, chosenDeck),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_alreadyInPlay_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubNotAlreadyInPlay modelStub \u003d new ModelStubNotAlreadyInPlay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        PlayCommand playCommand \u003d new PlayCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, PlayCommand.MESSAGE_ALREADY_PLAY, () -\u003e playCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_deckNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubDeckNotFound modelStub \u003d new ModelStubDeckNotFound();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        PlayCommand playCommand \u003d new PlayCommand(INDEX_THIRD_DECK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, PlayCommand.MESSAGE_DECK_NOT_FOUND, () -\u003e playCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_emptyDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubDeckEmpty modelStub \u003d new ModelStubDeckEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        PlayCommand playCommand \u003d new PlayCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, PlayCommand.MESSAGE_NO_CARD, () -\u003e playCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        PlayCommand playCommand \u003d new PlayCommand(validIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(playCommand.equals(playCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        PlayCommand playCommandCopy \u003d new PlayCommand(validIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(playCommand.equals(playCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(playCommand.equals(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(playCommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts play."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingPlay extends ModelStub {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot play due to already being in play mode."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubNotAlreadyInPlay extends ModelStub {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Deck testDeck \u003d DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            GameManager newGame \u003d new GameManager(testDeck);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            newGame.flip();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return newGame;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot answer no since deck is not found"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubDeckNotFound extends ModelStub {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot answer no since deck is not found"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubDeckEmpty extends ModelStub {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return DeckUtils.getTypicalJapDeck();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new Card(null, null);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "ncslzh": 378,
      "lacedaemon98": 4,
      "amrl": 15
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/commands/gamecommands/StopCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.GameManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class StopCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void execute_stop_successful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubAcceptingStop modelStub \u003d new ModelStubAcceptingStop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        CommandResult commandResult \u003d new StopCommand().execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertEquals(String.format(StopCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void execute_notInPlayMode_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        ModelStubNotInPlayMode modelStub \u003d new ModelStubNotInPlayMode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CommandException.class, StopCommand.MESSAGE_NOT_PLAY_MODE, () -\u003e stopCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(stopCommand.equals(stopCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        StopCommand stopCommandCopy \u003d new StopCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertTrue(stopCommand.equals(stopCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(stopCommand.equals(0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertFalse(stopCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void returnToLibrary() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deck Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public ReadOnlyProperty\u003cView\u003e currentViewProperty() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Functions  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public void setCurrentView(View view) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Play View Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card play(Index index) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public BackFace flip() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerYes() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public GameManager getGame() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Card answerNo() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that always accepts stop."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubAcceptingStop extends ModelStub {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.PLAY;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * A Model stub that cannot stop because its not even in play mode."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private class ModelStubNotInPlayMode extends ModelStub {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        public View getView() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return View.DECK;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        public Statistics stop() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 11,
      "ncslzh": 299,
      "lacedaemon98": 8,
      "amrl": 13
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String VALID_NAME \u003d \"Japanese Verbs 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "amrl": 5,
      "-": 44
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/cardparsers/AddCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class AddCardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private AddCardCommandParser parser \u003d new AddCardCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_noColon_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"front, back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_valid_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card toAdd \u003d new Card(new FrontFace(\"front value 1\"), new BackFace(\"back value 1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        AddCardCommand expectedCommand \u003d new AddCardCommand(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"front value 1:back value 1\", expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 30,
      "amrl": 1
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/cardparsers/DeleteCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class DeleteCardCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private DeleteCardCommandParser parser \u003d new DeleteCardCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_valid_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        DeleteCardCommand expectedCommand \u003d new DeleteCardCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 25,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/cardparsers/EditCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "class EditCardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Index idxOneFromOneBased \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff \u003d new FrontFace(\"front\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf \u003d new BackFace(\"back\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace emptyFront \u003d new FrontFace(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace emptyBack \u003d new BackFace(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private EditCardCommandParser parser \u003d new EditCardCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noIndex_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"front:back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noFrontAndBack_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 :\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noColon_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 front, back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withFrontOnly_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, ff, emptyBack);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1 front:\", expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withBackOnly_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, emptyFront, bf);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1 :back\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withFrontAndBack_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, ff, bf);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1 front:back\", expectedCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "amrl": 51
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/deckparsers/CreateDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class CreateDeckCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private CreateDeckCommandParser parser \u003d new CreateDeckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_blankName_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"        \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 19,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/deckparsers/RemoveDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "class RemoveDeckCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private RemoveDeckCommandParser parser \u003d new RemoveDeckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 16
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/deckparsers/RenameDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class RenameDeckCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private RenameDeckCommandParser parser \u003d new RenameDeckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_blankName_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1  \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 23,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/deckparsers/SelectDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "class SelectDeckCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private SelectDeckCommandParser parser \u003d new SelectDeckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 16
    }
  },
  {
    "path": "src/test/java/com/flashspeed/logic/parser/gameparsers/PlayCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.logic.parser.gameparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.commands.gamecommands.PlayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class PlayCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private PlayCommandParser parser \u003d new PlayCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 18,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/GameManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class GameManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private GameManager gameManager \u003d new GameManager(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void flip_alreadyFlip_returnsNull() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d gameManager.flip();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(backFace, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getBackFace_flip_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d gameManager.flip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card card \u003d DeckUtils.JAPANESE_DECK.asUnmodifiableObservableList().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(backFace, card.getBackFace());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_answerYes_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card nextCard \u003d gameManager.answerYes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d gameManager.getCards().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(nextCard, card);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_answerNo_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card nextCard \u003d gameManager.answerNo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d gameManager.getCards().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(nextCard, card);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 39,
      "kschiew": 5,
      "amrl": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/LibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.LibraryBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class LibraryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Library library \u003d new Library();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(Collections.emptyList(), library.getDeckList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.resetData(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void resetData_withValidReadOnlyLibrary_replacesData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library newData \u003d new LibraryBuilder().withDeck(DeckUtils.JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.resetData(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(newData, library);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.hasDeck(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hasDeck_deckNotIn_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(library.hasDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hasDeck_deckIn_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.addDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(library.hasDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hasDeck_deckWithSameIdentityFields_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.addDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withName(\"Japanese\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .withCards(CardUtils.JAP_CARDS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(library.hasDeck(newDeck));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e library.getDeckList().remove(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 19,
      "lacedaemon98": 9,
      "amrl": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.util.View;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.CardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.LibraryBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(new Library(), new Library(modelManager.getLibrary()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(Optional.empty(), modelManager.getDeckIndex());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"library/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"new/library/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setLibraryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLibraryFilePath(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setLibraryFilePath_validPath_setsLibraryPath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Path path \u003d Paths.get(\"library/file/path\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.setLibraryFilePath(path);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(path, modelManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDeck(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_deckNotInLibrary_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.hasDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_deckInLibrary_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(modelManager.hasDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void hasDeck_deckNotInLibraryAfterDeleteDeck_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.deleteDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.hasDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCurrentDeck_returnsNull() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertNull(modelManager.getCurrentDeck());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCurrentDeck_returnsCurrentDeck() throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertEquals(modelManager.getCurrentDeck(), DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setSelectedDeck_returnsSelectedDeckValue() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.setSelectedDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(modelManager.selectedDeckProperty().getValue(), DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasCard_cardInDeck_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertTrue(modelManager.hasCard(CardUtils.JAP_CARD_1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCard_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index deckIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(deckIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index cardIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertEquals(modelManager.getCard(cardIndex), CardUtils.JAP_CARD_1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void hasCard_cardNotInDeckAafterDeleteCard_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.deleteCard(CardUtils.JAP_CARD_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertFalse(modelManager.hasCard(CardUtils.JAP_CARD_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public void hasCard_cardNrReplaceCad_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card newCard \u003d new CardBuilder().withFrontFace(\"newFront1\").withBackFace(\"newBack1\").build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.replaceCard(CardUtils.JAP_CARD_2, newCard);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertFalse(modelManager.hasCard(CardUtils.JAP_CARD_2));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void hasCard_cardInDeckAfterReplaceCard_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card newCard \u003d new CardBuilder().withFrontFace(\"newFront2\").withBackFace(\"newBack2\").build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.replaceCard(CardUtils.JAP_CARD_3, newCard);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertTrue(modelManager.hasCard(newCard));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void cardReturned_afterPlay_returnsNull() throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"10\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(card, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void gameCreated_afterPlay_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertTrue(modelManager.getGame() !\u003d null);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            assertEquals(modelManager.getView(), View.PLAY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getBackFace_afterFlip_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            BackFace backFace \u003d modelManager.flip();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), true);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(backFace, card.getBackFace());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_afterAnswerYes_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.play(index);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.flip();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.answerYes();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_afterAnswerNo_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager.createDeck(DeckUtils.JAPANESE_DECK);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.play(index);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.flip();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.answerNo();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library library \u003d new LibraryBuilder().withDeck(DeckUtils.JAPANESE_DECK).withDeck(DeckUtils.MALAY_DECK).build();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library differentLibrary \u003d new Library();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // different library -\u003e returns false"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentLibrary, userPrefs)));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        differentUserPrefs.setLibraryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(library, differentUserPrefs)));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 171,
      "kschiew": 46,
      "ncslzh": 4,
      "lacedaemon98": 1,
      "amrl": 11,
      "-": 86
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.CardUtils.JAP_CARD_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.CardUtils.JAP_CARD_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class StatisticsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final ObservableList\u003cCard\u003e CARDS \u003d JAPANESE_DECK.asObservableList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int CORRECT_ANS \u003d 6;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int WRONG_ANS \u003d 15;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int TOTAL_QNS \u003d 21;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_1_CORRECT \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_2_CORRECT \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_3_CORRECT \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_1_WRONG \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_2_WRONG \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final int JAP_CARD_3_WRONG \u003d 6;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Map\u003cCard, Integer\u003e TOTAL_ATTEMPTS \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_1, JAP_CARD_1_CORRECT + JAP_CARD_1_WRONG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_2, JAP_CARD_2_CORRECT + JAP_CARD_2_WRONG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_3, JAP_CARD_3_CORRECT + JAP_CARD_3_WRONG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Map\u003cCard, Integer\u003e CORERCT_ATTEMPTS \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_1, JAP_CARD_1_CORRECT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_2, JAP_CARD_2_CORRECT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_3, JAP_CARD_3_CORRECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Map\u003cCard, Integer\u003e WRONG_ATTEMPTS \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_1, JAP_CARD_1_WRONG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_2, JAP_CARD_2_WRONG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            put(JAP_CARD_3, JAP_CARD_3_WRONG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getCorrectAns_newGame_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics emptyStatistics \u003d new Statistics(CARDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(emptyStatistics.getCorrectAns(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getCorrectAns_ongoingGame_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getCorrectAns(), CORRECT_ANS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getWrongAns_newGame_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics emptyStatistics \u003d new Statistics(CARDS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(emptyStatistics.getWrongAns(), 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getWrongAns_ongoingGame_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getWrongAns(), WRONG_ANS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getTotalQns_newGame_throwsAssertionError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics emptyStatistics \u003d new Statistics(CARDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(emptyStatistics.getTotalQns(), 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getTotalQns_ongoingGame_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getTotalQns(), TOTAL_QNS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getScore_newGame_throwsArithmeticException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics emptyStatistics \u003d new Statistics(CARDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e emptyStatistics.getScore());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void getScore_ongoingGame_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        long score \u003d Math.round(Double.valueOf(CORRECT_ANS) / Double.valueOf(TOTAL_QNS) * 100);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getScore(), score);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void incrementWrongAttempt_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        nonEmptyStatistics.incrementWrongAttempt(JAP_CARD_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        long score \u003d Math.round(Double.valueOf(CORRECT_ANS) / Double.valueOf(TOTAL_QNS + 1) * 100);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getScore(), score);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void incrementCorrectAttempt_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Statistics nonEmptyStatistics \u003d new Statistics(CORRECT_ANS, WRONG_ANS, TOTAL_QNS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                TOTAL_ATTEMPTS, CORERCT_ATTEMPTS, WRONG_ATTEMPTS, CARDS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        nonEmptyStatistics.incrementCorrectAttempt(JAP_CARD_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        long score \u003d Math.round(Double.valueOf(CORRECT_ANS + 1) / Double.valueOf(TOTAL_QNS + 1) * 100);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(nonEmptyStatistics.getScore(), score);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 126
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void setLibraryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setLibraryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "ncslzh": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.logic.commands.CommandTestUtil.VALID_DECK_NAME_KOREAN_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.CardUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(DeckUtils.JAPANESE_DECK.isSameDeck(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.isSameDeck(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // rename Japanese to French -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck renamed \u003d new DeckBuilder(DeckUtils.JAPANESE_DECK).withName(VALID_DECK_NAME_KOREAN_1).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.isSameDeck(renamed));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // new deck with same name, same cards -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .withName(\"Japanese\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .withCards(CardUtils.JAP_CARDS).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(DeckUtils.JAPANESE_DECK.isSameDeck(newDeck));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // new deck with same name, no cards -\u003e return true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .withName(\"Japanese\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(DeckUtils.JAPANESE_DECK.isSameDeck(newDeck));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck japaneseCopy \u003d new DeckBuilder(DeckUtils.JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(DeckUtils.JAPANESE_DECK.equals(japaneseCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(DeckUtils.JAPANESE_DECK.equals(DeckUtils.JAPANESE_DECK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.equals(DeckUtils.MALAY_DECK));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck renamed \u003d new DeckBuilder(DeckUtils.JAPANESE_DECK).withName(VALID_DECK_NAME_KOREAN_1).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(DeckUtils.JAPANESE_DECK.equals(renamed));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 62,
      "amrl": 2
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 3,
      "amrl": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.CardUtils.JAP_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.DeckUtils.MALAY_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withName(\"Japanese\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withCards(JAP_CARDS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(uniqueDeckList.contains(newDeck));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void add_duplicateDeck_doNotAdd() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.add(JAPANESE_DECK));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, MALAY_DECK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_deckDoesNotExist_throwDeckNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.remove(MALAY_DECK));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.remove(JAPANESE_DECK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(MALAY_DECK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(JAPANESE_DECK, JAPANESE_DECK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDecks(listWithDuplicateDecks));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            -\u003e uniqueDeckList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 22,
      "lacedaemon98": 48,
      "amrl": 3,
      "-": 60
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/card/BackFaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "class BackFaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf1 \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf2 \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1.getValue(), \"back value\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1.toString(), \"back value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1, bf2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 25
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/card/CardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "class CardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card1 \u003d new Card(ff, bf);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card2 \u003d new Card(ff, bf);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getFrontFace() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(card1.getFrontFace(), ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getBackFace() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(card1.getBackFace(), bf);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(card1, card2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(card1.toString(), \"front value : back value\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 33
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/card/FrontFaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "class FrontFaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff1 \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff2 \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1.getValue(), \"front value\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1.toString(), \"front value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1, ff2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 25
    }
  },
  {
    "path": "src/test/java/com/flashspeed/model/deck/card/UniqueCardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "class UniqueCardListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl2 \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl3 \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff1 \u003d new FrontFace(\"front value 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff2 \u003d new FrontFace(\"front value 2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf1 \u003d new BackFace(\"back value 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf2 \u003d new BackFace(\"back value 2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card nonExistentCard \u003d new Card(new FrontFace(\"new front 1\"), new BackFace(\"new back 2\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card1 \u003d new Card(ff1, bf1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card2 \u003d new Card(ff1, bf2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card3 \u003d new Card(ff2, bf1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card4 \u003d new Card(ff2, bf2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    UniqueCardListTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card4);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl3.add(card2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl3.add(card3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card3));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ucl.getSize(), 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void add_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ucl.add(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCard_validIndex_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(0)), card1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(1)), card2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(2)), card3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(3)), card4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCard_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e ucl.getCard(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void replace_nonExistentCard_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(CardNotFoundException.class, () -\u003e ucl.replace(nonExistentCard, card1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ucl, ucl2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertNotEquals(ucl, ucl3);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 11,
      "amrl": 86
    }
  },
  {
    "path": "src/test/java/com/flashspeed/storage/JsonAdaptedDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonAdaptedDeckTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(DeckUtils.MALAY_DECK);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(DeckUtils.MALAY_DECK, deck.toModelType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonAdaptedDeck jsonDeck \u003d new JsonAdaptedDeck(DeckUtils.getTypicalJapDeck());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        jsonDeck.setName(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "                JsonAdaptedDeck.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, jsonDeck::toModelType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void toModelType_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedDeck.MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new JsonAdaptedDeck(\"Japanese\", null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 30,
      "amrl": 4
    }
  },
  {
    "path": "src/test/java/com/flashspeed/storage/JsonLibraryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonLibraryStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLibraryStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void readLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLibrary(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLibrary\u003e readLibrary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new JsonLibraryStorage(Paths.get(filePath)).readLibrary(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(readLibrary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"notJsonFormatLibrary.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void readLibrary_invalidPersonLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidDeckLibrary.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void readLibrary_invalidAndValidPersonLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidAndValidPersonLibrary.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void readAndSaveLibrary_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempLibrary.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library original \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonLibraryStorage jsonLibraryStorage \u003d new JsonLibraryStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary readBack \u003d jsonLibraryStorage.readLibrary(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        original.addDeck(DeckUtils.NEW_EMPTY_DECK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        original.deleteDeck(DeckUtils.NEW_EMPTY_DECK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        readBack \u003d jsonLibraryStorage.readLibrary(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        original.addDeck(DeckUtils.NEW_EMPTY_DECK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        readBack \u003d jsonLibraryStorage.readLibrary().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void saveLibrary_nullLibrary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Saves {@code library} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private void saveLibrary(ReadOnlyLibrary library, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "            new JsonLibraryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                    .saveLibrary(library, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void saveLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(new Library(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 39,
      "amrl": 3,
      "-": 65
    }
  },
  {
    "path": "src/test/java/com/flashspeed/storage/JsonSerializableLibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonSerializableLibraryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLibraryTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Path TYPICAL_DECKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"TypicalDecksLibrary.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Path INVALID_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"InvalidDeckLibrary.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static final Path DUPLICATE_DECKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"DuplicateDecksLibrary.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DECKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library libraryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library typicalPersonsLibrary \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(libraryFromFile, typicalPersonsLibrary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void toModelType_invalidDeckNameFile_throwsIllegalArgumentException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DECK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DECKS_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableLibrary.MESSAGE_DUPLICATE_DECK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 21,
      "amrl": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/flashspeed/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"data\", \"library.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "amrl": 2,
      "-": 117
    }
  },
  {
    "path": "src/test/java/com/flashspeed/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.testutil.DeckUtils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d new JsonLibraryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "         * {@link JsonLibraryStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library original \u003d DeckUtils.getTypicalLibrary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        storageManager.saveLibrary(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary retrieved \u003d storageManager.readLibrary().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertNotNull(storageManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 11,
      "amrl": 2,
      "-": 55
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/CardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck DEFAULT_DECK \u003d new Deck(new Name(\"Default deck\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private FrontFace frontFace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private BackFace backFace;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d cardToCopy.getFrontFace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d cardToCopy.getBackFace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the front face of the card that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param front"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public CardBuilder withFrontFace(String front) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace frontFace \u003d new FrontFace(front);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the back face of the card that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param back"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public CardBuilder withBackFace(String back) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace backFace \u003d new BackFace(back);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates a CardBuilder of Cards with values given by parameters in input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param input parameters of card faces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return CardBuilder of Cards with values given by parameters in input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public CardBuilder withInput(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Pattern inputFormat \u003d Pattern.compile(\"(?\u003cfront\u003e.*)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                + \"(\\\\s*[\\u003a\\u02d0\\u02d1\\u02f8\\u05c3\\u2236\\u2360\\ua789\\ufe13\\uff1a\\ufe55]\\\\s*)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                + \"(?\u003cback\u003e.*)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Matcher matcher \u003d inputFormat.matcher(input.strip());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String frontValue \u003d matcher.group(\"front\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String backValue \u003d matcher.group(\"back\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.frontFace \u003d new FrontFace(frontValue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.backFace \u003d new BackFace(backValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Builds the card with the intended front face and back face value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return A Card object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Card(frontFace, backFace);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 56,
      "ncslzh": 18,
      "amrl": 12
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/CardUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CardUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String EMPTY_FACE \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card JAP_CARD_1 \u003d new Card(new FrontFace(\"Hello\"), new BackFace(\" こんにちは\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card JAP_CARD_2 \u003d new Card(new FrontFace(\"Goodbye\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            new BackFace(\" さよなら\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card JAP_CARD_3 \u003d new Card(new FrontFace(\"Thank you\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            new BackFace(\" ありがとう\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card MALAY_CARD_1 \u003d new Card(new FrontFace(\"I\"), new BackFace(\"Saya\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card MALAY_CARD_2 \u003d new Card(new FrontFace(\"You\"), new BackFace(\"Awak\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card MALAY_CARD_3 \u003d new Card(new FrontFace(\"Thank you\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            new BackFace(\"Terima Kasih\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final List\u003cCard\u003e JAP_CARDS \u003d getJapCards();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final List\u003cCard\u003e MALAY_CARDS \u003d getMalayCards();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private CardUtils() {} // prevents instantiation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the Japanese test deck."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cCard\u003e getJapCards() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAP_CARD_1, JAP_CARD_2, JAP_CARD_3));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the Malay test deck."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cCard\u003e getMalayCards() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MALAY_CARD_1, MALAY_CARD_2, MALAY_CARD_3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 45,
      "amrl": 6
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/DeckBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class to help with building Deck objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck DEFAULT_DECK \u003d new Deck(new Name(\"Default deck\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private List\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        name \u003d deckToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the {@code Name} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Adds a list of cards to the deck that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            this.cards.add(card);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Adds a card to the deck that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withCard(Card card) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Builds a deck for testing purposes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The deck object built."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            deck.add(card);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 71
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/DeckUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckUtils {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String EMPTY_DECK_NAME \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String JAP_DECK_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MALAY_DECK_NAME \u003d \"Malay\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck JAPANESE_DECK \u003d getTypicalJapDeck();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck MALAY_DECK \u003d getTypicalMalayDeck();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck NEW_EMPTY_DECK \u003d new Deck(new Name(\"Empty deck\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckUtils() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getTypicalJapDeck() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new Deck(new Name(JAP_DECK_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card: CardUtils.getJapCards()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            deck.add(card);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getTypicalMalayDeck() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new Deck(new Name(MALAY_DECK_NAME));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card: CardUtils.getMalayCards()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            deck.add(card);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns an {@code Libary} with all the typical decks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static Library getTypicalLibrary() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            library.addDeck(deck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(getTypicalJapDeck(), getTypicalMalayDeck()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 59,
      "lacedaemon98": 2
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/LibraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * A utility class to help with building Library objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " *     {@code Library library \u003d new LibraryBuilder().withDeck(\"Japanese\", \"Korean\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class LibraryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Library library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library \u003d new Library();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder(Library library) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a new {@code Deck} to the {@code Library} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.createDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Library build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 31,
      "kschiew": 3
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the middle index of the deck in the {@code model}\u0027s library."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Index.fromOneBased(model.getLibrary().getDeckList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the last index of the deck in the {@code model}\u0027s library."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Index.fromOneBased(model.getLibrary().getDeckList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the deck in the {@code model}\u0027s library at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getDeck(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return model.getLibrary().getDeckList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "amrl": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_FIRST_DECK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_SECOND_DECK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_THIRD_DECK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_FIRST_CARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_SECOND_CARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final Index INDEX_THIRD_CARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 7,
      "-": 7
    }
  },
  {
    "path": "src/test/java/com/flashspeed/testutil/TypicalLibrary.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import com.flashspeed.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Provides a typical library with example values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class TypicalLibrary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_HELLO \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_1_HELLO).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_YES \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_1_YES).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_NO \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_1_NO).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_WEEKENDS \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_2_WEEKENDS).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_WEEKDAYS \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_2_WEEKDAYS).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Card KOREAN_SUNDAY \u003d new CardBuilder().withInput("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_CARD_NAME_KOREAN_2_SUNDAY).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final ArrayList\u003cCard\u003e KOREAN_1_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Arrays.asList(KOREAN_HELLO, KOREAN_YES, KOREAN_NO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final ArrayList\u003cCard\u003e KOREAN_2_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Arrays.asList(KOREAN_WEEKENDS, KOREAN_WEEKDAYS, KOREAN_SUNDAY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Deck KOREAN_1 \u003d new DeckBuilder().withName("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_DECK_NAME_KOREAN_1).withCards(KOREAN_1_LIST).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Deck KOREAN_2 \u003d new DeckBuilder().withName("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "            CommandTestUtil.VALID_DECK_NAME_KOREAN_2).withCards(KOREAN_2_LIST).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private TypicalLibrary() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns an {@code Library} with all the typical Decks and Cards."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static Library getTypicalLibrary() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            library.addDeck(deck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(KOREAN_1, KOREAN_2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 28,
      "amrl": 29
    }
  },
  {
    "path": "src/test/java/com/flashspeed/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/flashspeed/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package com.flashspeed.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static com.flashspeed.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.flashspeed.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "amrl": 1,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import com.flashspeed.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import com.flashspeed.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "-": 5
    }
  }
]
