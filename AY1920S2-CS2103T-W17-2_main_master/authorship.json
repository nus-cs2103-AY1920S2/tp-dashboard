[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d Notably"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image:https://travis-ci.com/AY1920S2-CS2103T-W17-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.com/AY1920S2-CS2103T-W17-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image:https://codecov.io/gh/AY1920S2-CS2103T-W17-2/main/branch/master/graph/badge.svg[\"codecov\", link\u003d\"https://codecov.io/gh/AY1920S2-CS2103T-W17-2/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::docs/images/Ui.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::images/Ui.png[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Are you an NUS student who gets easily frustrated with your unstructured notes?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Do you write a lot of notes but find it difficult to find them afterwards?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If so, Notably will definitely be your **best** note-taking app buddy!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Main target user: tech-savvy NUS students."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Notably allows you to get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Notably can find all your notes for you based on the keywords you input. If you cannot remember the precise keywords, fret not! Notably will give you auto corrections and suggestions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Note-taking? Notably."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* This project is adapted from https://se-education.org[AddressBook-Level3] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 13,
      "kevinputera": 4,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "mainClassName \u003d \u0027com.notably.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    archiveName \u003d \u0027notably.jar\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u0027site-name\u0027: \u0027Notably\u0027,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-2/main\u0027,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        html.enabled false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "kevinputera": 16,
      "-": 111,
      "firzanarmani": 1
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Image credit to ICON8 - https://img.icons8.com/doodle/48/000000/one-finger--v1.png"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "- notably_logo.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "-": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Notably was developed by the https://se-edu.github.io/docs/Team.html[Notably] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Kevin Putera"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::kevinputera.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "{empty}[https://github.com/kevinputera[GitHub]] [\u003c\u003ckevinputera#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Responsibilities: Correction Engine + Markdown Compiler"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Johanna Gwan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::johannagwan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "{empty}[http://github.com/johannagwan[GitHub]] [\u003c\u003cjohannagwan#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Responsibilities: Suggestion Engine"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Hemanshu Gandhi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::hemanshugandhi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "{empty}[http://github.com/hemanshugandhi[GitHub]] [\u003c\u003chemanshugandhi#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Lua Jia Zheng"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::ljiazh3ng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "{empty}[http://github.com/ljiazh3ng[GitHub]] [\u003c\u003cljiazh3ng#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Responsibilities: Parser + Commands + Paths"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Firzan Armani"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::firzanarmani.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "{empty}[http://github.com/firzanarmani[GitHub]] [\u003c\u003cfirzanarmani#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Responsibilities: Tree Data Model + Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 32,
      "firzanarmani": 21,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/ay1920s2-cs2103t-w17-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Email us* : You can also reach us at `firzan.armani [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 4,
      "firzanarmani": 2
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "We use https://travis-ci.org/[Travis CI] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "When a pull request has changes to asciidoc files, we use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/com/notably/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "A project often depends on third-party libraries. For example, Notably depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 7,
      "-": 38
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "By: `Team Notably`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::architecture[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Design pattern and data flow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The App is built following the https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller[Model-View-Controller design pattern]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "In addition, the App\u0027s data flow is unidirectional. That is, all user interactions in \u003c\u003cDesign-View,*`View`*\u003e\u003e will trigger an appropriate handler in \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e, which in turn updates \u003c\u003cDesign-Model,*`Model`*\u003e\u003e and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Any data/state changes in \u003c\u003cDesign-Model,*`Model`*\u003e\u003e will then propagate back to \u003c\u003cDesign-View,*`View`*\u003e\u003e automatically through https://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm[JavaFX\u0027s Property and Binding]. In other words, the https://en.wikipedia.org/wiki/Observer_pattern[Observer design pattern] is employed; \u003c\u003cDesign-Model,*`Model`*\u003e\u003e is the observable while \u003c\u003cDesign-View,*`View`*\u003e\u003e is the observer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "In short, the App\u0027s data flow can be summarized as: +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003c\u003cDesign-View,*`View`*\u003e\u003e -\u003e \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e -\u003e \u003c\u003cDesign-Model,*`Model`*\u003e\u003e + \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e -\u003e \u003c\u003cDesign-View,*`View`*\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Architecture-level components"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Overall, the App consists of five main components:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-View,*`View`*\u003e\u003e: View of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Business logic of the App."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: In-memory representation of the App\u0027s data/state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e: A collection of classes used by multiple other components."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The first four components, namely \u003c\u003cDesign-View,*`View`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e, \u003c\u003cDesign-Model,*`Model`*\u003e\u003e and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the itself, e.g. link:{repoURL}/src/main/java/com/notably/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class, e.g. link:{repoURL}/src/main/java/com/notably/logic/LogicManager.java[`LogicManager.java`]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The following classes from \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e plays an important role at the architecture level:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-Compiler,*`Compiler`*\u003e\u003e : Used mainly by the \u003c\u003cDesign-View,*`View`*\u003e\u003e to compile Markdown to HTML for displaying notes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `new -t Notably`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Component interactions for the `new -t Notably` command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::architecture[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "// tag::view-diagram[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[Design-View]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d View"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Structure of the View Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/view/View.java[`View.java`]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "The View consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `SuggestionsList`, `SideBarTree`, `HelpModal`, `BlockContent` etc. All these, including the `MainWindow`, inherit from the abstract `ViewPart` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `View` component uses JavaFx framework. The layout of these View parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/view/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `View` component,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* Listens for changes to `Model` data so that the View can be updated with the modified data."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "// end::view-diagram[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::logic[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Architecture of Logic"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::LogicArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`Logic` consists of 3 subcomponents:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-NotablyParser,*`NotablyParser`*\u003e\u003e: Main parser of the App, deals with user command execution."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-SuggestionEngine,*`SuggestionEngine`*\u003e\u003e: Deals with suggestions generation."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* \u003c\u003cDesign-CorrectionEngine,*`CorrectionEngine`*\u003e\u003e: Deals with auto-correction."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::logic[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// tag::parser[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Design-NotablyParser]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d\u003d NotablyParser component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".  `Logic` uses the `NotablyParser` class to parse the user command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".  This results in a `List\u003cCommand\u003e` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a Note)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".  The updated model/data structure will automatically be reflected on to the `View`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delte -t cs2103\")` API call."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".Interactions Inside the Logic Component for the `delte -t cs2103` Command"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// end::parser[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::sugengine[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Design-SuggestionEngine]]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d SuggestionEngine"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Class Diagram of the Suggestion Engine Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::SuggestionClassDiagram.png[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/com/notably/logic/suggestion/SuggestionEngine.java[`SuggestionEngine.java`]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`SuggestionEngine` gives users the meaning of the command they input and a list of notes suggestions that they want to"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "open, delete, or search."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "1. `Logic` uses the `SuggestionEngine` class, to handle the user input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "2. According to the command the user inputs, `SuggestionEngine` will create a `XYZSuggestionArgHandler` or `ABCSuggestionHandler` object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "which implements `SuggestionArgHandler` and `SuggestionHandler` interface respectively. `XYZSuggestionArgHandler` are for commands that"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "require argument parsing, i.e. `open`, `delete`, `search`, `new`, whereas `ABCSuggestionHandler` are for commands that do not require argument"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "parsing, i.e. `edit`, `exit`, `help`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "3. If `SuggestionArgHandler` object is created: the `responseText` in the `Model` will be updated. This case will also result in the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "creation of `XYZSuggestionGenerator` object (except for `new` command) which implements `SuggestionGenerator` interface."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`XYZSuggestionGenerator` is then executed by the `SuggestionEngine`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "4. If `SuggestionHandler` object is created: the `responseText` in the `Model` will be updated."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "5. The `Model` could be affected in 2 ways:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Update `responseText` of the `Model` (by the `SuggestionHandler` and `SuggestionArgHandler`): for instance, the input `open /` will set the `responseText` in the `Model` as"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\"Open a note\"."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Store a list of `SuggestionItem` in the `Model` (by the `SuggestionGenerator`)."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "6. The UI will then be able to retrieve the `responseText` and list of `SuggestionItem` from the `Model` to be displayed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` and `Suggestion` component for the input `opne /a`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Interactions Inside the Logic and Suggestion Component for the input `opne /a`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::SuggestionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "NOTE: The lifeline for `OpenSuggestionArgHandler` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//end::sugengine[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::correctiondesign[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Design-CorrectionEngine]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d CorrectionEngine"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Class Diagram of the CorrectionEngine Component"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::CorrectionEngineClassDiagram.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `CorrectionEngine` component revolves around two _API_ s, namely:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] interface, implemented by link:{repoURL}/src/main/java/com/notably/logic/correction/StringCorrectionEngine.java[`StringCorrectionEngine`] and link:{repoURL}/src/main/java/com/notably/logic/correction/AbsolutePathCorrectionEngine.java[`AbsolutePathCorrectionEngine`]. Concrete implementations of link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] are employed to correct an uncorrected user input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] interface, implemented by link:{repoURL}/src/main/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculator.java[`LevenshteinDistanceCalculator`]. Concrete implementations of link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] are employed to calculate the https://en.wikipedia.org/wiki/Edit_distance[edit distance] between two strings."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Given below is the Sequence Diagram for interactions within the link:{repoURL}/src/main/java/com/notably/logic/correction/StringCorrectionEngine.java[`StringCorrectionEngine`] (one concrete implementation of link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`]) component for the `correct(\"uncorrected\")` API call."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Interactions inside the StringCorrectionEngine component for the `correct(\"uncorrected\")` call"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::StringCorrectionEngineSequenceDiagram.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::correctiondesign[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//tag::design-model[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/notably/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* stores and manipulates the `BlockTree` data that represents a tree of Blocks, through BlockModel"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* stores and manipulates a list of suggestions based on the user\u0027s input, through SuggestionModel"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* stores the current state of the `View`, through ViewStateModel"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** stores the command input given by the user, through CommandInputModel"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** stores the state of the `help` modal being open, through HelpFlagModel"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** stores the state of the current block\u0027s `edit` modal being open, through BlockEditFlagModel"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* stores `UserPref` data that represents the user\u0027s preferences, through UserPrefModel"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[Design-BlockModel]]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d BlockModel component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::BlockModelClassDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/notably/model/Model.java[`BlockModel.java`]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "The `BlockModel`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* stores and directly manipulates the `BlockTree`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** contains a single `BlockTreeItem` as the `root`; the tree is built by adding chilren `BlockTreeItems` to the `root`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** each `BlockTreeItem` stores the reference to its parent and children `BlockTreeItems`, and its own content, through `TreeItem\u003cBlock\u003e`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "**** stores its content, through `Block`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "***** contains the `Title` and `Body` content"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//end::design-model[]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//tag::design-storage[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*API* : link:{repoURL}/src/main/java/com/notably/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* can save Notably\u0027s `BlockModel` data in JSON format and read it back."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** stores the `BlockTree` and also the path of the last opened `Block`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//end::design-storage[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Commons"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Classes used by multiple components are in the `com.notably.commons` package."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::compilerdesign[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Design-Compiler]]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Compiler"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Class Diagram of the Compiler Component"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::CompilerClassDiagram.png[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `Compiler` component\u0027s primary usage is to compile Markdown to HTML."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Our `Compiler` component\u0027s design is based off https://github.github.com/gfm/#appendix-a-parsing-strategy[the parsing strategy] explained in https://github.github.com/gfm[GitHub\u0027s GFM Specification]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Mainly, the `Compiler` component consists of the following classes:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/Compiler.java[`Compiler`], which deals with the end-to-end job of compiling unprocessed Markdown to HTML."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/Parser.java[`Parser`], which deals with creating an https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Sytax Tree] representation of an unprocessed Markdown."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`], which is an abstract class representing a node in a Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree]. All concrete implementations of nodes in a Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree] inherit from this class."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The concrete implementations of the link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`] class consist of:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/DocumentBlock.java[`DocumentBlock`], which represents the root of the Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree]."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/HeaderBlock.java[`HeaderBlock`], which represents a Markdown https://github.github.com/gfm/#atx-headings[ATX heading] component."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/ListBlock.java[`ListBlock`], which represents a Markdown unordered list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/ListItemBlock.java[`ListItemBlock`], which represents a Markdown list item."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/ParagraphBlock.java[`ParagraphBlock`], which represents a Markdown paragraph."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/TextBlock.java[`TextBlock`], which represents plain text in Markdown."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Two of link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]\u0027s _abstract_ methods are particularly important:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.com/AY1920S2-CS2103T-W17-2/main/blob/10267c0494bf7e58bd9c8e7f198bb7f9209631e2/src/main/java/com/notably/commons/compiler/parser/block/Block.java#L42[`Block#next`]: This method should be implemented by each of link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]\u0027s implementation in such a way that accepts a single `String` line and evolve the current Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree] further. That way, each of link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]\u0027s implementation only needs to care about processing the portion of the `String` line that is relevant to them, before delegating the rest to its children link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]s."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.com/AY1920S2-CS2103T-W17-2/main/blob/10267c0494bf7e58bd9c8e7f198bb7f9209631e2/src/main/java/com/notably/commons/compiler/parser/block/Block.java#L49[`Block#toHtml`]: This method should be implemented by each of link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]\u0027s implementation in such a way that it returns the HTML representation of the current link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]. That way, each of link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]\u0027s implementation only needs to care about generating its own HTML; the rest can be delegated to its children link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/Block.java[`Block`]s."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "In short, our link:{repoURL}/src/main/java/com/notably/commons/compiler/Compiler.java[`Compiler`] class will first call the https://github.com/AY1920S2-CS2103T-W17-2/main/blob/10267c0494bf7e58bd9c8e7f198bb7f9209631e2/src/main/java/com/notably/commons/compiler/parser/Parser.java#L15-L23[`Parser#parse`] method to generate a Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree]."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "After that, the link:{repoURL}/src/main/java/com/notably/commons/compiler/Compiler.java[`Compiler`] class will transform the returned Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree] into HTML by calling the root link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/block/DocumentBlock.java[`DocumentBlock`]\u0027s `toHtml` method (which will in turn invoke each of its children\u0027s `toHtml` method)."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Given below is the _Sequence Diagram_ for interactions within the `Compiler` component for the `compile(markdown)` API call."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Interactions inside the Compiler component for the `compile(markdown)` call"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::CompilerSequenceDiagram.png[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::compilerdesign[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cDesign-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Design-Configuration]]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "This section describes the details on how features are implemented."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[[Implementation-CorrectionEngine]]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d  Correction Engine"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`CorrectionEngine` is needed to enable auto-correction of user inputs, to deliver as good typing experience as possible."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`CorrectionEngine` revolves around two _API_ s, namely:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] interface, implemented by `StringCorrectionEngine` and `AbsolutePathCorrectionEngine`. Concrete implementations of `CorrectionEngine` are employed to correct an uncorrected user input."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] interface, implemented by `LevenshteinDistanceCalculator`. Concrete implementations of `EditDistanceCalculator` are employed to calculate the https://en.wikipedia.org/wiki/Edit_distance[edit distance] between two strings."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Two concrete implementations of the `CorrectionEngine` interface are, namely:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The `StringCorrectionEngine` class, which deals with the correction of plain strings."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The `AbsolutePathCorrectionEngine` class, which deals with the correction of absolute paths. The absolute paths here refer to the address of the notes (or blocks, as we call it) that exist in the App."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "1. `CorrectionEngine` is built as a standalone module that can be used by both \u003c\u003cImplementation-SuggestionEngine,*`SuggestionEngine`*\u003e\u003e and \u003c\u003cImplementation-Parser,*`Parser`*\u003e\u003e. This decision is made so that code duplication in relation to auto-correction is minimal."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "2. Both `CorrectionEngine` and `EditDistanceCalculator` are implemented as interfaces, in an attempt to make the design of the `CorrectionEngine` component resilient to change. This design enables us to leverage on the https://en.wikipedia.org/wiki/Strategy_pattern[strategy pattern] to make our `CorrectionEngine` component more future-proof."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::sugengineimpl[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[[Implementation-SuggestionEngine]]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Suggestion Engine"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`SuggestionEngine` allows the users to traverse their notes conveniently, without having"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "to remember the hierarchical structure of their notes. `SuggestionEngine` gives users the meaning of the command they input and a list of notes suggestions that they want to"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "open, delete, or search."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"23%,\u003c33%,\u003c25%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "| |SuggestionArgHandler |SuggestionHandler"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "| Purpose | Handles the arguments part of the user input and updates the `responseText` in the `Model` according to the user\u0027s command input |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Updates the `responseText` in the `Model` according to the user\u0027s command input"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "| Commands | `open`, `delete`, `search`, `new` | `edit`, `exit`, `help`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "| Suggestion Generation | Yes, by `SuggestionGenerator` (except for `new` command, since suggestions are generated based on the existing data in the app) | No"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "1. `Logic` uses the `SuggestionEngine` class, to handle the user input."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "2. According to the command the user inputs, `SuggestionEngine` will create a `XYZSuggestionArgHandler` or `ABCSuggestionHandler` object"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "which implements `SuggestionArgHandler` and `SuggestionHandler` interface respectively. `XYZSuggestionArgHandler` are for commands that"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "require argument parsing, i.e. `open`, `delete`, `search`, `new`, whereas `ABCSuggestionHandler` are for commands that do not require argument"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "parsing, i.e. `edit`, `exit`, `help`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "3. If `SuggestionArgHandler` object is created: the `responseText` in the `Model` will be updated. This case will also result in the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "creation of `XYZSuggestionGenerator` object (except for `new` command) which implements `SuggestionGenerator` interface."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`XYZSuggestionGenerator` is then executed by the `SuggestionEngine`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "4. If `SuggestionHandler` object is created: the `responseText` in the `Model` will be updated."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "5. The `Model` could be affected in 2 ways:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Update `responseText` of the `Model` (by the `SuggestionHandler` and `SuggestionArgHandler`): for instance, the input `open /` will set the `responseText` in the `Model` as"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\"Open a note\"."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Store a list of `SuggestionItem` in the `Model` (by the `SuggestionGenerator`)."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "6. The UI will then be able to retrieve the `responseText` and list of `SuggestionItem` from the `Model` to be displayed"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*Aspect 1: Design with respect to the whole architecture*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "1. `SuggestionEngine` is segregated from `Parser` in order to differentiate the logic when the user has finished typing"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "and pressed kbd:[Enter] (which will be handled by `Parser`) in contrast to when the user presses the keyboard kbd:[down] button and kbd:[Enter] to take in the"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "suggestion item."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "2. In order to keep the App\u0027s data flow unidirectional, `SuggestionEngine` will update the `responseText` (which tells"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "the user the meaning of his command) and the list of `SuggestionItem` into the `Model`. Thus, by not showing the"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`responseText` and suggestions immediately to the UI, `SuggestionEngine` will not interfere with the `View` functionality."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "3. `SuggestionArgHandler`, `SuggestionHandler`, `SuggestionGenerator`, `SuggestionItem`, and `SuggestionModel` are"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "implemented as interfaces, in an attempt to make the design of the `SuggestionEngine` component resilient to change."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*Aspect 2: Implementation of suggestions generation*"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Alternative 1:* Have a `SuggestionCommandParser` interface and `SuggestionCommand` interface to parse each of the"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "command, update `responseText` in the `Model`, and give suggestions."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Pros: This provides a consistency for all the commands, where each command has a `XYZSuggestionCommandParser` and `XYZSuggestionCommand` class."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Cons: The `SuggestionCommandParsers` of the commands that do not require parsing of user input (`edit`, `exit`, `help`) end up passing a `userInput`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "argument that is not being used anywhere, which makes this design unintuitive. Moreover, since the updating of the `responseText`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "in the `Model` can be done in each `SuggestionCommandParser`, the `SuggestionCommand`s of `edit`, `exit`, and `help` end up to be redundant."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Alternative 2 (current choice):* Create 2 separate interface to handle commands with input parsing and those without, and name it as a"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`SuggestionArgHandler` and `SuggestionHandler` respectively."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Pros: This solves the cons discussed in Alternative 1, as this design gives a separate implementation for the commands with input"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "parsing and those without. It does not force the `Handler` to parse the user input when there is no need to. The naming `Handler` also"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "does not restrict the functionality of the interface and classes to just parse an input, but allows for a flexibility in executing other functionality"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "such as updating the `responseText` in the `Model`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//end::sugengineimpl[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::correctionimplementation[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Implementation-CorrectionEngine]]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d  Correction Engine"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`CorrectionEngine` is needed to enable auto-correction of user inputs, to deliver as good typing experience as possible."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `CorrectionEngine` component revolves around two _API_ s, namely:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] interface, implemented by link:{repoURL}/src/main/java/com/notably/logic/correction/StringCorrectionEngine.java[`StringCorrectionEngine`] and link:{repoURL}/src/main/java/com/notably/logic/correction/AbsolutePathCorrectionEngine.java[`AbsolutePathCorrectionEngine`]. Concrete implementations of link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] are employed to correct an uncorrected user input."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] interface, implemented by link:{repoURL}/src/main/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculator.java[`LevenshteinDistanceCalculator`]. Concrete implementations of link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] are employed to calculate the https://en.wikipedia.org/wiki/Edit_distance[edit distance] between two strings."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Two concrete implementations of the link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] interface are, namely:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/StringCorrectionEngine.java[`StringCorrectionEngine`] class, which deals with the correction of plain strings."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* The link:{repoURL}/src/main/java/com/notably/logic/correction/AbsolutePathCorrectionEngine.java[`AbsolutePathCorrectionEngine`] class, which deals with the correction of absolute paths. The absolute paths here refer to the address of the notes (or blocks, as we call it) that exist in the App."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "1. `CorrectionEngine` is built as a standalone module that can be used by both \u003c\u003cImplementation-SuggestionEngine,*`SuggestionEngine`*\u003e\u003e and \u003c\u003cImplementation-Parser,*`Parser`*\u003e\u003e. This decision is made so that code duplication in relation to auto-correction is minimal."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "2. Both link:{repoURL}/src/main/java/com/notably/logic/correction/CorrectionEngine.java[`CorrectionEngine`] and link:{repoURL}/src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java[`EditDistanceCalculator`] are implemented as interfaces, in an attempt to make the design of the `CorrectionEngine` component resilient to change. This design enables us to leverage on the https://en.wikipedia.org/wiki/Strategy_pattern[strategy pattern] to make our `CorrectionEngine` component more future-proof."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::correctionimplementation[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// tag::paths[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[[Implementation-Path]]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Paths"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Given below is the implementation detail of the Path feature and some alternative design considerations."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "The `Path` interface represents the location of a `Block` in our data structure. A path can exist in 2 forms namely :"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ". AbsolutePath"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ". RelativePath"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "An `AbsolutePath` is a path that takes its reference from the root `/` block. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "While a `RelativePath` takes it reference from the current note that is opened."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Currently the user is given the freedom to provide any of the 2 forms when using the `open`, `delete` command. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Given the following DataStructure below. +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".DataStructure example to illustrate Path"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "image::PathExample1.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Using `AbsolutePath` `open /CS2101` and using `RelativePath` `open ../CS2101` would yield the same result."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*Aspect: Implementation of `Path`* :"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*   Alternative 1(Current choice): Have 2 separate class implementing `Path`, which is  `AbsolutePath` and `RelativePath`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "**  Pros: More readable and OOP, each class can have their individual validity REGEX."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*   Alternative 2: Implement a single class `PathImpl` and have a boolean flag `isAbsolute` to tell if"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "its a Relative or Absolute path."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*Aspect: Logical equivalence of `RelativePath`* :"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*   Alternative 1(Current choice): Relative path `CS2103/../note1` would be equivalent to `note1`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "**  Pros: More intuitive for the user and developer, making it easier to integrate paths with other features."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*   Alternative 2: Relative path `CS2103/../note1` would not be logically equivalent to `note1`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// end::paths[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//tag::datastructure[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[[Implementation-DataStructure]]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Tree Data Structure"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Notably aims to provide end user a neat and well-organized workspace to store their notes. This is done by creating a tree structure; allowing users to create folder-like paths to organize their notes and group them into categories to their own liking."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "While this can be done with a linear data structure (a simple list), a linear list of notes would require more work to establish the relationship between groups of notes. A tree data structure supports this better, giving a clearer distinction while also establishing a form of hierarchy (as seen in the design example below)."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "On top of that, observability must be ensured so that the UI can update with any changes that happen on the tree (and its nodes) and also the data within each node."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Tree Data Structure Design Example"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::TreeDataStructureDesign.png[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "A custom tree data structure that supports observability has been implemented. As seen \u003c\u003cDesign-BlockTree, here\u003e\u003e, the `BlockModel` is the entry of point of manipulating the data tree. The tree (referred to as `BlockTree`) is made up of tree nodes (referred to as `BlockTreeItem`). The tree is observable such that if any change occurs on any of the tree\u0027s nodes, the change event will bubble upwards to the root node. Hence, the root node serves as the entry point for the `BlockTree`."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "To achieve this design, a `BlockTreeItem` needs to contain 3 primary components:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* an Observable reference to its parent"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* an ObservableList of its children"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* User\u0027s note data (referred to as `Block` data) consisting of:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `Title` of the note"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `Body` content of the note (optional)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "After multiple designs, the current implementation now has `BlockTreeItem` using an underlying `TreeItem\u003cBlock\u003e` to handle the general behaviour of a tree node."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "When manipulating the `BlockTree`, the execution of any operation is always split in this order:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "1. Get the `currentlyOpenPath` from the BlockModel"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "2. BlockModel carries out the command required based on that `currentlyOpenPath`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "An example of an operation is `new -t CS2103T`. To execute this, the following sequence occurs:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "1. `NewCommandParser` creates the `Block` that has the title \u0027CS2103T\u0027 and a default empty body."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  * The `Title` and `Body` objects are created as well"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "2. `NewCommand` then calls the Model and in turn, the BlockModel to add this `Block` to the BlockTree"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "3. `BlockModel` first obtains the `currentlyOpenPath` to execute the operation on, i.e in this case, to add the new `Block` on the path"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "4. `BlockModel` calls `BlockTree` to add the `Block` to the `AbsolutePath` obtained from `BlockModel`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "5. `BlockTree` creates a `BlockTreeItem` using the `Block` parsed earlier."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "6. Subsequently, the underlying `TreeItem\u003cBlock\u003e` is created and the `BlockTreeItem` is then added to the BlockTree."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Below is a sequence diagram that demonstrates this example"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Tree Data Structure SequenceDiagram"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::TreeDataStructureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using JavaFX\u0027s `TreeItem\u003cT\u003e` vs implementing a `BlockTreeItem` from scratch"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Current choice: Using JavaFX\u0027s `TreeItem\u003cT\u003e`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* seamless integration with JavaFX\u0027s `TreeView` which is used in Notably\u0027s sidebar to show the notes in a traditional file-browser-like manner"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* `TreeItem\u003cT\u003e` has the requirements of `BlockTreeItem\u0027s` design already implemented to a usable extent"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* conveniently handles underlying event handling required for `BlockTree` to be observable"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Implementation still requires wrapping and unwrapping of underlying `TreeItem\u003cT\u003e` to work with `TreeView`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `BlockTreeItem` vs Folders to represent path structure"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Current choice: `BlockTreeItem`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* No need for an additional class. Having a separate `folder` object would also require a separate UI View since folders should not contain any block data."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Somewhat unconventional design. User might be unfamiliar with the intention on first use, without proper explanation"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Root should also be a `BlockTreeItem`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Seamless transition to JSON storage"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Need to add constraint to ensure that the root `BlockTreeItem` does not contain any `Body` and is also unmodifiable"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//end::datastructure[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::compilerimplementation[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Implementation-Compiler]]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d  Compiler"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`Compiler` is needed to enable compilation of Markdown to HTML. By having an Markdown to HTML compiler, we can allow user to format their notes in Markdown, which enhances their note-editing experience tremendously."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The implementation of `Compiler` is highly inspired by https://github.github.com/gfm/#appendix-a-parsing-strategy[the parsing strategy] explained in https://github.github.com/gfm[GitHub\u0027s GFM Specification]. Please read more from the specification for a more comprehensive explanation."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Generally speaking, compilers usually consist of several main components, namely a tokenizer, a parser, and a generator. However, this is not the case in our design of the link:{repoURL}/src/main/java/com/notably/commons/compiler/Compiler.java[`Compiler`] component:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ". Leveraging on the fact that Markdown\u0027s syntax is not overly complicated, we decided not to fully adhere to the usual compiler design. Instead, we merged the tokenizer and parser section into our link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/Parser.java[`Parser`] class. This link:{repoURL}/src/main/java/com/notably/commons/compiler/parser/Parser.java[`Parser`] class thus deals converting raw Markdown string into a Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree]."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ". In addition, we opted to not build a standalone generator component. Instead, we make it such that each node in our Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree] supports a `toHtml` method, which returns the HTML representation of the tree starting from itself as a node. This way, we can leverage on OOP\u0027s polymorphism to generate the HTML string out of our Markdown https://en.wikipedia.org/wiki/Abstract_syntax_tree[Abstract Syntax Tree] a lot easier."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::compilerimplementation[]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// tag::ScopeUser[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* Students that has a need to take notes and organize them into categories"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*Value proposition*: Take and manage notes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|`* * *` |student |traverse my notes in a file system-like manner | so that I can skim through my sea of notes and drafts without any problem."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|`* * *` |student |search my notes by their content | I won’t have to remember the exact location and title of notes."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|`* * *` |student |reliably type search commands(not error-prone) | focus on searching my notes rather than ensuring my commands are exact"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|`* *` |student |can quickly make changes to a note| so that I can update my notes with new information accurately while in class."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|`*` |impatient student |alias a path to a folder | do not have to memorise and type out the entire file structure when accessing a nested note"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// end::ScopeUser[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "(For all use cases below, the *System* is the `Notably` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::usecasesearch[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Use case: Search notes using the Auto-suggestion feature"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "1.  User types in a keyword of a note\u0027s content that he wants to open."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "2.  Notably lists out the relevant search results, with the most relevant at the top of the list (based on the keyword\u0027s"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "number of occurrences in the note)."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "3.  User chooses one of the suggested notes."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "4.  Notably opens the chosen note."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* 2a. No suggestion is being generated."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "+"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 2a1. Notably displays a response text, indicating that the user is trying to search through all of the notes using that"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "particular keyword."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 2a2. Since the empty suggestion conveys that the keyword cannot be found, the user enters a new data."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Steps 2a1-2a2 are repeated until the data entered is correct. Use case resumes from Step 3."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//end::usecasesearch[]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::usecaseopendelete[]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Use case: Open/ Delete notes using the Auto-suggestion feature"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "1. User types in an incomplete path or title of a note."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "2. Notably lists out suggestions of notes."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "3. User chooses one of the suggested notes."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "4. Notably opens/ deletes the chosen note."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* 1a. Path or title contains invalid character(s) ( symbols `-` or ```)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "+"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 1a1. Notably displays a response text, indicating that the path or title is invalid."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 1a2. User enters a new data."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered is correct. Use case resumes from Step 2."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* 1b. Path or title does not exist"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "+"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 1b1. Notably displays a response text, indicating that the user is trying to open/ delete the note"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "with the particular path or title that the user inputs."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 1b2. Notably does not generate any suggestions, which means the note cannot be found."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** 1b3. User enters a new data."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Steps 1b1-1b3 are repeated until the data entered is correct. Use case resumes from Step 2."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//end::usecaseopendelete[]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//tag::edit-use[]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d Use case: Quickly Edit notes using the Edit Modal"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "1.  User invokes edit command by typing \"edit\" in the command box."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "2.  Notably immediately opens an edit modal for the currently open note to allow for editing."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "3.  User presses a keyboard shortcut (\"ESC\")."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "4.  Notably saves the user\u0027s changes"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "5.  Notably closes the edit modal."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* 2a. User does not make any edits to the content of the note."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Proceed to 3 first, then resume use case from 5."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* 2b. User edits the content of the note."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Use case continues from 3."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//end::edit-use[]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".  Should be able to hold up to 1000 notes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// tag::ManualTesting[]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "   Expected: Shows the GUI with a set of sample Notes. The window size may not be optimum."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Add a new Note"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Adding a new Note to Notably without immediately opening that Note."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: None of the child(ren) Note(s) of the currently opened Note has the same title as the new Note. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Moreover, the currently opened Note must be the directory where the user wants to store the new Note."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Command: `new -t Notably` +"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: a new Note titled \"Notably\" is added to the currently opened Note."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The currently opened Note (current working directory) remains the same (highlighted at the sidebar)."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Adding a new Note to Notably and immediately opening that Note"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: None of the child(ren) Note(s) of the currently opened Note has the same title as the new Note. +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Moreover, the currently opened Note must be the directory where the user wants to store the new Note."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Command: `new -t Notably -o` +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: a new Note titled \"Notably\" is added to the currently opened Note."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The currently opened Note (current working directory) is now the newly created \"Notably\" note (highlighted at the sidebar)."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Open a Note"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Opening a Note in Notably."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: The Note that is about to be opened must not be the root Note."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Command: `open [-t] Notably` +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: The Note titled \"Notably\" will be opened, with its content being displayed in the UI. The label \"Notably\" at the sidebar"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "will also be highlighted, to indicate that the Note is being opened."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Delete a Note"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Deleting a Note in Notably."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: The Note that is about to be deleted must not be the root Note."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Command: `delete [-t] Notably` +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: The Note titled \"Notably\" will be deleted. The other nested Notes inside the Note \"Notably\" will also be deleted. +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The Note \"Notably\" will no longer be visible in the sidebar."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Edit a Note"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Editing a Note in Notably."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: The Note that is about to be edited must not be the root Note. +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The currently opened Note must be the Note that the user wants to edit."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".. Command: `edit` +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: An edit modal will pop up displaying your Note\u0027s content in HTML format. The user can edit and save the Note by"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "exiting that modal."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Search for a Note based on a keyword"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ". Searching for a note by using a keyword in Notably."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Prerequisites: -"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".. Command: `search [-s] hello` +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Expected: A list of suggestions will be displayed, sorted based on the number of keyword matches, i.e."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "the note having the highest number of \"hello\" in its body will be put at the top of the suggestion list."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Correct command"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ". Correct command word in user input."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Prerequisites: There should exist a Note titled Notably."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Command: \u0027delete [-t] Notably\u0027"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Expected: The command is interpreted as a delete command by Notably."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ". Correct path in user input."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Prerequisites: There should exist a Note titled Notably."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Command: \u0027delete [-t] Notbly\u0027"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ".. Expected: The command is interpreted as a delete command by Notably."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// end::ManualTesting[]"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 173,
      "HemanshuGandhi": 31,
      "kevinputera": 176,
      "-": 250,
      "firzanarmani": 115,
      "ljiazh3ng": 91
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 115
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ". Run the `com.notably.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 61
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "e.g. `com.notably.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "e.g. `com.notably.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "e.g. `com.notably.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "By: `Team Notably`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Notably is for those who *prefer to use a desktop app for managing notes*. More importantly, Notably is *optimized"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//tag::introduction[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d An Introduction to Notably"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "The following 3 diagrams (\u003c\u003cLegends1, Figure 1\u003e\u003e, \u003c\u003cLegends2, Figure 2\u003e\u003e, \u003c\u003cLegends3, Figure 3\u003e\u003e) highlight key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "sections of Notably\u0027s user interface. Refer to the description below each diagram for more information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[LegendsOpened]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[Legends1]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Notably GUI legends"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::Legends1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As shown in the top-left hand corner of the diagram above, Notably\u0027s Sidebar allows you to systematically organise your notes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "in a hierarchical manner."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As shown in the centre of the diagram above, Notably allows you to view the content of your notes in a structured way."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As shown in the top-centre of the diagram above, you can interact with Notably by typing certain commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[Legends2]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Notably GUI legends (continued)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::Legends2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As highlighted in diagram above, Notably\u0027s response text provides you with constant feedback and guidance with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "every keystroke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". Notably helps you to find what you\u0027re looking for by intelligently providing you with a list of suggestions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[Legends3]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Notably GUI legends (continued)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::Legends3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As shown in the diagram above, Notably allows you to edit and customise your notes in a fuss free manner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[LegendsClosed]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//end::introduction[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d Symbols used in this guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Denotes something that you may want to take note of."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Denotes something that may be helpful if you are having any difficulties."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Denotes a warning for something critical."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d Getting started"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".  Download the latest `notably.jar`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your notes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".  Double-click the file to start the app. The Application should start in a few seconds."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help modal."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*Command Legend*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `open NAME`, `NAME` is a parameter which can be used as `open Notably`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Items in square brackets are optional e.g `open [-t] TITLE` can be used as `open -t TITLE` or as `open TITLE`, where `TITLE` is the title of the note."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `new -t TITLE [-o]`, `new [-o] -t TITLE` is also acceptable."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// tag::paths[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[#paths]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*Paths*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* `Paths` are used to specify the location of a note you want the `Command` to be pointed at."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* There are 2 types of  `Path` namely:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "- AbsolutePath (which takes reference from the root, as shown in \u003c\u003cPathExample1, Figure 2\u003e\u003e below)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "- RelativePath (which takes reference from the current note)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "`/` represents a root note"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "The `RelativePath` operates similarly to the command line input that you may be familiar with."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Listed below are the notations used to define a `RelativePath`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* `.` (Point to current note)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* `..` (Point to parent note)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* `exampleNote` (Point to child node)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "**Validity of Paths**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "- AbsolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Must start with the root note."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** After every `/` you can provide a `Title` \u003c\u003cTitleValidity, (Valid Title)\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** `/Workspace/2103T` is a valid `AbsolutePath`, `Workspace/2103T` is not."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "- Relative Path"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Starts with `.` or `..` or a Title \u003c\u003cTitleValidity, (Valid Title)\u003e\u003e."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** `./CS2103T/../CS2101`  is a valid `RelativePath`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "**Example**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "The picture below helps to illustrate the use of `RelativePath` and `AbsolutePath`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Example to illustrate Path"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[PathExample1]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "image::UGPathDiagram.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "The `AbsolutePath` `/Workspace/CS2101` is equivalent to `RelativePath` `../CS2101`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Thus `open /Workspace/CS2101` and `open ../CS2101` would yield the same result."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Paths are used by the `open` and `delete` command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "The Root simply serves as a way for Notably to hierarchically organise your notes. It will not be"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "visible to you while you are using the application."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "You cannot delete the root note. e.g `Delete ../..` is invalid. An error message will be displayed to"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "remind you of this."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// end::paths[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d View help : `help`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "If you can\u0027t remember the commands or you are unsure about what a particular command does, type `help` and hit kbd:[Enter]."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Figure 5 below shows you what this will look like on your screen."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*Format:* `help`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Demo for the `help` command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::demo/Help1.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "You will then see a Help window on your screen, as seen in Figure 4 below, which will include a summary of the commands and a link to Notably\u0027s User Guide. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Demo for the `help` command (continued)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::demo/Help2.png[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* While the help modal is open, you can hold the kbd:[Up] and kbd:[Down] keys to scroll through it\u0027s contents. This is"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "a more efficient solution than using your mouse!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Exit the program: `exit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "If you\u0027re done with taking notes, use `exit` to close Notably straight from the command line. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*Format:* `exit`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Demo for the `exit` command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Exit.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "// tag::new[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[#create]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Create a new note: `new`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "If you want to add a new note (to the path of the currently open note), use the `new` command and specify the `TITLE` of the note. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*Format:* `new -t TITLE [-o]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "[[TitleValidity]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Don\u0027t forget the `-t` flag!"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The `TITLE` for the note MUST be specified."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The `TITLE` for the note can only contain alphabets, numbers, symbols (except / and -) and whitespaces."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The `TITLE` for the note cannot begin with whitespaces or the period `.` characer."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Duplicate notes are not allowed under the same note."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** This is explained \u003c\u003cduplicateNotes, here\u003e\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Use the optional `-o` flag to immediately open the note after creating it."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Leaving out the `-o` open flag can be useful if you want to create multiple notes quickly for future use, but you don\u0027t need to edit them right away!"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Want to save some time? Use the `n` shorthand instead of `new`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `n -t TITLE [-o]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[#duplicateNotes]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Creating duplicate notes"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Creating duplicate notes are not allowed as mentioned \u003c\u003ccreate, 3.3\u003e\u003e. What are considered duplicate notes? +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Two notes are considered duplicates IF their `TITLEs` are the same while ignore their case. For example:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `Hello`, `hello`, `HELLO` and `HeLLo` are considered duplicates"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `hello world!`, `helloworld!` and `helloworld@` are **not** considered duplicates, because whitespaces and allowed symbols are not ignored"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Two notes are considered duplicate IF they have the same `TITLE` under the **same note**. This can be seen in the following diagrams below:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[Duplicate1]]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".INVALID as there are duplicate notes under `/Workspace/CS2103`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/PathDuplicates1.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[Duplicate2]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".VALID as they are not both directly under `/Workspace/CS2103`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/PathDuplicates2.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[Duplicate3]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".VALID as one exists in `/Workspace/CS2103` and the other in `/Workspace/CS2101`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/PathDuplicates3.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Creating new notes"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". Let\u0027s first create a note (with a `TITLE`), and open it immediately after. Type this command: +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    new -t Notably -o"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". Due to the `-o` flag, the currently open note is now `Notably` (as seen in the sidebar). Let\u0027s add a new note to the currently opened note, \u003c\u003cNew2, (Step 2)\u003e\u003e with a `TITLE` as follows: +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    new -t CS2103T"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Observe that the (Absolute) Path to the currently open note is now changed from `/Workspace` in \u003c\u003cNew1, step 1\u003e\u003e to `/Workspace/Notably` in  \u003c\u003cNew2, step 2\u003e\u003e."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Not sure where to see this path? Check it out \u003c\u003cLegends1, here\u003e\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Not sure what Absolute Paths are or why the new note is created in this way? Check it out \u003c\u003cpaths, here\u003e\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". The new note `CS2103T` has been created successfully!"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Observe that the note `CS2103T` was not opened immediately as seen in \u003c\u003cNew3, step 3\u003e\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** This is because the `-o` open flag was not specified, so the note `CS2103T` was created without opening it immediately."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[New1]]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 1 - Create a new note with the title \"Notably\" (with the `-o` open flag)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/New1.png[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[New2]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 2 - Create a new note with the title \"CS2103T\" (without the `-o` open flag)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/New2.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[New3]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 3 - Final state after creating both notes"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/New3.png[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//end::new[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//tag::open[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Open an existing note: `open`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "You can open an existing note by specifying its absolute or relative \u003c\u003cpaths, path\u003e\u003e). +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*Format:* `open [-t] AbsolutePath/Relativepath` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* If you want to save some keypresses, omit the optional `-t` flag. It still works fine!"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Opening a note"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". Let\u0027s open the note `Notably` that exists in the currently opened note `Workspace` \u003c\u003cOpen, (Step 1)\u003e\u003e with the command: +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    open -t Notably"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Notably gives you some useful suggestions on other paths that are similar or related to your input!"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[[Open]]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 1 - Demo for the `open` command (with suggestions)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Open.png[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//end::open[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//tag::editing[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Edit an existing note: `edit`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If you want to change the `BODY` content of the currently opened note, use the `edit` command. This command *opens* an editing window where you can update the existing `BODY` of the note."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*Format:* `edit`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Editing the currently opened note"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". As shown in \u003c\u003cEditStep1, Step 1\u003e\u003e, let\u0027s update the `BODY` content of the currently opened note `Workspace` with the command: +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    edit"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". An Edit modal will appear on your screen, as shown in \u003c\u003cEditStep2, Step 2\u003e\u003e. You will now be able to edit the"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "content of the currently open note."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ". Once done, press kbd:[Esc] to close the modal. Any changes made to the content"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "of the note are automatically saved when you do so."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[EditStep1]]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Step 1 - Demo for the `edit` command (Typing the edit command)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::demo/Edit1.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[[EditStep2]]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".Step 2 - Demo for the `edit` command (Interacting with the Edit modal)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "image::demo/Edit2.png[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* Instead of editing a note in plain text, leverage Notably\u0027s \u003c\u003cMarkdown, Markdown\u003e\u003e feature to better organise"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "the text in your note!"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* You can copy and paste text in the edit modal, as per the conventional keyboard shortcuts kbd:[CMD/CTRL] + kbd:[c] and"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "kbd:[CMD/CTRL] + kbd:[v] respectively."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* You are not allowed to `edit` the root note, i.e when your currently opened path is ``\"/\"``"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "//end:editing[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//tag::delete[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Delete a note: `delete`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "If you no longer need a note, or if you have accidentally created a wrong note, don\u0027t worry! You can always delete that note. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*Format:* `delete [-t] AbsolutePath/RelativePath`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Requires prior understanding of `AbsolutePath` and `RelativePath`. You can refer \u003c\u003cpaths, here\u003e\u003e for an explanation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Deleting a note will also delete its child notes. Be very careful! You can refer to the example below for an illustration"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Deleting the root note (i.e. `delete /`) is prohibited."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* You can delete the currently open note using the command `delete .`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Refer to \u003c\u003cdeleteCurrent, example 3.6.2\u003e\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* Want to save some time? Drop the optional `-t` flag and use the `d` shorthand instead of `delete`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** `d AbsolutePath/RelativePath`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Deleting a note under the currently open note"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". Let\u0027s delete the `Notably` note using this command:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    delete -t Notably"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The currently open note is `Workspace`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The above example uses `RelativePath`. You can achieve the same result as above by using an `AbsolutePath` instead by executing `delete -t /Workspace/Notably`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Not sure about `AbsolutePath` and `RelativePath`? You can refer \u003c\u003cpaths, here\u003e\u003e for a clearer explanation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". The note with the title `Notably` is deleted successfully since it exists!"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* `Another Note`, `CS2103` and `ST2334` are immediately deleted as well since they are notes under `Notably`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 1 - Key in the example command"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Delete1.png[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Final state after deletion"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Delete2.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[#deleteCurrent]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting the currently open note"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". In this example, `Notably` is the currently open note. Let\u0027s delete it using the command:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    delete ."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The `.` in the command is a `RelativePath` that points to the path of the currently open note"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ". `Notably` note is deleted and the currently open note is now `Workspace`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* This will change the currently open note to the deleted note\u0027s parent note"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Step 1 - Key in the example command"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Delete3.png[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "+"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Final state after deletion"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Delete2.png[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "//end::delete[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::search[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Find a note based on certain keywords: `search`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If you need to look for a note that contains a specific keyword in its *content*, use the `search` command and Notably"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "will show you the search results sorted by the number of matches in the note. The note with the highest number of match will be"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "at the top of the list, so that you can access it faster. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*Format:* `search [-s] KEYWORD`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* `search` looks through *all* the notes that you have"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* Partial matches work as well! It means that when you have a set of notes containing the word \"lecture\" but no \"lect\" as a word on its own,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "you can just type `search lect` and Notably will still show you a list of notes containing the word \"lecture\", as \"lect\" is part of the word \"lecture\"."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* Matches are case insensitive, meaning it will find the word no matter if it is in uppercase or lowercase or even mixed-case"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Searching for the keyword \"Computer science\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Let\u0027s look for the keyword \"Computer science\" if it exists in any of the notes that you have saved in Notably. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`search -s Computer science`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If the word \"Computer science\" exists, a list of suggestions will be generated. This list will be sorted in descending order"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "of the number of matches, i.e. the note with the highest number of matches will be at the top of the list, as seen in the figure below."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the `search` command: keyword found"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "image::demo/Search.png[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Let\u0027s say the first option `/Workspace/Notably/CS2103/Project` is the note you are looking for. You may press kbd:[↓] and kbd:[Enter]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "to open the note. The figure below illustrates how the note chosen will be opened and the command line box is cleared."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the `search` command: open a note with the searched keyword"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Search1.png[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If the keyword you are looking for does not exist in any of your notes, no suggestions will be generated, as seen in the figure below."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the `search` command: keyword not found"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Suggestions4.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Save the data"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Your notes are saved in the hard disk automatically after any command that changes the data. There is no need for you to save manually! +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Also, your currently opened note and window size (of Notably) is also saved every time it changes so that you can continue where you left off the next time you start Notably!"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::suggestions[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Auto suggestions"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "As you type, Notably will provide you with suggestions. You can press the keyboard kbd:[↓] button followed by kbd:[Enter] to select any suggestion in the list."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "For example, as you type `open -t Notably`, a list of suggestions will be generated as seen in the figure below."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the suggestions feature: Suggestions are generated as the user keys in his input"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Suggestions.png[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Let\u0027s say you would like to choose the option `/Workspace/Notably/Another Note`. After pressing kbd:[↓] to reach that suggestion"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "and pressing kbd:[Enter], the command input line will be auto-filled by the suggestion, as seen in the figure below."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the suggestions feature: The user input is auto-completed when the user selects a suggestion"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Suggestions2.png[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If no suggestion list is generated for the command `open`, `delete` or `search`, it means the path, title, or keyword cannot be found"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "anywhere in Notably, as seen in the figures below."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the suggestions feature: The user inputs a path/ title that does not exist in his Notably app, thus no suggestion list is generated"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Suggestions3.png[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the suggestions feature: The user inputs a keyword that does not exist in any of his notes, thus no suggestion list is generated"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Suggestions4.png[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d\u003d (Coming in v2.0) Suggestion response text when opening or deleting a parent note"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Variations of path with `../` (e.g. `open ../`, `open Note/../Note`, etc.) will not generate a comprehensive response text."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Currently, typing `open ../` will generate a response text of `Open a note titled \"../\"` instead of `Open a parent note`."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "// end::suggestions[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::correction[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Auto correction"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Notably will try its best to correct your mistypes automatically, as long as your mistyped inputs are not too far away from the understood commands. This provides you with a more fluid typing experience!"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Notably\u0027s auto correction feature works on two aspects of your typing:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ". It auto corrects command names, where command names refers to `open`, `search`, `delete`, `edit`, and others. For example, Notably will correct the mistyped command name `opne` to `open`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ". It auto corrects the `Paths` of notes. For example, depending on the notes that exist in your database, Notably might correct `/Notaby` to `/Notably`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "See the example below for more information."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Auto correcting user input"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Even though the user types in the command name `opne`, Notably is still able to recognise this as an `open` command. +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "In addition, the inputted `RelativePath` `Notaby` is understood by Notably, even though there\u0027s no note in the database with the title `Notaby`. Instead, there exists a note in the database with the `RelativePath` `Notably`. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "After corrections are done, a list of suggestions will be generated as if the user has inputted `open -t Notably`!"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ".Demo for the auto correction feature"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/Correction.png[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::correction[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//tag::responsetext[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d\u003d Response text"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Notably also displays a response text which enables you to understand the meaning of the input you type and shows"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "an error message when your input is invalid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "For example, if you type `open /CS`, the response text will indicates that you are trying to `Open a note titled \"/CS\"`,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "as seen in the figure below."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the response text feature: open command"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/ResponseText1.png[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "On the other hand, if you key in an invalid command, the response text will display an error message as seen in the figure"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "below."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ".Demo for the response text feature: invalid command"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "image::demo/ResponseText2.png[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "//end::responsetext[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// tag::markdown[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[[Markdown]]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d Markdown (GitHub Flavored Markdown)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "We use the term Markdown and GitHub Flavored Markdown interchangably in this document."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Notably supports basic https://guides.github.com/features/mastering-markdown/[GitHub Flavored Markdown (GFM)] as the `BODY` content of a note."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "By supporting Markdown, we hope to enhance your typing experience even further. You can simply type your note in Markdown, and it\u0027ll take care of displaying the content of your note in a nice layout for you."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Currently supported syntax of GitHub Flavored Markdown in Notably consists of:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.github.com/gfm/#atx-heading[ATX headings] +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "# Level 1 header"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "## Level 2 header"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "### Level 3 header"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "#### Level 4 header"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "##### Level 5 header"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "###### Level 6 header"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.github.com/gfm/#list[Lists] and https://github.github.com/gfm/#list-items[List items] +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Currently, only unordered lists are supported. In addition, only the hyphen `-` symbol is supported to be used as the list bullets. +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- List item"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Another list item"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "  - A nested list item"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    - A deeper nested list item"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Last list item"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.github.com/gfm/#paragraph[Paragraphs] +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Proin dictum accumsan nunc sed feugiat."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d Example: Writing your note in Markdown"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "For example, you might write your note as follows:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "# Hello Notably"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Notably is for those who prefer to use a desktop app for managing notes."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "More importantly, Notably is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "## Getting started"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "- Download the latest https://github.com/AY1920S2-CS2103T-W17-2/main/releases[notably.jar]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Double-click the file to start the app. The Application should start in a few seconds."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d\u003d\u003d (Coming in v2.0) More complete support of Markdown syntax"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "In our v2.0 release, we\u0027ll be supporting the following additional Markdown syntax:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.github.com/gfm/#emphasis-and-strong-emphasis[Emphasis and strong emphasis] +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*This text will get italicised*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "**This text will get bold**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* https://github.github.com/gfm/#strikethrough-extension-[Strikethrough] +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "~~This text will get a strikethrough treatment~~"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "----"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "// end::markdown[]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d Sidebar"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "The sidebar is where you can see your notes in a neatly organised way, reminiscent of a file browser in an Operating System. +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* The sidebar only shows up to 3 levels of notes at a single time."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** The 3 levels will compromise of the:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** currently open note and its siblings"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** its parent note"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** its children notes"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** This will be demonstrated in the following diagrams, with `Workspace` as the level 1 note"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** There is no level 0 note (root) that is displayed in the sidebar"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Before and after opening a level 2 note"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Sidebar.png[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ".Before and after opening a level 3 note"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "image::demo/Sidebar2.png[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Notably folder."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *View help*: `help`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *Exit the program*: `exit`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Create a new note*: `new -t TITLE [-o]`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Open an existing note*: `open [-t] AbsolutePath/Relativepath`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Opens an editing window to edit the currently opened note*: `edit`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Delete a note*: `delete [-t] AbsolutePath/Relativepath`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Find a note based on certain keywords*: `search [-s] KEYWORD`"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 80,
      "HemanshuGandhi": 84,
      "kevinputera": 127,
      "-": 85,
      "firzanarmani": 184,
      "ljiazh3ng": 57
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 47
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 98
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 58
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ".The VIEW class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "kevinputera": 1,
      "-": 209
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Notably - Using Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/index.html`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 139
    }
  },
  {
    "path": "docs/team/firzanarmani.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d Firzan Armani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Notably is for those who prefer to use a desktop app for managing notes. More importantly, Notably is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Major enhancement*: added a *tree data structure*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** What it does: allows the user to store their notes in a hierarchical form, similar to that of a file-folder structure in an Operating System"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Justification: This feature allows for a more organised storage and access of notes. The design is based on the practice of users organising their physical notes in sections and divisions for clarity. A note (or referred to internally as a `Block`) also doubles as a folder, allowing for a recursive data structure using only notes. As a result, this design has an added advantage of allowing for efficient navigation with the use of `Paths`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Highlights: This enhancement is a complete rewrite of the data model while maintaining some design considerations from the previous iteration AB3. It required a lot of careful consideration about its design since it is the core feature of Notably. Also, the data structure would have to be observable to work seamlessly with the UI\u0027s sidebar TreeView. It was time consuming to experiment with a few design options before settling on wrapping JavaFX\u0027s TreeItem objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Refactored and created `Block` class with `Title` and `Body` classes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Updated the `Storage` to store and access JSON data which supports nested `Blocks` as a result of the new Tree data structure"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Create sample Block data in the form of a first-time user tutorial walkthrough"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dfirzanarmani\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dfirzanarmani\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Set up GitHub repository"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Managed tags `v1.1` and `v1.3` (2 tags) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Updated `UserPrefs`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Improvements to UG command information: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/306[306]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Added section on tree data structure implementation and other improvements in DG"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W17-2/main/pull/175[#175], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/429[#429], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/443[#443]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/AY1920S2-CS2103T-F10-2/main/issues/188[1], https://github.com/AY1920S2-CS2103T-F10-2/main/issues/187[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnew]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-model]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-storage]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddatastructure]"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 63
    }
  },
  {
    "path": "docs/team/hemanshugandhi.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d Hemanshu Gandhi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Notably is for those who prefer to use a desktop app for managing notes. More importantly, Notably is optimized for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Major enhancement*: Completely overhauled the original user interface to meet the new application\u0027s demands.*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Adds a *Side Bar* that allows the user to view his notes in a *hierarchy*, and track the location of the currently"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "opened note."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Adds an *Edit Modal* that allows the user to edit his notes, as well as the ability for the user to quickly save and edit the editing mode"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "with the press of one key."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Adds a *Response Text* that gives realtime feedback to the user on what he is typing in the command box."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Adds a *Suggestion Window* that displays suggested items to the user in the form of a list. This list needs to support dynamic resizing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "as the number of suggestions continuously changes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Adds a *Web View* that allows for the content of the user\u0027s note, and other metadata (information on path location and title) to be displayed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The *Side Bar* overcomes the challenges that are present in using a command-line like app; ie the user sometimes gets \"lost\" and is unable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "to visualise the organisation of his notes. The ability to effectively organise notes is critical to meeting our use case."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The *Edit Modal* allows for a very fast editing process. The user types \"edit\", the modal opens. He can immediately make changes. He presses \"esc\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "the modal closes. This makes the process fast for users that use the keyboard."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The *Response Text* ensures the user does not get confused while using the app; ie this feature is crucial for ensuring ease of use, especially"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "in an app that discourages the use of the mouse in favour of the keyboard."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The *Suggestion Window* allows the heavy-lifting done by the back end of the application to be visualised meaningfully by the user in a list format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The *Web View* allows for the *Markdown* feature to be leveraged, and visualised to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** The interface of Notably is crucial for manifesting its core features (suggestions engine, markdown compiler, parser), and required a lot of"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "teamwork and communication with my collaborators, including an understanding of API programming, to be able to stitch together their features."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Much attention to detail is also present in the user interface"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "with regards to styling and the user interactions (e.g. pressing the down key and up key allows the user to seamlessly navigate to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "suggestions list and the command box)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** It was a challenge implementing certain UI enhancements (components such as the edit modal must listen to changes to be dynamically resized and updated)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "and therefore involved a deep understanding of the inner workings of JavaFx (e.g. observer pattern, MVC pattern,  FXML). Furthermore, no third parties were used to achieve"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "the UI functionality, which was a challenge."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** JavaFX 11 API: [https://openjfx.io/javadoc/11/]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** How to use Listeners: [https://code.makery.ch/blog/javafx-2-event-handlers-and-change-listeners/]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Updated the `Model` by creating a `ViewStateModel` that comprises of several other interfaces. These interfaces contain"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "the state for the View components (e.g. `Help Modal`, `Edit Modal`, `SideBar` etc)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dHemanshuGandhi\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dHemanshuGandhi\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Facilitated through GitHub using the branching, and PR workflow, and using issue tracker."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** UG Introduction, and UG description of Edit Command: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/502[502]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** Added new UiClassDiagram.png and added new use case for Editing Command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W17-2/main/pull/244[#244], https://github.com/AY1920S2-CS2103T-W17-2/main/issues/323[#323], amongst others."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dediting]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dview-diagram]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dedit-use]"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 86
    }
  },
  {
    "path": "docs/team/johannagwan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d Johanna - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Notably is a *note-taking desktop app*, optimized for those who *prefer to work with a Command Line Interface (CLI)*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). It aims to help NUS tech-savvy students"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "to get their notes taken down *faster than using traditional GUI apps*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Major enhancement*: *Suggestion Engine*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** What it does: `SuggestionEngine` actively gives users an updated list of suggestions of notes as the users key in their input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "Furthermore, it displays a response text to enable users to understand the meaning behind their inputted command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Justification: `SuggestionEngine` plays a pivotal role in providing a seamless user experience."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "This feature is curated for our target users (NUS tech-savvy students) who often have a large number of notes and thus"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "may find difficulty traversing all of their notes to get to a particular note. This is where `SuggestionEngine` comes in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "by giving a list of suggestions of the notes that the users want to open or delete, just by typing the first few characters of their intended note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** The `SuggestionEngine` also provides a command input line auto-fill feature. When the user presses the `↓` (down arrow) button to select a suggestion, followed by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "`Enter`, the command input line will be auto-filled with the suggestion."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** It displays response text and suggestions (if any) for all available valid commands in Notably. The implementation was"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "quite challenging as different commands require different implementation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Major enhancement*: *Search feature*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** What it does: The Search feature searches the occurrences of a keyword in all of the notes, and not just the currently"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "opened one. It can also search for partial or incomplete word of the note\u0027s content and count the number of times"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "the keyword appears in the note. It then displays the list of suggestions of notes to the users with the most relevant"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "search result at the top of the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Justification: Students often remember a certain keyword from their note but can\u0027t precisely remember where it is located."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The Search feature thus gives the users convenience to find the relevant note, as suggestions are sorted based on the keyword\u0027s highest number of occurrences."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "If the number of occurrences is the same, the suggestions listing will based on their respective positions in the hierarchical notes arrangement."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** The feature is complete as it traverses through all of the notes and can even search for incomplete words,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "hence giving the relevant suggestions to the user even before the user has finished typing. For instance,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "if the user types `search lect` while actually intending to find the word \"lecture\", Notably will still display the list of notes which"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "contain the word \"lecture\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** When the user presses the `↓` (down arrow) button to select the suggestion followed by `Enter`, the note chosen will immediately be opened."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "The command line input is also cleared after the user pressed `Enter` in order to not clutter the UI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003djohannagwan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Maintained the https://github.com/AY1920S2-CS2103T-W17-2/main/issues[issue tracker]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage significantly:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/428[#428],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/470[#470]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Wrote most parts of the README: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/51[#51]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Updated the Search and Auto-Suggestions feature in UG: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/461[#461],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/493[#493]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Updated the `SuggestionEngine` components in DG: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/484[#484]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Updated the Appendix-F for Manual Testing in DG: https://github.com/AY1920S2-CS2103T-W17-2/main/pull/509[#509]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/106[#106],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/127[#127],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/279[#279],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/291[#291],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-2/main/pull/432[#432]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/1[#1],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/2[#2],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/3[#3],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/4[#4],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/5[#5],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/6[#6],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/7[#7],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/8[#8],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/9[#9],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/10[#10],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/11[#11],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/12[#12],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/13[#13],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/14[#14],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/15[#15],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "https://github.com/johannagwan/ped/issues/16[#16]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsuggestions]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dresponsetext]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsugengine]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsugengineimpl]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecasesearch]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecaseopendelete]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dManualTesting]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "johannagwan": 120
    }
  },
  {
    "path": "docs/team/kevinputera.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d Kevin Putera - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Notably is for those who *prefer to use a desktop app for managing notes*. More importantly, Notably is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *Major enhancement*: Added *Notably\u0027s auto correction functionality*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** What it does: Allows Notably to understand mistyped commands from user, as long as it is within a certain configured threshold. This makes it possible for the user to type faster than before, as he/she does not need to worry about wrong spelling anymore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Justification: This feature improves user experience significantly, as it allows our users to type commands without worrying about wrong spelling any longer. This is really crucial, as Notably is a keyboard/CLI first note-taking application; most interactions are done via typing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** This enhancement calls for good abstraction. Due to the fact that this component is used the suggestions generation and command parsing aspects of Notably, I had to come up with an abstraction that minimize code duplication and at the same time is flexible for future improvements."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** In addition, this feature requires calculating https://en.wikipedia.org/wiki/Edit_distance[edit distance]. This shows that I am able to incorporate and create suitable wrappers around complex algorithms to be used in a Software Engineering project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Credits: The implementation of the https://en.wikipedia.org/wiki/Edit_distance[edit distance] algorithm is inspired by https://web.stanford.edu/class/cs124/lec/med.pdf."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *Major enhancement*: Wrote *Notably\u0027s Markdown to HTML compiler*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** What it does: Allows Notably to compile Markdown into HTML."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Justification: This feature improves user experience significantly, as it allows our users to format their notes using the Markdown syntax. This is really crucial, as Notably is a keyboard/CLI first note-taking application; GUI-based text formatting solution would not work well."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Highlights: This enhancement requires me to learn basic compilation techniques, such as tokenizing, parsing, and target code generation. Although Markdown is not a complex syntax, building a Markdown to HTML compiler following the techniques prove to be quite challenging."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Credits: The implementation of the compiler is inspired by https://github.github.com/gfm/#appendix-a-parsing-strategy."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkevinputera\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkevinputera\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Software architecture: Designed Notably\u0027s overall architecture. In addition, I held a meeting with my teammates to get everyone on the same page about Notably\u0027s overall architecture."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W17-2/main/pull/108[#108], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/116[#116], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/123[#123], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/134[#134], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/144[#144], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/150[#150], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/257[#257], https://github.com/AY1920S2-CS2103T-W17-2/main/pull/385[#385]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** Contributed to design discussions: https://github.com/AY1920S2-CS2103T-W17-2/main/issues/1[#1], https://github.com/AY1920S2-CS2103T-W17-2/main/issues/8[#8], https://github.com/AY1920S2-CS2103T-W17-2/main/issues/9[#9]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** Integrated Codecov (code coverage analysis tool) into Notably\u0027s development workflow (https://github.com/AY1920S2-CS2103T-W17-2/main/pull/386[#386])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "*** Integrated Netlify into Notably\u0027s development workflow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcorrection]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmarkdown]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003darchitecture]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcorrectiondesign]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcorrectionimplementation]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcompilerdesign]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcompilerimplementation]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 69
    }
  },
  {
    "path": "docs/team/ljiazh3ng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d Lua Jia Zheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "Notably is for those who *prefer to use a desktop app for managing contacts*. More importantly, Notably is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* *Major enhancement*: Added Parser and Command of the system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** What it does: Integrate the features implemented by my team mate to one system and make sense of the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Justification: This enhancement improve the user experience and is crucial to detect and prevent any unintended changes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Highlights: This enhancement allow the user experience to be more intuitive and is designed similar to the terminal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "that we are familiar with. It required an in-depth analysis of the existing design alternatives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "The implementation too was challenging as it required multiple new predicate and utility classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* *Major enhancement*: Path data structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** What it does: Allow the user different form of traversal methods (Either relative to the current directory or to the root)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Justification: This feature boosts the productivity of the user significantly because user can type less to traverse into a block."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "For example, the user can type `o cs2103T/tutorials/tutorial2` to open 3 nested blocks rather than typing 3 commands ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Highlights: This enhancement allow the user experience to be more intuitive and is designed similar to the terminal"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "that we are familiar with. It required an in-depth analysis of the existing design alternatives."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Add optional Prefix to enhance user experience."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Tested the integrated features implemented by my group members."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Add Logger to parser and Command to help future development."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dljiazh3ng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dljiazh3ng\u0026tabRepo\u003dAY1920S2-CS2103T-W17-2%2Fmain%5Bmaster%5D[Functional code]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Release Notably `v1.4` on GitHub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Rewrote complex test cases to improve test coverage significantly https://github.com/AY1920S2-CS2103T-W17-2/main/pull/291[#291]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Added commonly used methods to Parser\u0027s utility class. https://github.com/AY1920S2-CS2103T-W17-2/main/pull/181[#181]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Help setup the draft for User Guide https://github.com/AY1920S2-CS2103T-W17-2/main/pull/11[#11]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Updated User Guide and Developer Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/AY1920S2-CS2103T-F09-4/main/issues/210[#210], https://github.com/AY1920S2-CS2103T-F09-4/main/issues/212[#212], https://github.com/AY1920S2-CS2103T-F09-4/main/issues/207[#07] )"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "*** Some parts of the Path feature I added was adopted by several other class mates https://github.com/AY1920S2-CS2103T-W16-4/main/pull/65[#65]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpaths]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dopen]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dparser]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpaths]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dScopeUser]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dManualTesting]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 78
    }
  },
  {
    "path": "docs/team/portfolio_template.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d Firzan Armani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003d\u003d PROJECT: Notably"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Notably is for those who *prefer to use a desktop app for managing contacts*. More importantly, Notably is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Notably can get your notes taken down faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 3,
      "-": 69
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Create a `RemarkCommandParser` class in the `com.notably.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Create a new `Remark` in `com.notably.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the VIEW"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`com.notably.view.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003d\u003d Finalizing the VIEW"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the VIEW."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 3,
      "kevinputera": 6,
      "-": 416
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "The `address` field in `Person` is actually an instance of the `com.notably.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "user input i.e., somewhere in the VIEW component, and then trace through how the execution proceeds through the VIEW component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the VIEW transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "control to the Logic component. According to the sequence diagram, the VIEW component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "`com.notably.view.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 3,
      "kevinputera": 1,
      "-": 254
    }
  },
  {
    "path": "src/main/java/com/notably/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/notably/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/notably/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.storage.BlockStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.storage.JsonBlockStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.view.View;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.view.ViewManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected View view;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Notably ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockStorage blockStorage \u003d new JsonBlockStorage(userPrefs.getBlockDataFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storage \u003d new StorageManager(blockStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        view \u003d new ViewManager(logic, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s block data and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * The data from the sample block data will be used instead if {@code storage}\u0027s block data is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * or an empty {@code BlockTree} will be used instead if errors occur when reading {@code storage}\u0027s block data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefModel userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModel \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Optional\u003cBlockModel\u003e blockModelOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            blockModelOptional \u003d storage.readBlockModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (!blockModelOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BlockTree\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initialData \u003d blockModelOptional.orElseGet(SampleDataUtil::getSampleBlockModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BlockTree\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initialData \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BlockTree\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initialData \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.resetData(initialData);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new ModelManager(blockModel, suggestionModel, viewStateModel , userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    protected UserPrefModel initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Optional\u003cUserPrefModel\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefModelImpl());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initializedPrefs \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BlockTree\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            initializedPrefs \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.info(\"Starting Notably \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        view.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Notably ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefModel());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 6,
      "kevinputera": 23,
      "-": 126,
      "firzanarmani": 38
    }
  },
  {
    "path": "src/main/java/com/notably/commons/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/notably/commons/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 560;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "kevinputera": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/com/notably/commons/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.HelpWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Manages useful information that is to be displayed to the user in the {@link HelpWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class Help {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static String commandSummaryMarkdown \u003d \"### Command Summary\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"\\n\" + \"### View help:\\n  - help\\n\\n### Exit the program:\\n  - exit\\n\\n### Create a new note:\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"\\n  - new -t TITLE [-o]\\n\\n### Open an existing note:\\n  - open [-t] AbsolutePath/Relativepath\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"TITLE\\n\\n### Edit an existing note:\\n  - edit\\n\\n### Delete a note:\\n  - delete [-t] \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"AbsolutePath/Relativepath\\n\\n### Find a note based on certain keywords: \\n  - search\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \" [-s] KEYWORD\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public static String getCommandSummaryMarkdown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return Help.commandSummaryMarkdown;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 19
    }
  },
  {
    "path": "src/main/java/com/notably/commons/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final String LOG_FILE \u003d \"notably.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/com/notably/commons/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/Compiler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * A Markdown to HTML compiler."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Compiler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Compiler.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Compiles a Markdown string to an HTML string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param markdown Markdown string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return HTML string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static String compile(String markdown) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        logger.fine(String.format(\"Compiling the following Markdown into HTML:\\n%s\\n\", markdown));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Parser.parse(markdown).toHtml();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 25
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.block.DocumentBlock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * A Markdown to HTML parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a Markdown AST from a Markdown string."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param input Input markdown string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Markdown AST"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static DocumentBlock parse(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        DocumentBlock documentBlock \u003d new DocumentBlock();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        input.lines().forEach(line -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            documentBlock.next(line);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return documentBlock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 25
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/Block.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Read more: https://github.github.com/gfm/#appendix-a-parsing-strategy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public abstract class Block {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private List\u003cBlock\u003e children;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private boolean open;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates an open {@link Block}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Block() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a {@link Block} with the specified open flag."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param open Open flag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Block(boolean open) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.open \u003d open;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        children \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Accepts the next input line, which might cause:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *   \u003cli\u003eOne or more children is/are closed, or\u003c/li\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *   \u003cli\u003eA children {@link Block} is constructed and added to the AST, or both.\u003c/li\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Next input line"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a {@link Block} is inserted to the AST"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public abstract boolean next(String line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Converts the AST, starting from this node, to an HTML string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return HTML string representation of the AST starting from this node"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public abstract String toHtml();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets a list of children {@link Block}s."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return List of children {@link Block}s"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cBlock\u003e getChildren() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return children;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Adds a {@link Block} to the AST, as this block\u0027s child."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param child {@link Block} to be added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void addChild(Block child) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        children.add(child);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not this block is open."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not this block is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean isOpen() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return open;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Closes the block."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        open \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof Block)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Block another \u003d (Block) object;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Objects.equals(children, another.children);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 95
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/BlockUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Utilities for operations regarding {@link Block}s."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class BlockUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the last element in a {@link List}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param items Input list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Last element"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static \u003cT\u003e T getLast(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return items.get(items.size() - 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 19
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/DocumentBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.exceptions.InvalidLineException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a document (root) node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class DocumentBlock extends Block {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (getChildren().isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (canCreateChildBlock(line)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                addChild(createChildBlock(line));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Block lastChild \u003d BlockUtil.getLast(getChildren());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.isOpen()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (canCreateChildBlock(line)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                addChild(createChildBlock(line));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.next(line)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (canCreateChildBlock(line)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                addChild(createChildBlock(line));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a child block can be created from a supplied line."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a child block can be created"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private boolean canCreateChildBlock(String line) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return HeaderBlock.isHeader(line)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                || ListBlock.isList(line)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                || ParagraphBlock.isParagraph(line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a child block from a supplied line."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Child block"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private Block createChildBlock(String line) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!canCreateChildBlock(line)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"Cannot create child block from \\\"%s\\\"\", line));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (HeaderBlock.isHeader(line)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return HeaderBlock.fromLine(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (ListBlock.isList(line)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return ListBlock.fromLine(line);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return ParagraphBlock.fromLine(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format(\"\u003chtml\u003e\u003cbody\u003e%s\u003c/body\u003e\u003c/html\u003e\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getChildren().stream().map(Block::toHtml).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof DocumentBlock)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(object);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 89
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/HeaderBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.exceptions.InvalidLineException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a header node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class HeaderBlock extends Block {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Pattern PATTERN \u003d Pattern.compile(\"^ *(?\u003chash\u003e#{1,6}) *(?\u003ctext\u003e(?\u003c\u003d +).*)?$\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final int level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a header block with the specified level and text."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param level Header level, i.e. 1 to 6"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param text Header content text"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public HeaderBlock(int level, String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(text);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a header block can be created from a supplied line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a header block can be created"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isHeader(String line) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return PATTERN.matcher(line).lookingAt();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a header block from a supplied line."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The created header block"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws InvalidLineException If no header block can be constructed from the supplied line"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static HeaderBlock fromLine(String line) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher matcher \u003d PATTERN.matcher(line);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"\\\"%s\\\" is not a valid header\", line));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int level \u003d matcher.group(\"hash\").length();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String text \u003d matcher.group(\"text\").trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (text \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            text \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new HeaderBlock(level, text);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws UnsupportedOperationException A header block cannot accept a next line."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format(\"\u003ch%1$d\u003e%2$s\u003c/h%1$d\u003e\", level, text);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof HeaderBlock)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        HeaderBlock another \u003d (HeaderBlock) object;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(another)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 level \u003d\u003d another.level"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 Objects.equals(text, another.text);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 96
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/ListBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.exceptions.InvalidLineException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a list node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ListBlock extends Block {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a list block can be created from a supplied line."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a list block can be created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isList(String line) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return ListItemBlock.isListItem(line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a list block from a supplied line."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The created list block"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws InvalidLineException If no list block can be constructed from the supplied line"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static ListBlock fromLine(String line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!isList(line)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"\\\"%s\\\" is not a valid list\", line));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ListBlock list \u003d new ListBlock();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ListItemBlock listItem \u003d ListItemBlock.fromLine(line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        list.addChild(listItem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Block lastChild \u003d BlockUtil.getLast(getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.isOpen()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (!isList(line)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            ListItemBlock listItem \u003d ListItemBlock.fromLine(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            addChild(listItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.next(line)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (!isList(line)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            ListItemBlock listItem \u003d ListItemBlock.fromLine(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            addChild(listItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format(\"\u003cul\u003e%s\u003c/ul\u003e\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getChildren().stream().map(Block::toHtml).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof ListBlock)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(object);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 89
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/ListItemBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.exceptions.InvalidLineException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a list item node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ListItemBlock extends Block {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Pattern CREATE_PATTERN \u003d Pattern.compile(\"^(?\u003cleader\u003e *- *)(?\u003ctext\u003e(?\u003c\u003d +).*)?$\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Pattern NEXT_PATTERN \u003d Pattern.compile(\"^(?\u003cleader\u003e *)(?\u003ctext\u003e.*)$\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final int indentation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a list item block with the specified indentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param indentation List item indentation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ListItemBlock(int indentation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.indentation \u003d indentation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a list item block can be created from a supplied line."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a list item block can be created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isListItem(String line) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return CREATE_PATTERN.matcher(line).lookingAt();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a list item block from a supplied line."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The created list item block"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws InvalidLineException If no list item block can be constructed from the supplied line"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static ListItemBlock fromLine(String line) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher matcher \u003d CREATE_PATTERN.matcher(line);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"\\\"%s\\\" is not a valid list item\", line));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int indentation \u003d matcher.group(\"leader\").length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String text \u003d matcher.group(\"text\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ListItemBlock listItem \u003d new ListItemBlock(indentation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (canCreateChildBlock(text)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            listItem.addChild(createChildBlock(text));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return listItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a child block can be created from a supplied line."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a child block can be created"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static boolean canCreateChildBlock(String line) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return HeaderBlock.isHeader(line)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                || ListBlock.isList(line)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                || TextBlock.isText(line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a child block from a supplied line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Child block"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Block createChildBlock(String line) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!canCreateChildBlock(line)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"Cannot create child block from \\\"%s\\\"\", line));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (HeaderBlock.isHeader(line)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return HeaderBlock.fromLine(line);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (ListBlock.isList(line)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return ListBlock.fromLine(line);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return TextBlock.fromLine(line);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher matcher \u003d NEXT_PATTERN.matcher(line);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int nextIndentation \u003d matcher.group(\"leader\").length();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (nextIndentation \u003c indentation) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String text \u003d padSpaceLeft(matcher.group(\"text\"), nextIndentation - indentation);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Block lastChild \u003d BlockUtil.getLast(getChildren());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.isOpen()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (canCreateChildBlock(text)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                addChild(createChildBlock(text));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!lastChild.next(text)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (canCreateChildBlock(text)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                addChild(createChildBlock(text));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private String padSpaceLeft(String text, int count) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return \" \".repeat(count) + text;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        sb.append(\"\u003cli\u003e\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int i \u003d 0; i \u003c getChildren().size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            sb.append(getChildren().get(i).toHtml());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (i + 1 \u003c getChildren().size()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \u0026\u0026 (getChildren().get(i) instanceof TextBlock)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \u0026\u0026 (getChildren().get(i + 1) instanceof TextBlock)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                sb.append(\"\u003cbr\u003e\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        sb.append(\"\u003c/li\u003e\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 154
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/ParagraphBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.parser.exceptions.InvalidLineException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a paragraph node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ParagraphBlock extends Block {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a paragraph block can be created from a supplied line."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a paragraph block can be created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isParagraph(String line) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return TextBlock.isText(line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a paragraph block can be created from a supplied line."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a paragraph block can be created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static ParagraphBlock fromLine(String line) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!isParagraph(line)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new InvalidLineException(String.format(\"\\\"%s\\\" is not a valid paragraph\", line));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ParagraphBlock paragraph \u003d new ParagraphBlock();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        TextBlock text \u003d TextBlock.fromLine(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        paragraph.addChild(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return paragraph;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!isParagraph(line)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        TextBlock text \u003d TextBlock.fromLine(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        getChildren().add(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format(\"\u003cp\u003e%s\u003c/p\u003e\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getChildren().stream().map(Block::toHtml).collect(Collectors.joining(\"\u003cbr\u003e\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof ParagraphBlock)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(object);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 71
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/block/TextBlock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a text node in a Markdown Abstract Syntax Tree (AST)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class TextBlock extends Block {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    final String text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a text block with the specified text string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param text Text string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TextBlock(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(text);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a text block can be created from a supplied line."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a text block can be created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isText(String line) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return !line.isBlank()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 !HeaderBlock.isHeader(line)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 !ListBlock.isList(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Checks whether or not a text block can be created from a supplied line."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param line Input line"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Whether or not a text block can be created"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static TextBlock fromLine(String line) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new TextBlock(line.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws UnsupportedOperationException A text block cannot accept a next line."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean next(String line) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toHtml() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof TextBlock)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        TextBlock another \u003d (TextBlock) object;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(another)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 Objects.equals(text, another.text);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 76
    }
  },
  {
    "path": "src/main/java/com/notably/commons/compiler/parser/exceptions/InvalidLineException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * A {@link RuntimeException} thrown when an invalid line is encountered during Markdown parsing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class InvalidLineException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public InvalidLineException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public InvalidLineException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 15
    }
  },
  {
    "path": "src/main/java/com/notably/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/notably/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/notably/commons/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/notably/commons/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/notably/commons/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/notably/commons/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final Prefix PREFIX_SEARCH \u003d new Prefix(\"-s\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final Prefix PREFIX_JUMP \u003d new Prefix(\"-o\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "-": 9,
      "ljiazh3ng": 3
    }
  },
  {
    "path": "src/main/java/com/notably/commons/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.RelativePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_PATH \u003d \"The input \\\"%s\\\" is not valid a path. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"Please provide a valid Path\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Returns either a AbsolutePath or RelativePath base on userInput."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static AbsolutePath createAbsolutePath(String text, AbsolutePath currentDirectory) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(currentDirectory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (AbsolutePath.isValidAbsolutePath(text)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return AbsolutePath.fromString(text);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (RelativePath.isValidRelativePath(text)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                return RelativePath.fromString(text).toAbsolutePath(currentDirectory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            } catch (InvalidPathException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                throw new ParseException(String.format(ERROR_PATH, text));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        throw new ParseException(String.format(ERROR_PATH, text));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 10,
      "-": 16,
      "ljiazh3ng": 20
    }
  },
  {
    "path": "src/main/java/com/notably/commons/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/notably/commons/path/AbsolutePath.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents the Path to a Block, starting from the Root node."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AbsolutePath implements Path, Comparable\u003cAbsolutePath\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String INVALID_ABSOLUTE_PATH \u003d \"Invalid absolute path\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\/|(\\\\/\" + Title.VALIDATION_REGEX + \")+\\\\/?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final List\u003cString\u003e components;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private AbsolutePath(String absolutePathString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absolutePathString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj : absolutePathString.split(\"/\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (!obj.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                this.components.add(obj.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public AbsolutePath(List\u003cString\u003e absolutePathList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absolutePathList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d absolutePathList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Check if a supplied string is a ValidAbsolutePath"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePathString"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isValidAbsolutePath(String absolutePathString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absolutePathString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return absolutePathString.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Creates an absolute path from a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePathString used to create an absolutePath."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return Absolute Path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromString(String absolutePathString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absolutePathString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!isValidAbsolutePath(absolutePathString)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new InvalidPathException(INVALID_ABSOLUTE_PATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AbsolutePath(absolutePathString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Creates an absolute path from a list of components."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absoluteComponents used to create an absolutePath."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return Absolute Path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromComponents(List\u003cString\u003e absoluteComponents) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absoluteComponents);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AbsolutePath(absoluteComponents);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert from relative path to absolute path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePath used to convert to absolute path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted AbsolutePath."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromRelativePath(RelativePath relativePath,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(relativePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(currentWorkingPath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e relativeComponents \u003d relativePath.getComponents();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e base \u003d currentWorkingPath.getComponents();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new AbsolutePath(PathUtil.normaliseRelativeComponents(base, relativeComponents));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert Absolute path to Relative path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted RelativePath"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public RelativePath toRelativePath(AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(currentWorkingPath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return RelativePath.fromAbsolutePath(this, currentWorkingPath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cString\u003e getComponents() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return this.components;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getStringRepresentation() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return \"/\" + String.join(\"/\", this.components);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int compareTo(AbsolutePath path) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (components.size() !\u003d path.components.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return components.size() - path.components.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (i \u003c components.size() \u0026\u0026 i \u003c path.components.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (!components.get(i).equalsIgnoreCase(path.components.get(i))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                return components.get(i).compareToIgnoreCase(path.components.get(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!(object instanceof AbsolutePath)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath another \u003d (AbsolutePath) object;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return compareTo(another) \u003d\u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return Objects.hash(this.components);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return getStringRepresentation();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 66,
      "ljiazh3ng": 78
    }
  },
  {
    "path": "src/main/java/com/notably/commons/path/Path.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a path to a {@link Block}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface Path {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the string components of a path."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For example, a path /a/b/c have the components [\"a\", \"b\", \"c\"]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Components of a path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    List\u003cString\u003e getComponents();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the string representation of a path."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For example, \"/a/b/c\" is a string representation of a path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return String representation of a path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    String getStringRepresentation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 24
    }
  },
  {
    "path": "src/main/java/com/notably/commons/path/PathUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Utility class for path operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class PathUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Normalises the components of a {@link RelativePath}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For instance, the path \"./CS2103/../CS2103\" is normalised as \"CS2103\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param base Base of normalisation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param components Components to normalise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Normalised components"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static List\u003cString\u003e normaliseRelativeComponents(List\u003cString\u003e base, List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(base);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(components);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e normalised \u003d new ArrayList\u003c\u003e(base);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (String component : components) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (component.equals(\"..\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                if (normalised.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    throw new InvalidPathException(\"Invalid relative path components\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                normalised.remove(normalised.size() - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            } else if (!component.equals(\".\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                normalised.add(component);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return normalised;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Normalises the components of a {@link RelativePath}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For instance, the path \"./CS2103/../CS2103\" is normalised as \"CS2103\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param components Components to normalise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Normalised components"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static List\u003cString\u003e normaliseRelativeComponents(List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(components);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return normaliseRelativeComponents(List.of(), components);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 52
    }
  },
  {
    "path": "src/main/java/com/notably/commons/path/RelativePath.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents a path to the block relative to the current directory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class RelativePath implements Path, Comparable\u003cRelativePath\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String INVALID_RELATIVE_PATH \u003d \"Invalid relative path\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            \"(\\\\.|\\\\..|\" + Title.VALIDATION_REGEX + \")(\\\\/(\\\\.|\\\\..|\" + Title.VALIDATION_REGEX + \"))*\\\\/?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final List\u003cString\u003e components;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private RelativePath(String relativePathString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(relativePathString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj : relativePathString.split(\"/\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (!obj.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                this.components.add(obj.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private RelativePath(List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(components);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d components;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Check if string is a valid relative path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePathString String used to check validity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return returns true if String is a valid relative Path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isValidRelativePath(String relativePathString) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(relativePathString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return relativePathString.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Instantiate a RelativePath object if the string is valid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePathString used to create RelativePath."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted RelativePath object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static RelativePath fromString(String relativePathString) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(relativePathString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!isValidRelativePath(relativePathString)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new InvalidPathException(\"Not a relative path\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new RelativePath(relativePathString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Instantiate a relativePath from components."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param components to create a relativePath."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return a relativePath object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static RelativePath fromComponents(List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(components);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new RelativePath(components);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert from absolute path to relative path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePath to convert to relative path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted relative path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static RelativePath fromAbsolutePath(AbsolutePath absolutePath,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(absolutePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(currentWorkingPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        int sizeOfCurrent \u003d currentWorkingPath.getComponents().size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        int sizeOfAbsolute \u003d absolutePath.getComponents().size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e componentsToRelative;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (sizeOfCurrent \u003e sizeOfAbsolute) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            componentsToRelative \u003d Collections.nCopies(sizeOfAbsolute - sizeOfCurrent, \"..\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            componentsToRelative \u003d absolutePath.getComponents().subList(sizeOfCurrent, sizeOfAbsolute);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return fromComponents(componentsToRelative);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert relative path to absolute path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the absolute path of the relative path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public AbsolutePath toAbsolutePath(AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(currentWorkingPath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return AbsolutePath.fromRelativePath(this, currentWorkingPath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cString\u003e getComponents() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return this.components;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getStringRepresentation() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.join(\"/\", this.components);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int compareTo(RelativePath path) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e components \u003d PathUtil.normaliseRelativeComponents(this.components);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e pathComponents \u003d PathUtil.normaliseRelativeComponents(path.components);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (components.size() !\u003d pathComponents.size()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return components.size() - pathComponents.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (i \u003c components.size() \u0026\u0026 i \u003c pathComponents.size()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (!components.get(i).equalsIgnoreCase(pathComponents.get(i))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                return components.get(i).compareToIgnoreCase(pathComponents.get(i));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!(object instanceof RelativePath)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        RelativePath another \u003d (RelativePath) object;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return compareTo(another) \u003d\u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return Objects.hash(this.components);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return getStringRepresentation();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 68,
      "ljiazh3ng": 88
    }
  },
  {
    "path": "src/main/java/com/notably/commons/path/exceptions/InvalidPathException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * {@link RuntimeException} to be thrown when an invalid representation of a path is supplied during"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * {@link Path} creation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class InvalidPathException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public InvalidPathException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 11,
      "ljiazh3ng": 3
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/notably/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.exceptions.EditBlockBodyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Edit the body of the current opened block."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param bodyContent The content of the body entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void editCurrentBlockBody(String bodyContent) throws EditBlockBodyException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the path of the block data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Path getBlockDataFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 25,
      "firzanarmani": 3,
      "ljiazh3ng": 9
    }
  },
  {
    "path": "src/main/java/com/notably/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.exceptions.EditBlockBodyException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.NotablyParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.suggestion.SuggestionEngine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.exceptions.CannotModifyRootException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final NotablyParser notablyParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final SuggestionEngine suggestionEngine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        notablyParser \u003d new NotablyParser(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"User inputted \u0027%s\u0027\", commandText));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            List\u003c? extends Command\u003e commands \u003d notablyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            for (Command command : commands) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            storage.saveBlockModel(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            model.setResponseText(FILE_OPS_ERROR_MESSAGE + ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (CommandException | ParseException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            model.setResponseText(ex.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void editCurrentBlockBody(String bodyContent) throws EditBlockBodyException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(bodyContent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Body body \u003d new Body(bodyContent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Throws exception if current block is a Root."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            model.updateCurrentlyOpenBlockBody(body);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (CannotModifyRootException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new EditBlockBodyException(ex.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path getBlockDataFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return model.getBlockDataFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 10,
      "-": 36,
      "firzanarmani": 8,
      "ljiazh3ng": 33
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public abstract void execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 15,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.RelativePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.exceptions.CannotModifyRootException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents a command that deletes a block."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Path targetPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public DeleteCommand(Path targetPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.targetPath \u003d targetPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (this.targetPath instanceof RelativePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            RelativePath toConvert \u003d (RelativePath) this.targetPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            this.targetPath \u003d toConvert.toAbsolutePath(notablyModel.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            notablyModel.removeBlock((AbsolutePath) this.targetPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (NoSuchBlockException | CannotModifyRootException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 2,
      "kevinputera": 4,
      "-": 13,
      "ljiazh3ng": 21
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represent a command that edits the block\u0027s body."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_ROOT_MODIFICATION \u003d \"Editing the root block is forbidden.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final AbsolutePath ROOT \u003d AbsolutePath.fromString(\"/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Edit the Block body of the current directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param notablyModel used to access the tree structure."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Executing EditCommand\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (notablyModel.getCurrentlyOpenPath().equals(ROOT)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(\"Editing the root\u0027s body is forbidden\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new CommandException(ERROR_ROOT_MODIFICATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        notablyModel.setBlockEditable(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Edit Modal enabled\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "ljiazh3ng": 36
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represent a command that exits the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Executing ExitCommand\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 26
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represent a command that enable/disables the help modal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Executing HelpCommand\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        notablyModel.setHelpOpen(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Help WindowEnabled\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "ljiazh3ng": 23
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/NewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.exceptions.DuplicateBlockException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represent a command used to add a new block."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class NewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Block toAdd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public NewCommand(Block block) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.toAdd \u003d block;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Add a new block to the tree structure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param notablyModel used to access the tree structure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws CommandException when block of the same Title is detected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Executing NewCommand\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            notablyModel.addBlockToCurrentPath(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (DuplicateBlockException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(\"Duplicate block detected.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"Block titled \u0027%s\u0027 successfully created\", this.toAdd.getTitle().getText()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "ljiazh3ng": 41
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents a command that opens a path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private AbsolutePath path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public OpenCommand(AbsolutePath path) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Open block path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param notablyModel used to open path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute(Model notablyModel) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Executing OpenCommand\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            notablyModel.setCurrentlyOpenBlock(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (NoSuchBlockException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"Current Open directory set to \u0027%s\u0027\", this.path));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "ljiazh3ng": 40
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 17,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/AbsolutePathCorrectionEngine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.EditDistanceCalculator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.LevenshteinDistanceCalculator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a correction engine that works on {@link AbsolutePath}s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AbsolutePathCorrectionEngine implements CorrectionEngine\u003cAbsolutePath\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AbsolutePathCorrectionEngine.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final EditDistanceCalculator editDistanceCalculator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionEngineParameters parameters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates an {@link AbsolutePathCorrectionEngine}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param model App\u0027s model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param parameters Parameters for the correction engine"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public AbsolutePathCorrectionEngine(Model model, CorrectionEngineParameters parameters) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(new LevenshteinDistanceCalculator(false), model, parameters);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates an {@link AbsolutePathCorrectionEngine}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param editDistanceCalculator Edit distance calculator instance"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param model App\u0027s model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param parameters Parameters for the correction engine"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public AbsolutePathCorrectionEngine(EditDistanceCalculator editDistanceCalculator, Model model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            CorrectionEngineParameters parameters) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(editDistanceCalculator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(parameters);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.editDistanceCalculator \u003d editDistanceCalculator;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Corrects a given path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param uncorrected An uncorrected path"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Result of the correction"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult\u003cAbsolutePath\u003e correct(AbsolutePath uncorrected) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(uncorrected);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d getPossiblePaths();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int closestDistance \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (AbsolutePath possiblePath : possiblePaths) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int distance \u003d calculatePathDistance(uncorrected, possiblePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (distance \u003c closestDistance) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                closestDistance \u003d distance;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cAbsolutePath\u003e correctedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (AbsolutePath possiblePath : possiblePaths) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int distance \u003d calculatePathDistance(uncorrected, possiblePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (distance \u003d\u003d closestDistance) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                correctedItems.add(possiblePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (closestDistance \u003e parameters.getDistanceThreshold()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            logger.info(String.format(\"Failed to correct \\\"%s\\\".\", uncorrected));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.FAILED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctedItems.size() \u003d\u003d 1 \u0026\u0026 correctedItems.get(0).equals(uncorrected)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            logger.info(String.format(\"\\\"%s\\\" is already valid, left unchanged.\", uncorrected));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.UNCHANGED, correctedItems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        logger.info(String.format(\"Corrected \\\"%s\\\" to %s.\", uncorrected, correctedItems));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new CorrectionResult\u003c\u003e(CorrectionStatus.CORRECTED, correctedItems);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Generates all possible paths from the app\u0027s {@link BlockTree}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return List of all possible paths"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private List\u003cAbsolutePath\u003e getPossiblePaths() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Queue\u003cAbsolutePath\u003e pathQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        pathQueue.offer(AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (!pathQueue.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath currentPath \u003d pathQueue.poll();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            List\u003cBlockTreeItem\u003e childrenBlocks \u003d model.getBlockTree().get(currentPath).getBlockChildren();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            List\u003cAbsolutePath\u003e childrenPaths \u003d childrenBlocks"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .map(item -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        List\u003cString\u003e combinedComponents \u003d new ArrayList\u003c\u003e(currentPath.getComponents());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        combinedComponents.add(item.getTitle().getText());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        return AbsolutePath.fromComponents(combinedComponents);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            pathQueue.addAll(childrenPaths);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            possiblePaths.add(currentPath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return possiblePaths;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculate the edit distance between two {@link AbsolutePath}s."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param input Input {@link AbsolutePath}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param reference Reference {@link AbsolutePath}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Edit distance between {@code input} and {@code reference}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int calculatePathDistance(AbsolutePath input, AbsolutePath reference) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(input);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(reference);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e inputComponents \u003d input.getComponents();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e referenceComponents \u003d reference.getComponents();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // Calculate the cumulative distance between the two paths component-by-component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int distance \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (i \u003c inputComponents.size() \u0026\u0026 i \u003c referenceComponents.size()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            String inputComponent \u003d inputComponents.get(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            String referenceComponent \u003d referenceComponents.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (parameters.isForwardMatching()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \u0026\u0026 i \u003d\u003d inputComponents.size() - 1"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \u0026\u0026 inputComponent.length() \u003c\u003d referenceComponent.length()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                distance +\u003d CorrectionEngineUtil.calculateForwardMatchingDistance(editDistanceCalculator,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        inputComponent, referenceComponent, parameters.getForwardMatchingThreshold());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                distance +\u003d editDistanceCalculator.calculateDistance(inputComponent, referenceComponent);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // If one path is longer than another, increase cumulative distance by the size of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // each extra component\u0027s length."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (i \u003c inputComponents.size()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance +\u003d inputComponents.get(i).length();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        while (i \u003c referenceComponents.size()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance +\u003d referenceComponents.get(i).length();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return distance;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 177
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionEngine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * API for a correction engine."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface CorrectionEngine\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Corrects a given item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param uncorrected Uncorrected input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Result of the correction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    CorrectionResult\u003cT\u003e correct(T uncorrected);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 14
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionEngineParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Parameters container for the {@link CorrectionEngine} implementation classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class CorrectionEngineParameters {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final int DEFAULT_DISTANCE_THRESHOLD \u003d 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final boolean DEFAULT_FORWARD_MATCHING \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final int DEFAULT_FORWARD_MATCHING_THRESHOLD \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int distanceThreshold \u003d DEFAULT_DISTANCE_THRESHOLD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private boolean forwardMatching \u003d DEFAULT_FORWARD_MATCHING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int forwardMatchingThreshold \u003d DEFAULT_FORWARD_MATCHING_THRESHOLD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int getDistanceThreshold() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return distanceThreshold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionEngineParameters setDistanceThreshold(int distanceThreshold) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (distanceThreshold \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"distanceThreshold\\\" cannot be less than zero\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.distanceThreshold \u003d distanceThreshold;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean isForwardMatching() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return forwardMatching;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionEngineParameters setForwardMatching(boolean forwardMatching) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.forwardMatching \u003d forwardMatching;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int getForwardMatchingThreshold() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return forwardMatchingThreshold;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionEngineParameters setForwardMatchingThreshold(int forwardMatchingThreshold) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (forwardMatchingThreshold \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"forwardMatchingThreshold\\\" cannot be less than zero\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.forwardMatchingThreshold \u003d forwardMatchingThreshold;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 50
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionEngineUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.EditDistanceCalculator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Utility class for {@link CorrectionEngine} implementations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class CorrectionEngineUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the forward matching distance between to {@link String}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param editDistanceCalculator Edit distance calculator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param input Input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param reference Reference string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param forwardMatchingThreshold Threshold for forward matching"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Forward matching distance between the two components"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static int calculateForwardMatchingDistance(EditDistanceCalculator editDistanceCalculator,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            String input, String reference, int forwardMatchingThreshold) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(reference);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (input.length() \u003e reference.length()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"input\\\" cannot be longer than \\\"reference\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (forwardMatchingThreshold \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"forwardMatchingThreshold\\\" cannot be less than zero\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (input.length() \u003c forwardMatchingThreshold) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (reference.toLowerCase().startsWith(input.toLowerCase())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return editDistanceCalculator.calculateDistance(input, reference);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int forwardMatchingDistance \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int stopIndex \u003d 0; stopIndex \u003c\u003d reference.length(); stopIndex++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int currentForwardMatchingDistance \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    editDistanceCalculator.calculateDistance(input, reference.substring(0, stopIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (currentForwardMatchingDistance \u003c forwardMatchingDistance) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                forwardMatchingDistance \u003d currentForwardMatchingDistance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return forwardMatchingDistance;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 52
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents the result of a correction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class CorrectionResult\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionStatus correctionStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final List\u003cT\u003e correctedItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a correction result without any corrected item."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctionStatus Status of the result"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult(CorrectionStatus correctionStatus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(correctionStatus, List.of());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a correction result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctionStatus Status of the result"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctedItems List of corrected items"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult(CorrectionStatus correctionStatus, List\u003cT\u003e correctedItems) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(correctionStatus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(correctedItems);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.correctionStatus \u003d correctionStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.correctedItems \u003d correctedItems;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the status of the correction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Status of the correction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionStatus getCorrectionStatus() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return correctionStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the list of corrected items."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return List of corrected items"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cT\u003e getCorrectedItems() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return correctedItems;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof CorrectionResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003c?\u003e another \u003d (CorrectionResult\u003c?\u003e) object;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Objects.equals(correctionStatus, another.correctionStatus)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 Objects.equals(new HashSet\u003c\u003e(correctedItems), new HashSet\u003c\u003e(another.correctedItems));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Objects.hash(correctionStatus, correctedItems);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 71
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents the status of a correction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public enum CorrectionStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    UNCHANGED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    CORRECTED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    FAILED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 10
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/StringCorrectionEngine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.EditDistanceCalculator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.LevenshteinDistanceCalculator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a correction engine that works on {@link String}s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class StringCorrectionEngine implements CorrectionEngine\u003cString\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StringCorrectionEngine.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final EditDistanceCalculator editDistanceCalculator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final List\u003cString\u003e options;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionEngineParameters parameters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a {@link StringCorrectionEngine}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param options Correction options"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param parameters Parameters for the correction engine"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public StringCorrectionEngine(List\u003cString\u003e options, CorrectionEngineParameters parameters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(new LevenshteinDistanceCalculator(false), options, parameters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a {@link StringCorrectionEngine}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param editDistanceCalculator Edit distance calculator instance"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param options Correction options"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param parameters Parameters for the correction engine"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public StringCorrectionEngine(EditDistanceCalculator editDistanceCalculator, List\u003cString\u003e options,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            CorrectionEngineParameters parameters) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(editDistanceCalculator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(options);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(parameters);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (options.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"options\\\" must contain at least one element\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.editDistanceCalculator \u003d editDistanceCalculator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Corrects a given string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param uncorrected Uncorrected string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Result of the correction"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult\u003cString\u003e correct(String uncorrected) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(uncorrected);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int closestDistance \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (String option : options) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int distance \u003d calculateStringDistance(uncorrected, option);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (distance \u003c closestDistance) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                closestDistance \u003d distance;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cString\u003e correctedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (String option : options) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int distance \u003d calculateStringDistance(uncorrected, option);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (distance \u003d\u003d closestDistance) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                correctedItems.add(option);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (closestDistance \u003e parameters.getDistanceThreshold()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            logger.info(String.format(\"Failed to correct \\\"%s\\\".\", uncorrected));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.FAILED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctedItems.size() \u003d\u003d 1 \u0026\u0026 correctedItems.get(0).equalsIgnoreCase(uncorrected)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            logger.info(String.format(\"\\\"%s\\\" is already valid, left unchanged.\", uncorrected));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.UNCHANGED, correctedItems);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        logger.info(String.format(\"Corrected \\\"%s\\\" to %s.\", uncorrected, correctedItems));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new CorrectionResult\u003cString\u003e(CorrectionStatus.CORRECTED, correctedItems);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the edit distance between two {@link String}s."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param input Input string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param reference Reference string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Edit distance between {@code input} and {@code reference}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int calculateStringDistance(String input, String reference) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(reference);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int distance;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (parameters.isForwardMatching() \u0026\u0026 input.length() \u003c\u003d reference.length()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance \u003d CorrectionEngineUtil.calculateForwardMatchingDistance(editDistanceCalculator,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    input, reference, parameters.getForwardMatchingThreshold());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance \u003d editDistanceCalculator.calculateDistance(input, reference);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return distance;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 116
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * API for any algorithm that calculates the edit distance of two {@link String}s."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface EditDistanceCalculator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the edit distance between two {@link Strings}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param first First {@link String}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param second Second {@link String}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The edit distance of {@code first} and {@code second}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    int calculateDistance(String first, String second);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 16
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * An implementation of the Levenshtein algorithm for calculating the edit distance of two {@link Strings}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Inspired by https://web.stanford.edu/class/cs124/lec/med.pdf."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class LevenshteinDistanceCalculator implements EditDistanceCalculator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LevenshteinDistanceCalculator.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final boolean isCaseSensitive;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a {@link LevenshteinDistanceCalculator} instance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param isCaseSensitive Whether or not edit distance should account for case difference"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public LevenshteinDistanceCalculator(boolean isCaseSensitive) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.isCaseSensitive \u003d isCaseSensitive;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int calculateDistance(String first, String second) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(first);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(second);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // Uses dynamic programming bottom-up approach in calculating the edit distance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // For each pair of i,j, distance[i][j] represents the edit distance between"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // first[0...i] and second[0...j]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int[][] distance \u003d new int[first.length() + 1][second.length() + 1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance[i][0] \u003d i;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance[0][j] \u003d j;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                char firstChar \u003d first.charAt(i - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                char secondChar \u003d second.charAt(j - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                if (!isCaseSensitive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    firstChar \u003d Character.toLowerCase(firstChar);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    secondChar \u003d Character.toLowerCase(secondChar);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                if (firstChar \u003d\u003d secondChar) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    distance[i][j] \u003d min("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j] + 1,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i][j - 1] + 1,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j - 1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    distance[i][j] \u003d min("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j] + 1,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i][j - 1] + 1,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j - 1] + 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        logger.fine(String.format(\"Edit distance between \\\"%s\\\" and \\\"%s\\\" is %d\", first, second,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                distance[first.length()][second.length()]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return distance[first.length()][second.length()];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the minimum value of three integers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param a First integer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param b Second integer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param c Third integer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The mininum of the three integers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int min(int a, int b, int c) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Math.min(a, Math.min(b, c));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 88
    }
  },
  {
    "path": "src/main/java/com/notably/logic/exceptions/EditBlockBodyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents an error when editing current block body."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class EditBlockBodyException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public EditBlockBodyException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 11
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Command Parser interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * @param \u003cT\u003e returns a Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public interface CommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    List\u003cT\u003e parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 3,
      "ljiazh3ng": 8
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class DeleteCommandParser implements CommandParser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_EMPTY_PATH \u003d \"An empty path is detected please enter a valid Path. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"To see list of Command format, type: help\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_NO_MATCH_PATH \u003d \"The path \\\"%s\\\" does not exist in the Storage\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeleteCommandParser.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model notablyModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public DeleteCommandParser(Model notablyModel, CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.notablyModel \u003d notablyModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.pathCorrectionEngine \u003d pathCorrectionEngine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public List\u003cDeleteCommand\u003e parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            title \u003d args.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(\"Empty path detected.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(ERROR_EMPTY_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath uncorrectedPath \u003d ParserUtil.createAbsolutePath(title, notablyModel.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d pathCorrectionEngine.correct(uncorrectedPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"The path \\\"%s\\\" does not exist in the storage.\", title));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_NO_MATCH_PATH, title));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath correctedPath \u003d correctionResult.getCorrectedItems().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"DeleteCommand with the path \u0027%s\u0027 is created\", correctedPath));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return List.of(new DeleteCommand(correctedPath));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 4,
      "kevinputera": 13,
      "-": 12,
      "ljiazh3ng": 42
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/NewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_JUMP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents a Parser for New Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class NewCommandParser implements CommandParser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_PREFIX_MISSING \u003d \"The Prefix \\\"%s\\\" is missing. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"To see list of Command format, type: help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NewCommandParser.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model notablyModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public NewCommandParser(Model notablyModel) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.notablyModel \u003d notablyModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Parse input and create NewCommand and OpenCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param args parse userInput used to create block."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return List of command to execute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws ParseException when input is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public List\u003cCommand\u003e parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_JUMP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"The Prefix \u0027%s\u0027 is missing. \", PREFIX_TITLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_PREFIX_MISSING, PREFIX_TITLE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        String title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Block block;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            block \u003d new BlockImpl(new Title(title));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"The title \u0027%s\u0027 provided is invalid. \", title));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        commands.add(new NewCommand(block));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"NewCommand for the block titled \u0027%s\u0027 created\", title));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_JUMP)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return commands;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        AbsolutePath path \u003d ParserUtil.createAbsolutePath(title, notablyModel.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        commands.add(new OpenCommand(path));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(\"Command jumps to the block after creation\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 5,
      "kevinputera": 4,
      "ljiazh3ng": 70
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/NotablyParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.correction.StringCorrectionEngine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Parse in users input and generate the respective Commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class NotablyParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_LIST \u003d List.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            NewCommand.COMMAND_WORD, EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            DeleteCommand.COMMAND_WORD, OpenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            HelpCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            SearchCommandParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"\\\"%s\\\" is an invalid command format. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"To see the list of available commands, type: help\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotablyParser.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model notablyModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionEngine\u003cString\u003e commandCorrectionEngine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public NotablyParser(Model notablyModel) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(notablyModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.notablyModel \u003d notablyModel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.commandCorrectionEngine \u003d new StringCorrectionEngine(COMMAND_LIST,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(true));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(notablyModel,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Create list of different Commands base on user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param userInput supplied by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return list of commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws ParseException when there is a invalid input string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public List\u003c? extends Command\u003e parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"Parsing \u0027%s\u0027\", userInput));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"\u0027%s\u0027 is an invalid command format.\", userInput));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_MESSAGE, userInput));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d commandCorrectionEngine.correct(commandWord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"\u0027%s\u0027 is an invalid command word.\", commandWord));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_MESSAGE, commandWord));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        commandWord \u003d correctionResult.getCorrectedItems().get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case NewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return new NewCommandParser(notablyModel).parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new OpenCommandParser(notablyModel, pathCorrectionEngine).parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new DeleteCommandParser(notablyModel, pathCorrectionEngine).parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return List.of(new EditCommand());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return List.of(new HelpCommand());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return List.of(new ExitCommand());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        case SearchCommandParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            new SearchCommandParser(notablyModel).parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return List.of();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_MESSAGE, commandWord));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 26,
      "ljiazh3ng": 84
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represent a Parser for OpenCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class OpenCommandParser implements CommandParser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_PATH \u003d \"The Path \\\"%s\\\" does not exist in the storage. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"Please provide a valid Path\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_EMPTY_PATH \u003d \"Empty path detected. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"Please provide a valid Path\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String ERROR_ROOT_PATH \u003d \"Opening the root path is forbidden. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            + \"Please provide a valid Path\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenCommandParser.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model notablyModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public OpenCommandParser(Model notablyModel, CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.notablyModel \u003d notablyModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.pathCorrectionEngine \u003d pathCorrectionEngine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Creates OpenCommand with user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param args to be parse by into CorrectionEngine."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return List of command containing OpenCammnd."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public List\u003cOpenCommand\u003e parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            title \u003d args.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(\"Empty path detected\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(ERROR_EMPTY_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath uncorrectedPath \u003d ParserUtil.createAbsolutePath(title, notablyModel.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d pathCorrectionEngine.correct(uncorrectedPath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(String.format(\"The path \\\"%s\\\" does not exist in the storage.\", title));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(ERROR_PATH, title));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath correctedPath \u003d correctionResult.getCorrectedItems().get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.info(String.format(\"OpenCommand with the path \u0027%s\u0027 is created\", correctedPath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return List.of(new OpenCommand(correctedPath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 4,
      "kevinputera": 9,
      "ljiazh3ng": 61
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/SearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Parses Search input arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class SearchCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String SELECT_ONE \u003d \"Please select one of the suggestions below, then press enter!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static final String NO_SUGGESTION \u003d \"Unable to search for notes containing the keyword \u0027%s\u0027\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SearchCommandParser.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model notablyModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public SearchCommandParser(Model notablyModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.notablyModel \u003d notablyModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws ParseException is always thrown, error message is determined by user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (notablyModel.getSuggestions().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            logger.warning(\"Suggestion does not exist\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new ParseException(String.format(NO_SUGGESTION, args));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logger.warning(\"User pressed enter without selecting a suggestion\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        throw new ParseException(SELECT_ONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 40
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/SuggestionEngine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.correction.StringCorrectionEngine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.DeleteSuggestionArgHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.EditSuggestionHandler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.ExitSuggestionHandler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.HelpSuggestionHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.NewSuggestionArgHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.OpenSuggestionArgHandler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.SearchSuggestionArgHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a SuggestionEngine."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionEngine {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_LIST \u003d List.of(NewSuggestionArgHandler.COMMAND_WORD,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            EditSuggestionHandler.COMMAND_WORD, DeleteSuggestionArgHandler.COMMAND_WORD,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            OpenSuggestionArgHandler.COMMAND_WORD, HelpSuggestionHandler.COMMAND_WORD,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            ExitSuggestionHandler.COMMAND_WORD, SearchSuggestionArgHandler.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_COMMAND \u003d \"\\\"%s\\\" is an invalid command format. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"To see the list of available commands, type: help\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private CorrectionEngine\u003cString\u003e commandCorrectionEngine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionEngine(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        commandCorrectionEngine \u003d new StringCorrectionEngine(COMMAND_LIST,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(true));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(true));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        autoUpdateInput(model.inputProperty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Generates suggestions."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private void suggest(String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e suggestionCommand \u003d parseCommand(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionCommand.ifPresent(s -\u003e s.execute(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Parses the user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The corresponding SuggestionGenerator."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Optional\u003c? extends SuggestionGenerator\u003e parseCommand(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.clearSuggestions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.clearResponseText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_INVALID_COMMAND, userInput));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d commandCorrectionEngine.correct(commandWord);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_INVALID_COMMAND, userInput));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        commandWord \u003d correctionResult.getCorrectedItems().get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case OpenSuggestionArgHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new OpenSuggestionArgHandler(model, pathCorrectionEngine).handleArg(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case DeleteSuggestionArgHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new DeleteSuggestionArgHandler(model, pathCorrectionEngine).handleArg(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case SearchSuggestionArgHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new SearchSuggestionArgHandler(model).handleArg(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case NewSuggestionArgHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new NewSuggestionArgHandler(model).handleArg(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case EditSuggestionHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new EditSuggestionHandler(model).handle();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case HelpSuggestionHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new HelpSuggestionHandler(model).handle();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        case ExitSuggestionHandler.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return new ExitSuggestionHandler(model).handle();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new AssertionError(\"Default path will never get executed.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Generates new suggestions whenever the command input line changes."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param inputProperty The user\u0027s input."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private void autoUpdateInput(StringProperty inputProperty) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(inputProperty);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        inputProperty.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.clearSuggestions();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.clearResponseText();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            suggest(newValue);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 142
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/generator/DeleteSuggestionGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a suggestion generator object to delete a note."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class DeleteSuggestionGenerator implements SuggestionGenerator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteSuggestionGenerator.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cAbsolutePath\u003e paths;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private String oldTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public DeleteSuggestionGenerator(List\u003cAbsolutePath\u003e paths, String oldTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(paths);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(oldTitle);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (oldTitle.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(\"\\\"oldTitle\\\" must not be blank\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new IllegalArgumentException(\"The \\\"oldTitle\\\" must contain at least one element\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.paths \u003d paths;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.oldTitle \u003d oldTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Executing DeleteSuggestionGenerator\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d getPossiblePaths(paths, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Collections.sort(possiblePaths);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d getSuggestions(possiblePaths, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setSuggestions(suggestions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Delete suggestions are saved to model\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Generates all possible paths from the app\u0027s {@link BlockTree}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return List of all possible paths."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cAbsolutePath\u003e getPossiblePaths(List\u003cAbsolutePath\u003e paths, Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Queue\u003cAbsolutePath\u003e pathQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (AbsolutePath path : paths) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            pathQueue.offer(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            while (!pathQueue.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                AbsolutePath currentPath \u003d pathQueue.poll();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                List\u003cBlockTreeItem\u003e childrenBlocks \u003d model.getBlockTree().get(currentPath).getBlockChildren();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                List\u003cAbsolutePath\u003e childrenPaths \u003d childrenBlocks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .map(item -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            List\u003cString\u003e combinedComponents \u003d new ArrayList\u003c\u003e(currentPath.getComponents());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            combinedComponents.add(item.getTitle().getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            return AbsolutePath.fromComponents(combinedComponents);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        })"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                pathQueue.addAll(childrenPaths);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                possiblePaths.add(currentPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return possiblePaths;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cSuggestionItem\u003e getSuggestions(List\u003cAbsolutePath\u003e possiblePaths, Model model) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(possiblePaths);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return possiblePaths.stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                .map(path -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    String displayText \u003d path.getStringRepresentation();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    String updatedInput \u003d model.getInput().replace(oldTitle, displayText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    Runnable action \u003d () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        model.setInput(updatedInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    return new SuggestionItemImpl(displayText, action);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                })"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 102,
      "kevinputera": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/generator/OpenSuggestionGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a suggestion generator object to open a note."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class OpenSuggestionGenerator implements SuggestionGenerator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenSuggestionGenerator.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cAbsolutePath\u003e paths;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private String oldTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public OpenSuggestionGenerator(List\u003cAbsolutePath\u003e paths, String oldTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(paths);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(oldTitle);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (oldTitle.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(\"\\\"oldTitle\\\" must not be blank\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new IllegalArgumentException(\"The \\\"oldTitle\\\" must contain at least one element\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.paths \u003d paths;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.oldTitle \u003d oldTitle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Executing OpenSuggestionGenerator\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d getPossiblePaths(paths, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Collections.sort(possiblePaths);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d getSuggestions(possiblePaths, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setSuggestions(suggestions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Open suggestions are saved to model\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Generates all possible paths from the app\u0027s {@link BlockTree}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return List of all possible paths."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cAbsolutePath\u003e getPossiblePaths(List\u003cAbsolutePath\u003e paths, Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cAbsolutePath\u003e possiblePaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Queue\u003cAbsolutePath\u003e pathQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (AbsolutePath path : paths) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            pathQueue.offer(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            while (!pathQueue.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                AbsolutePath currentPath \u003d pathQueue.poll();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                List\u003cBlockTreeItem\u003e childrenBlocks \u003d model.getBlockTree().get(currentPath).getBlockChildren();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                List\u003cAbsolutePath\u003e childrenPaths \u003d childrenBlocks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .map(item -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            List\u003cString\u003e combinedComponents \u003d new ArrayList\u003c\u003e(currentPath.getComponents());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            combinedComponents.add(item.getTitle().getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                            return AbsolutePath.fromComponents(combinedComponents);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        })"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                pathQueue.addAll(childrenPaths);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                possiblePaths.add(currentPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return possiblePaths;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cSuggestionItem\u003e getSuggestions(List\u003cAbsolutePath\u003e possiblePaths, Model model) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(possiblePaths);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return possiblePaths.stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                .map(path -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    String displayText \u003d path.getStringRepresentation();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    String updatedInput \u003d model.getInput().replace(oldTitle, displayText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    Runnable action \u003d () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        model.setInput(updatedInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    return new SuggestionItemImpl(displayText, action);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                })"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 102,
      "kevinputera": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/generator/SearchSuggestionGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a suggestion command object to search through all the notes based on keyword."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SearchSuggestionGenerator implements SuggestionGenerator {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SearchSuggestionGenerator.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SearchSuggestionGenerator(String keyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Executing SearchSuggestionGenerator\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d getSuggestions(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        sortSuggestions(suggestions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setSuggestions(suggestions);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Search suggestions are saved to model\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Gets the list of suggestions which contain the keyword."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return List of suggestions."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private List\u003cSuggestionItem\u003e getSuggestions(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Queue\u003cAbsolutePath\u003e pathQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        pathQueue.offer(AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        BlockTree blockTree \u003d model.getBlockTree();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        while (!pathQueue.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            AbsolutePath currentPath \u003d pathQueue.poll();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            List\u003cBlockTreeItem\u003e childrenBlocks \u003d blockTree.get(currentPath).getBlockChildren();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            List\u003cAbsolutePath\u003e childrenPaths \u003d childrenBlocks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    .map(item -\u003e getPath(item, currentPath, blockTree, model, suggestions))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            pathQueue.addAll(childrenPaths);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private AbsolutePath getPath(BlockTreeItem item, AbsolutePath currentPath, BlockTree blockTree, Model model,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                                 List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e combinedComponents \u003d new ArrayList\u003c\u003e(currentPath.getComponents());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        combinedComponents.add(item.getTitle().getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        AbsolutePath absolutePath \u003d AbsolutePath.fromComponents(combinedComponents);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        BlockTreeItem blockTreeItem \u003d blockTree.get(absolutePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String blockBody \u003d blockTreeItem.getBody().getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        /* If a blockBody contains the keyword, we create SuggestionItem by"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "           counting the keyword\u0027s number of occurrences in the blockBody, setting display text,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "           and setting action to open that particular block when the user chooses that suggestion. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String bodyLowerCase \u003d blockBody.toLowerCase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (bodyLowerCase.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            addSuggestions(bodyLowerCase, absolutePath, model, suggestions);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return absolutePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Adds a Suggestion Item into the list of suggestions if it contains the keyword."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param bodyLowerCase The body of the block in lower case."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param absolutePath The absolute path of the currently checked block."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The list of suggestions."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private void addSuggestions(String bodyLowerCase, AbsolutePath absolutePath, Model model,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                                List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String[] blockBodies \u003d bodyLowerCase.split(keyword.toLowerCase(), -1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        int frequency \u003d blockBodies.length - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String displayText \u003d absolutePath.getStringRepresentation();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Runnable action \u003d () -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                OpenCommand openCommand \u003d new OpenCommand(absolutePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                openCommand.execute(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.clearInput();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            } catch (CommandException ex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                /* notes suggested will definitely be able to be opened,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                as the block actually exists. AssertionError would never be thrown */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                logger.severe(\"AssertionError inside the runnable action should never be thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                throw new AssertionError(ex.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem suggestionItem \u003d new SuggestionItemImpl(displayText, frequency, action);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestions.add(suggestionItem);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Sorts the suggestions based on frequency."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The list of SuggestionItem."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private void sortSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Collections.sort(suggestions, (suggestion1, suggestion2) -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            if (!suggestion1.getProperty(\"frequency\").isPresent()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    || !suggestion2.getProperty(\"frequency\").isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                logger.severe(\"All search suggestion item must contain the \\\"frequency\\\" property\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                throw new AssertionError(\"All search suggestion item must contain the \\\"frequency\\\" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        + \"property\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            if (!suggestion1.getProperty(\"displayText\").isPresent()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    || !suggestion2.getProperty(\"displayText\").isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                logger.severe(\"All search suggestion item must contain the \\\"displayText\\\" property\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                throw new AssertionError(\"All search suggestion item must contain the \\\"displayText\\\" \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                        + \"property\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            int frequency1 \u003d Integer.parseInt(suggestion1.getProperty(\"frequency\").get());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            int frequency2 \u003d Integer.parseInt(suggestion2.getProperty(\"frequency\").get());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            if (frequency1 \u003d\u003d frequency2) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                String displayText1 \u003d suggestion1.getProperty(\"displayText\").get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                String displayText2 \u003d suggestion2.getProperty(\"displayText\").get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                return displayText1.compareToIgnoreCase(displayText2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return frequency2 - frequency1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 150,
      "ljiazh3ng": 6
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/generator/SuggestionGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a particular strategy in generating suggestions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Adds a list of generated suggestions to the app\u0027s model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void execute(Model model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 15
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/DeleteSuggestionArgHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.DeleteSuggestionGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for DeleteSuggestionGenerator."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class DeleteSuggestionArgHandler implements SuggestionArgHandler\u003cDeleteSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Delete a note\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Delete a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_CANNOT_DELETE_NOTE \u003d \"Cannot delete \\\"%s\\\" as it is an invalid path\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteSuggestionArgHandler.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public DeleteSuggestionArgHandler(Model model, CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.pathCorrectionEngine \u003d pathCorrectionEngine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles user input in the context of the DeleteSuggestionGenerator."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return An optional DeleteSuggestionGenerator object with a corrected absolute path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cDeleteSuggestionGenerator\u003e handleArg(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handleArg method inside DeleteSuggestionArgHandler\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_TITLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            title \u003d userInput.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(\"title is empty\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        AbsolutePath uncorrectedPath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            uncorrectedPath \u003d ParserUtil.createAbsolutePath(title, model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(ERROR_MESSAGE_CANNOT_DELETE_NOTE, title));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_CANNOT_DELETE_NOTE, title));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(String.format(RESPONSE_MESSAGE_WITH_TITLE, title));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d pathCorrectionEngine.correct(uncorrectedPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(\"Failed to correct \\\"%s\\\".\", title));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.of(new DeleteSuggestionGenerator(correctionResult.getCorrectedItems(), title));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 76,
      "kevinputera": 9
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/EditSuggestionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for the command word \"edit\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class EditSuggestionHandler implements SuggestionHandler\u003cSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Edit this note\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditSuggestionHandler.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public EditSuggestionHandler(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cSuggestionGenerator\u003e handle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handle method inside EditSuggestionHandler\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 32
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/ExitSuggestionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for the command word \"exit\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class ExitSuggestionHandler implements SuggestionHandler\u003cSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Exit the application\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExitSuggestionHandler.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public ExitSuggestionHandler(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cSuggestionGenerator\u003e handle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handle method inside ExitSuggestionHandler\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 32
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/HelpSuggestionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for the command word \"help\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class HelpSuggestionHandler implements SuggestionHandler\u003cSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Display a list of available commands\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpSuggestionHandler.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public HelpSuggestionHandler(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cSuggestionGenerator\u003e handle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handle method inside HelpSuggestionHandler\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 32
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/NewSuggestionArgHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_JUMP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for the command word \"new\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class NewSuggestionArgHandler implements SuggestionArgHandler\u003cSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Create a new note\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Create a new note titled \\\"%s\\\".\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE_AND_OPEN \u003d \"Create a new note titled \\\"%s\\\" and open it.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_COMMAND \u003d \"\\\"%s\\\" is an invalid creation format. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"The correct format is \\\"new -t TITLE [-o]\\\"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_TITLE \u003d \"Title \\\"%s\\\" is invalid. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"Titles cannot start with the period character. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"Titles should only contain alphanumeric characters and symbols except - and /\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NewSuggestionArgHandler.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public NewSuggestionArgHandler(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles input and displays the appropriate response text."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return Optional.empty()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cSuggestionGenerator\u003e handleArg(String userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handleArg method inside NewSuggestionArgHandler\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_TITLE, PREFIX_JUMP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(\"user input is blank\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(ERROR_MESSAGE_INVALID_COMMAND, model.getInput()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_INVALID_COMMAND, model.getInput()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!Title.isValidTitle(title) \u0026\u0026 !title.isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(ERROR_MESSAGE_INVALID_TITLE, title));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_INVALID_TITLE, title));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else if (title.isBlank()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(\"title is blank\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_JUMP)) { // If user does NOT type \"-o\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(String.format(RESPONSE_MESSAGE_WITH_TITLE, title));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(RESPONSE_MESSAGE_WITH_TITLE, title));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(String.format(RESPONSE_MESSAGE_WITH_TITLE_AND_OPEN, title));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(RESPONSE_MESSAGE_WITH_TITLE_AND_OPEN, title));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 82,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/OpenSuggestionArgHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.OpenSuggestionGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for OpenSuggestionGenerator."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class OpenSuggestionArgHandler implements SuggestionArgHandler\u003cOpenSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Open a note\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Open a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_CANNOT_OPEN_NOTE \u003d \"Cannot open \\\"%s\\\" as it is an invalid path\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenSuggestionArgHandler.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public OpenSuggestionArgHandler(Model model, CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.pathCorrectionEngine \u003d pathCorrectionEngine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles user input in the context of the OpenSuggestionGenerator."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return An optional OpenSuggestionGenerator object with a corrected absolute path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cOpenSuggestionGenerator\u003e handleArg(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handleArg method inside OpenSuggestionArgHandler\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_TITLE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            title \u003d userInput.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_TITLE).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(\"title is empty\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        AbsolutePath uncorrectedPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            uncorrectedPath \u003d ParserUtil.createAbsolutePath(title, model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(ERROR_MESSAGE_CANNOT_OPEN_NOTE, title));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(String.format(ERROR_MESSAGE_CANNOT_OPEN_NOTE, title));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(String.format(RESPONSE_MESSAGE_WITH_TITLE, title));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d pathCorrectionEngine.correct(uncorrectedPath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (correctionResult.getCorrectionStatus() \u003d\u003d CorrectionStatus.FAILED) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.warning(String.format(\"Failed to correct \\\"%s\\\".\", title));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.of(new OpenSuggestionGenerator(correctionResult.getCorrectedItems(), title));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 78,
      "kevinputera": 9
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/SearchSuggestionArgHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_SEARCH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SearchSuggestionGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Handler for SearchSuggestionGenerator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SearchSuggestionArgHandler implements SuggestionArgHandler\u003cSearchSuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Search through all notes based on keyword\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_KEYWORD \u003d \"Search through all notes based on keyword \\\"%s\\\"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SearchSuggestionArgHandler.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SearchSuggestionArgHandler(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles user input in the context of the SearchSuggestionGenerator."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return An optional SearchSuggestionGenerator object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cSearchSuggestionGenerator\u003e handleArg(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        logger.info(\"Starting handleArg method inside SearchSuggestionArgHandler\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_SEARCH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String keyword;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_SEARCH)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            keyword \u003d userInput.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            keyword \u003d argMultimap.getValue(PREFIX_SEARCH).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            logger.info(\"keyword is empty\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            model.setResponseText(RESPONSE_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setResponseText(String.format(RESPONSE_MESSAGE_WITH_KEYWORD, keyword));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.of(new SearchSuggestionGenerator(keyword));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 62
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/SuggestionArgHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Suggestion Argument Handler that is able to handle user input into a SuggestionGenerator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * @param \u003cT\u003e Generic type of SuggestionGenerator."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionArgHandler\u003cT extends SuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles the arguments part of the user input into a suggestion generator and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param userInput The user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The optional suggestion generator."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Optional\u003cT\u003e handleArg(String userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 20
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/handler/SuggestionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a Suggestion Handler."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * @param \u003cT\u003e Generic type of SuggestionGenerator."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionHandler\u003cT extends SuggestionGenerator\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Handles suggestions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The optional suggestion generator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Optional\u003cT\u003e handle();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 19
    }
  },
  {
    "path": "src/main/java/com/notably/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * The API of the {@link Model} component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface Model extends BlockModel, SuggestionModel, UserPrefModel, ViewStateModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "HemanshuGandhi": 2,
      "kevinputera": 2,
      "-": 4,
      "firzanarmani": 4
    }
  },
  {
    "path": "src/main/java/com/notably/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents the in-memory model of the application data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private UserPrefModel userPrefModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private SuggestionModel suggestionModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private ViewStateModel viewStateModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockModel blockModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Initializes a ModelManager with the given model parts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ModelManager(BlockModel blockModel, SuggestionModel suggestionModel,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        ViewStateModel viewStateModel, ReadOnlyUserPrefModel userPrefModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireAllNonNull(blockModel, suggestionModel, viewStateModel, userPrefModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(\"Initializing with block data: \" + blockModel + \" and user prefs \" + userPrefModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.suggestionModel \u003d suggestionModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.viewStateModel \u003d viewStateModel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.blockModel \u003d blockModel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.userPrefModel \u003d new UserPrefModelImpl(userPrefModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Shorthand for initializing a {@link ModelManager} without {@link UserPrefModel}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ModelManager(BlockModel blockModel, SuggestionModel suggestionModel, ViewStateModel viewStateModel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this(blockModel, suggestionModel, viewStateModel, new UserPrefModelImpl());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUserPrefModel(ReadOnlyUserPrefModel userPrefModel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(userPrefModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.userPrefModel.setUserPrefModel(userPrefModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ReadOnlyUserPrefModel getUserPrefModel() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return userPrefModel.getUserPrefModel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void resetUserPrefModel(ReadOnlyUserPrefModel newUserPrefModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newUserPrefModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.resetUserPrefModel(newUserPrefModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return userPrefModel.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path getBlockDataFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return userPrefModel.getBlockDataFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockDataFilePath(Path blockDataFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(blockDataFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setBlockDataFilePath(blockDataFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggestion Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public ObservableList\u003cSuggestionItem\u003e getSuggestions() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestionModel.getSuggestions();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.setSuggestions(suggestions);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cOptional\u003cString\u003e\u003e responseTextProperty() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return viewStateModel.responseTextProperty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setResponseText(String responseText) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        viewStateModel.setResponseText(responseText);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseText() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        viewStateModel.clearResponseText();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.clearSuggestions();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ViewStateModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public StringProperty inputProperty() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.inputProperty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.getInput();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setInput(input);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearInput() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        viewStateModel.clearInput();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BooleanProperty helpOpenProperty() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.helpOpenProperty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public Boolean isHelpOpen() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.isHelpOpen();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setHelpOpen(Boolean bool) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setHelpOpen(bool);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BooleanProperty blockEditableProperty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.blockEditableProperty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public Boolean isBlockEditable() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return viewStateModel.isBlockEditable();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setBlockEditable(Boolean bool) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setBlockEditable(bool);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BlockModel\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTree getBlockTree() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.getBlockTree();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockTree(BlockTree blockTree) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setBlockTree(blockTree);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void resetData(BlockModel newData) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.resetData(newData);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public AbsolutePath getCurrentlyOpenPath() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cAbsolutePath\u003e currentlyOpenPathProperty() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return blockModel.currentlyOpenPathProperty();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean hasPath(AbsolutePath p) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.hasPath(p);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setCurrentlyOpenBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(p);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void addBlockToCurrentPath(Block b) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.addBlockToCurrentPath(b);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(p);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void updateCurrentlyOpenBlockBody(Body newBody) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.updateCurrentlyOpenBlockBody(newBody);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 48,
      "HemanshuGandhi": 51,
      "kevinputera": 14,
      "-": 37,
      "firzanarmani": 85,
      "ljiazh3ng": 4
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Block.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the {@link Block} component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A {@link Block} is a data node containing a {@link Title} and a (optionally empty) {@link Body}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface Block {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link Title} of a {@link Block}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link Title} of the {@link Block}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Title getTitle();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link Body} content of a {@link Block}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link Body} of the {@link Block}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Body getBody();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 22
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Implementation class of {@link Block}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockImpl implements Block {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initializes a {@link Block} without the {@link Body}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Used when creating a root block or a block without the optional body argument."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title {@link Title} of the new {@link Block}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockImpl(Title title) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this(title, new Body(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initializes a {@link Block} with the {@link Title} and {@link Body}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Used when creating a block with additional body argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title {@link Title} of the new {@link Block}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param body {@link Body} of the new {@link Block}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockImpl(Title title, Body body) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Static method to create a root {@link Block}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@code Block} representing the root"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static Block createRootBlock() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new BlockImpl(new Title(\"Root\"), new Body(\"Create a new note to get started!\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.body;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                || (other instanceof Block // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \u0026\u0026 title.getText().equals(((Block) other).getTitle().getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \u0026\u0026 body.getText().equals(((Block) other).getBody().getText())); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return Objects.hash(title.getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 69
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the {@link BlockModel} component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * {@link BlockModel} is the entry point for the other components to interact and manipulate Notably\u0027s block data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link BlockTree} currently in use by Notably."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Current {@link BlockTree}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTree getBlockTree();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces the content of the {@link BlockTree} with items from the new tree."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param blockTree Target {@link BlockTree} to copy the data from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockTree(BlockTree blockTree);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces the data of the {@link BlockModel} with {@link newData}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newData Target {@link BlockModel} to copy the data from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void resetData(BlockModel newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link AbsolutePath} of the {@link Block} that is currently open."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link AbsolutePath} of the currently open {@link Block}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    AbsolutePath getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@code Property\u003cAbsolutePath\u003e} of the block that is currently open."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@code Property\u003cAbsolutePath\u003e} of the currently open {@link Block}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Property\u003cAbsolutePath\u003e currentlyOpenPathProperty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Checks if {@code path} exists in the {@link BlockModel}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} to be checked"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Whether {@code path} exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    boolean hasPath(AbsolutePath path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Opens the {@link Block} at the specified {@code path}, if possible. (For open command)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the {@link Block} to be opened"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setCurrentlyOpenBlock(AbsolutePath path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a {@link Block} to the currently opened path, if possible. (For add command)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param block {@link Block} to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void addBlockToCurrentPath(Block block);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Removes the {@link Block} at the specified {@code path}, if possible. (For remove command)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the {@link Block} to be removed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void removeBlock(AbsolutePath path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the {@link Body} of the {@link Block} at the currently open path, to {@code newBody}. (For edit command)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBody New {@link Body} content"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void updateCurrentlyOpenBlockBody(Body newBody);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 1,
      "firzanarmani": 81
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockModelImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * The implementation class of {@link BlockModel}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockModelImpl implements BlockModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BlockModelImpl.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockTree blockTree;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Property\u003cAbsolutePath\u003e currentlyOpenPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates a new {@link BlockModel} implementation object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockModelImpl() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        currentlyOpenPath \u003d new SimpleObjectProperty\u003cAbsolutePath\u003e(AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTree getBlockTree() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockTree(BlockTree blockTree) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.blockTree \u003d blockTree;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Data copied from target BlockTree successfully\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void resetData(BlockModel newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Objects.requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        setBlockTree(newData.getBlockTree());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        setCurrentlyOpenBlock(newData.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"BlockModel reset successfully\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public AbsolutePath getCurrentlyOpenPath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return currentlyOpenPath.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cAbsolutePath\u003e currentlyOpenPathProperty() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return currentlyOpenPath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean hasPath(AbsolutePath path) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            blockTree.get(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (NoSuchBlockException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setCurrentlyOpenBlock(AbsolutePath path) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!hasPath(path)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logger.fine(String.format(\"Path \u0027%s\u0027 does not exist\", path.getStringRepresentation()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new NoSuchBlockException(path.getStringRepresentation());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        currentlyOpenPath.setValue(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Currently open path now set to: %s\", path.getStringRepresentation()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void addBlockToCurrentPath(Block block) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Trying to add block with the title %s to the current path\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            block.getTitle().getText()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.add(getCurrentlyOpenPath(), block);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(String.format(\"Block with the title %s successfully added to current path\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            block.getTitle().getText())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock(AbsolutePath path) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Trying to delete block at \u0027%s\u0027\", path.getStringRepresentation()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (isCurrentlyOpenAffectedByDelete(path)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            BlockTreeItem parent \u003d blockTree.get(path).getBlockParent();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            setCurrentlyOpenBlock(parent.getAbsolutePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.remove(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Block at path \u0027%s\u0027 delete successfully\", path.getStringRepresentation()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Checks if the incoming delete command removes the currently open block as well,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * i.e {@code currentlyOpenPath} is a descendent of {@code path}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@code AbsolutePath} of block to be deleted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Whether the currently open path is affected"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private boolean isCurrentlyOpenAffectedByDelete(AbsolutePath path) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        boolean match \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        List\u003cString\u003e currentOpenPathList \u003d getCurrentlyOpenPath().getComponents();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        List\u003cString\u003e matchPathList \u003d path.getComponents();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (matchPathList.size() \u003e currentOpenPathList.size()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Handle deletion of root"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (matchPathList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (int index \u003d 0; index \u003c matchPathList.size(); index++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (!Objects.equals(currentOpenPathList.get(index), matchPathList.get(index))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                match \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return match;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void updateCurrentlyOpenBlockBody(Body newBody) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Trying to update body of \u0027%s\u0027\", getCurrentlyOpenPath().getStringRepresentation()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(blockTree.get(getCurrentlyOpenPath()).getTitle(), newBody);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.set(getCurrentlyOpenPath(), newBlock);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        logger.fine(String.format(\"Body of \u0027%s\u0027 changed to \u0027%s\u0027 successfully\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            getCurrentlyOpenPath().getStringRepresentation(), newBody.getText()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 2,
      "firzanarmani": 134
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of {@link BlockTree} component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Custom tree-like data structure that uses the {@link AbsolutePath} object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * to obtain the {@link BlockTreeItem} needed for manipulation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockTree {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the root {@link BlockTreeItem} of the {@link BlockTree}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Root {@link BlockTreeItem}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getRootBlock();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link BlockTreeItem} at the {@code path} specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the target block"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link BlockTreeItem} at the path, if it exists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem get(AbsolutePath path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a new {@link Block} to the block at the {@code path} specified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the target {@link Block}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock {@link Block} to be added to {@code path}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void add(AbsolutePath path, Block newBlock);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the existing {@link Block} at the specified {@code path}, to {@code newBlock}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the target {@link Block}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock {@link Block} to be changed for {@code path}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void set(AbsolutePath path, Block newBlock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Remove the {@link Block} at the specified {@code path}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path {@link AbsolutePath} of the target {@link Block}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void remove(AbsolutePath path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 49
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTreeImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.CannotModifyRootException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Implementation class of {@link BlockTree}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockTreeImpl implements BlockTree {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockTreeItem root;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates a new {@link BlockTree} implementation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeImpl() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.root \u003d BlockTreeItemImpl.createRootBlockTreeItem();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItem getRootBlock() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.root;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItem get(AbsolutePath path) throws NoSuchBlockException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem currentBlock \u003d root;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (String component : path.getComponents()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            currentBlock \u003d currentBlock.getBlockChild(new Title(component));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return currentBlock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void add(AbsolutePath path, Block newBlock) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newBlock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem currentBlock \u003d get(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        currentBlock.addBlockChild(newBlock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void set(AbsolutePath path, Block newBlock) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newBlock);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem currentBlock \u003d get(path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem parentBlock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (currentBlock.isRootBlock()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new CannotModifyRootException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        parentBlock \u003d currentBlock.getBlockParent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        parentBlock.setBlockChild(currentBlock.getTitle(), newBlock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void remove(AbsolutePath path) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem currentBlock \u003d get(path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem parentBlock;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (currentBlock.isRootBlock()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new CannotModifyRootException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        parentBlock \u003d currentBlock.getBlockParent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        parentBlock.removeBlockChild(currentBlock);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!(other instanceof BlockTree)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTree otherTree \u003d (BlockTree) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.getRootBlock().equals(otherTree.getRootBlock());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return getRootBlock().hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 88
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTreeItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the {@link BlockTreeItem} component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A {@link BlockTreeItem} is a single node in a {@link BlockTree}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * It contains a {@link Block} as well as information on its parent and children items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockTreeItem extends Block {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@code TreeItem\u003cBlock\u003e} representation of the {@link BlockTreeItem}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@code TreeItem\u003cBlock\u003e} of the {@link BlockTreeItem}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    TreeItem\u003cBlock\u003e getTreeItem();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link Block} content contained in a {@link BlockTreeItem}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link Block} content stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Block getBlock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the parent block of a block, if possible."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * If attempting to get the parent of a root {@link Block}, it will just return itself."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Parent {@link BlockTreeItem}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getBlockParent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets a {@code List\u003cBlockTreeItem\u003e} of children blocks of the {@link BlockTreeItem}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return List of the children"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    List\u003cBlockTreeItem\u003e getBlockChildren();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces all the children of the {@link BlockTreeItem} with a new list of children."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newChildren List of new children"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockChildren(List\u003cBlockTreeItem\u003e newChildren);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Get the child of the {@link BlockTreeItem}, with the specified {@link Title}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title {@link Title} of the child"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Child {@link BlockTreeItem}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getBlockChild(Title title);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces the child of the {@link BlockTreeItem}, that matches the {@link Title}, with {@code newBlock}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title {@link Title} of the child"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock New {@link Block}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockChild(Title title, Block newBlock);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a single new child {@code newBlock}, to the {@link BlockTreeItem}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock New {@link Block}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void addBlockChild(Block newBlock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Removes a specified child block from the {@link BlockTreeItem}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param toRemove {@link Block} to remove"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void removeBlockChild(Block toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the absolute path of the current block in the tree."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link AbsolutePath} of the {@link BlockTreeItem}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    AbsolutePath getAbsolutePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Checks if a {@link BlockTreeItem} is root (has root characteristics)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Whether the {@link BlockTreeItem} is root"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    boolean isRootBlock();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 95
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTreeItemImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.DuplicateBlockException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Implementation class of {@link BlockTreeItem}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockTreeItemImpl implements BlockTreeItem {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private TreeItem\u003cBlock\u003e blockTreeItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates a new {@link BlockTreeItem} implementation object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param block {@link Block} to encapsulate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItemImpl(Block block) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTreeItem \u003d new TreeItem\u003cBlock\u003e(block);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates a new {@link BlockTreeItem} implementation object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param treeItem {@code TreeItem\u003cBlock\u003e} to encapsulate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItemImpl(TreeItem\u003cBlock\u003e treeItem) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(treeItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTreeItem \u003d treeItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Static method to create a root {@code BlockTreeItem}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Root {@link BlockTreeItem}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static BlockTreeItem createRootBlockTreeItem() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block root \u003d BlockImpl.createRootBlock();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        TreeItem\u003cBlock\u003e rootTreeItem \u003d new TreeItem\u003cBlock\u003e(root);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        rootTreeItem.leafProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Body rootBody \u003d newValue"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                ? new Body(\"Create a new note to get started!\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                : new Body(\"Open a note to get started!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            rootTreeItem.setValue(new BlockImpl(rootTreeItem.getValue().getTitle(), rootBody));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new BlockTreeItemImpl(rootTreeItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTreeItem.getValue().getTitle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTreeItem.getValue().getBody();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public TreeItem\u003cBlock\u003e getTreeItem() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.blockTreeItem;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Block getBlock() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTreeItem.getValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItem getBlockParent() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (blockTreeItem.getParent() \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new BlockTreeItemImpl(blockTreeItem.getParent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public List\u003cBlockTreeItem\u003e getBlockChildren() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTreeItem.getChildren().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .map(child -\u003e new BlockTreeItemImpl(child)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockChildren(List\u003cBlockTreeItem\u003e newChildren) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newChildren);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        List\u003cTreeItem\u003cBlock\u003e\u003e convertedNewChildren \u003d newChildren.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .map(newChild -\u003e newChild.getTreeItem())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTreeItem.getChildren().setAll(convertedNewChildren);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItem getBlockChild(Title title) throws NoSuchBlockException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem child \u003d getBlockChildren()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .filter(blockTreeItem -\u003e blockTreeItem"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                .getTitle()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                .equals(title))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchBlockException(title.getText()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return child;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockChild(Title title, Block newBlock) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newBlock);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem child \u003d getBlockChild(title);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        child.getTreeItem().setValue(newBlock);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void addBlockChild(Block block) throws DuplicateBlockException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        boolean hasMatchingChild \u003d getBlockChildren()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .anyMatch(child -\u003e child"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                .getTitle()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                .equals(block.getTitle()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (hasMatchingChild) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DuplicateBlockException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTreeItem.getChildren().add(new TreeItem\u003cBlock\u003e(block));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlockChild(Block toRemove) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        TreeItem\u003cBlock\u003e itemToRemove \u003d getBlockChild(toRemove.getTitle()).getTreeItem();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTreeItem.getChildren().remove(itemToRemove);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public AbsolutePath getAbsolutePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ArrayList\u003cString\u003e blockPath \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem current \u003d this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        while (!current.isRootBlock()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            blockPath.add(current.getTitle().getText());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            current \u003d current.getBlockParent();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Collections.reverse(blockPath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return AbsolutePath.fromComponents(blockPath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isRootBlock() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return getTitle()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getText()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .equals(\"Root\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            \u0026\u0026 getTreeItem().getParent() \u003d\u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (blockTreeItem \u003d\u003d obj) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!(obj instanceof BlockTreeItem)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem otherBlock \u003d (BlockTreeItem) obj;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (this.getBlockChildren().size() !\u003d otherBlock.getBlockChildren().size()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (int childIndex \u003d 0; childIndex \u003c this.getBlockChildren().size(); childIndex++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (!this.getBlockChildren().get(childIndex).equals(otherBlock.getBlockChildren().get(childIndex))) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.getTitle().getText().equals(otherBlock.getTitle().getText());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return Objects.hash(getTitle().getText(), getBlockChildren());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 195
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Body.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a {@code Block}\u0027s body in Notably."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Guarantees: immutable; is non-null"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Body {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public final String blockBody;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code Body}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param body A valid body text string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Body(String body) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockBody \u003d body.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns a {@code String} of the {@code Body} contents."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Body text string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.blockBody;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 30
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a {@code Block}\u0027s title in Notably."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            \"Titles should only contain alphanumeric characters, spaces and any of the following symbols: \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"!\\\"#$%\u0026\u0027()*+,.:;\u003c\u003d\u003e?@[\\\\]^_`{|}~ \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"Titles should also not be blank. Title cannot start with a period character.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"No trailing or leading whitespaces.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        \"([\\\\p{Alnum}\\\\p{Punct}\u0026\u0026[^\\\\/\\\\-\\\\.]]+[\\\\.\\\\s]+)*[\\\\p{Alnum}\\\\p{Punct}\u0026\u0026[^\\\\/\\\\-\\\\.]]+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public final String blockTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title A valid title text string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTitle \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param test The title string to test."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns a {@code String} of the {@code Title} content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Title text string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.blockTitle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \u0026\u0026 blockTitle.equalsIgnoreCase(((Title) other).blockTitle)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTitle.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 67
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/exceptions/CannotModifyRootException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Signals that the operation will modify a root {@link Block}, which is not allowed by design."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class CannotModifyRootException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public CannotModifyRootException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(\"Root item cannot be modified\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 10
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/exceptions/DuplicateBlockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.model.block.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Signals that the operation will result in duplicate {@link Block} (Blocks are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * same parent and title)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class DuplicateBlockException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public DuplicateBlockException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        super(\"Operation would result in duplicate Block\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 2,
      "ljiazh3ng": 9
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/exceptions/NoSuchBlockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Signals that the {@link Block} with the specified {@link Title} string does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class NoSuchBlockException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public NoSuchBlockException(String blockTitle) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(\"Block with the title \" + blockTitle + \" does not exist!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 12
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents the instance of the suggested item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionItem {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Gets the property value of the SuggestionItem based on the key."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param key The key to a key-value mapping."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The value of the mapping."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Optional\u003cString\u003e getProperty(String key);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Executes the action taken after the suggestion item is chosen."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * The action will be different depending on the type of SuggestionGenerator."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The action taken after the suggestion item is chosen."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Runnable getAction();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 24
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionItemImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Implementation class for Suggestion Item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionItemImpl implements SuggestionItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Runnable action;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private HashMap\u003cString, String\u003e hmap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionItemImpl(String displayText, Runnable action) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(displayText);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(action);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        hmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        hmap.put(\"displayText\", displayText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionItemImpl(String displayText, int frequency, Runnable action) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(displayText);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(frequency);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(action);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        hmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        hmap.put(\"displayText\", displayText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        hmap.put(\"frequency\", Integer.toString(frequency));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Optional\u003cString\u003e getProperty(String key) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return Optional.ofNullable(hmap.get(key));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Runnable getAction() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 45
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents the Suggestion Model instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * The UI will directly interact with this model to display the suggestions result."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Gets the list of suggestions saved in the model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The Observable List of suggested items."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    ObservableList\u003cSuggestionItem\u003e getSuggestions();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Saves the list of suggestions in the model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The list of paths or notes that match the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void setSuggestions(List\u003cSuggestionItem\u003e suggestions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Resets the list of suggestions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void clearSuggestions();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 30
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionModelImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * The implementation class of SuggestionModel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionModelImpl implements SuggestionModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private ObservableList\u003cSuggestionItem\u003e suggestions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionModelImpl() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public ObservableList\u003cSuggestionItem\u003e getSuggestions() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(suggestions);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.suggestions.setAll(suggestions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestions.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 34
    }
  },
  {
    "path": "src/main/java/com/notably/model/userpref/ReadOnlyUserPrefModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.userpref;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of unmodifiable user\u0027s preferences."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface ReadOnlyUserPrefModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return {@link GuiSettings}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@link Path} of the block data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return File {@link Path} of the block data file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Path getBlockDataFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 24
    }
  },
  {
    "path": "src/main/java/com/notably/model/userpref/UserPrefModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.userpref;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of modifiable user\u0027s preferences."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface UserPrefModel extends ReadOnlyUserPrefModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the current user prefs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param userPrefModel Target {@link ReadOnlyUserPrefModel}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUserPrefModel(ReadOnlyUserPrefModel userPrefModel);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the current user prefs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return User prefs currently in use"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ReadOnlyUserPrefModel getUserPrefModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Resets the existing data of this {@link UserPrefModel} with {@code newUserPrefModel}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newUserPrefModel Target new user prefs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void resetUserPrefModel(ReadOnlyUserPrefModel newUserPrefModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param guiSettings GUI settings"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the user prefs\u0027 path of block data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param blockDataFilePath File path of the block data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockDataFilePath(Path blockDataFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 45
    }
  },
  {
    "path": "src/main/java/com/notably/model/userpref/UserPrefModelImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.userpref;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class UserPrefModelImpl implements UserPrefModel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Path blockDataFilePath \u003d Paths.get(\"data\" , \"blockdata.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public UserPrefModelImpl() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param userPrefs {@code UserPrefs} data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public UserPrefModelImpl(ReadOnlyUserPrefModel userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        resetUserPrefModel(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUserPrefModel(ReadOnlyUserPrefModel userPrefModel) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        resetUserPrefModel(userPrefModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ReadOnlyUserPrefModel getUserPrefModel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void resetUserPrefModel(ReadOnlyUserPrefModel newUserPrefModel) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(newUserPrefModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        setGuiSettings(newUserPrefModel.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        setBlockDataFilePath(newUserPrefModel.getBlockDataFilePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path getBlockDataFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockDataFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockDataFilePath(Path blockDataFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(blockDataFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.blockDataFilePath \u003d blockDataFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!(other instanceof UserPrefModel)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel o \u003d (UserPrefModel) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return guiSettings.equals(o.getGuiSettings())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \u0026\u0026 blockDataFilePath.equals(o.getBlockDataFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return Objects.hash(guiSettings, blockDataFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + blockDataFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 38,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/notably/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeImpl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Contains utility methods for populating {@code BlockTree} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Block welcome \u003d new BlockImpl(new Title(\"Welcome\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Body(\"We, at Notably, are happy to welcome to this great application!\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"Let\u0027s quickly run through how to use our application!\\n\\n- Type \u0027open Step 1\u0027 to open the \u0027Step 1\u0027 \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"note.\\n\\nPay attention to the currently opened note in the sidebar on the left!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Block step1 \u003d new BlockImpl(new Title(\"Step 1\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Body(\"Nice! You\u0027re good at this \u0027opening note\u0027 thing.\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"As you can see, the \u0027Step 1\u0027 note is a child of the \u0027Welcome\u0027 note. \\n\\nNow, let\u0027s go to the \u0027Step 2\u0027 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"note. BUT WAIT! If you notice in the sidebar, \u0027Step 2\u0027 is not a child of the current note. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"(Notes can work like folders too!)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"We can do this in 2 ways:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"Basic method:\\n- Type \u0027open ../\u0027 to go back one note (the parent of the current note)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"- Then type \u0027open Step 2\u0027\\n\\nAdvanced method:\\n- Type \u0027open ../Step 2\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"! If the note you want to go to is even further back, you can stack \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"the navigation paths, for example \u0027open ../../../Note1/Note1Child\u0027\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Block step2 \u003d new BlockImpl(new Title(\"Step 2\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Body(\"You\u0027re a navigation master at this point! Well done!\\n\\nLet\u0027s add a new note here!\\n\\n- Type \u0027new\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \" -t A new title -b Contents here\u0027 to create a child note here with the title \u0027A new title\u0027 and the \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"body content \u0027Contents here\u0027\\n\\nOnce that\u0027s done, check the note you\u0027ve just made and then navigate to \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"\u0027Step 3\u0027\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Block step3 \u003d new BlockImpl(new Title(\"Step 3\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Body(\"Good work on making a new note there. Now let\u0027s try deleting a note!\\n\\n- Type \u0027delete DeleteMe\u0027 to \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"delete the note with the title \u0027DeleteMe\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Block deleteMe \u003d new BlockImpl(new Title(\"DeleteMe\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Body(\"Please... Put me out of my misery... Delete me!!!!\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static BlockModel getSampleBlockModel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel sampleBm \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTree sampleBt \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        sampleBt.add(AbsolutePath.fromString(\"/\"), welcome);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBt.add(AbsolutePath.fromString(\"/Welcome\"), step1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBt.add(AbsolutePath.fromString(\"/Welcome/\"), step2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBt.add(AbsolutePath.fromString(\"/Welcome/\"), step3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBt.add(AbsolutePath.fromString(\"/Welcome/Step 3\"), deleteMe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBm.setBlockTree(sampleBt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        sampleBm.setCurrentlyOpenBlock(AbsolutePath.fromString(\"/Welcome\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return sampleBm;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 7,
      "firzanarmani": 44,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/model/viewstate/BlockEditFlagModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for the BlockEditFlagModel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the state of the Block Edit modal, which can be activated when the user types"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * the \"edit\" command. This state is then used to determine whether the modal is displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Also contains supporting operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface BlockEditFlagModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Represents a flag determining whether or not a Edit modal should be opened."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A javafx BooleanProperty object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    BooleanProperty blockEditableProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gets the flag representing whether the Block Edit Modal should be displayed or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A Boolean. true if the Help Model should be displayed, false otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    Boolean isBlockEditable();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the value for the boolean flag representing whether the Block Edit Modal should be displayed or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param bool true if the Edit Modal is to be displayed, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void setBlockEditable(Boolean bool);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 35
    }
  },
  {
    "path": "src/main/java/com/notably/model/viewstate/CommandInputModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for the CommandInputModel component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the data that the user sees as text within the text field of the CommandInputView"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * as well as some supporting operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface CommandInputModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Represents the text data that the user currently sees within the text field of the CommandInputView."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A javafx StringProperty object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    StringProperty inputProperty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gets the text data saved in the CommandInputModel."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A string corresponding to the text data saved in the CommandInputModel."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    String getInput();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the data for the text in the CommandInputModel."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param input A String corresponding to the new text data in the CommandInputModel."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void setInput(String input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Clears the data saved in the CommandInputModel."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void clearInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 5,
      "HemanshuGandhi": 33
    }
  },
  {
    "path": "src/main/java/com/notably/model/viewstate/HelpFlagModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for the HelpFlagModel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the state of the Help modal in the View, which can be modified in response to user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * events (user selects the Help tab via keyboard/mouse, or by typing the \"Help\" command). This"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * state is then used to determine whether the modal is displayed. Also contains supporting operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface HelpFlagModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Represents a flag determining whether or not a help modal should be opened."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A javafx BooleanProperty object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    BooleanProperty helpOpenProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gets the flag representing whether the Help Window should be displayed or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A Boolean. true if the Help Window should be displayed, false otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    Boolean isHelpOpen();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the value for the boolean flag representing whether the Help Window should be displayed or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param bool true if the Help Window is to be displayed, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void setHelpOpen(Boolean bool);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 34
    }
  },
  {
    "path": "src/main/java/com/notably/model/viewstate/ViewStateModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for the ViewStateModel component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface ViewStateModel extends CommandInputModel, HelpFlagModel, BlockEditFlagModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Shows user the meaning of their input, e.g. \"Create a new note\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * When input cannot get corrected in SuggestionEngine and/ or Parser, the \"error\" message will be shown"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * in responseTextProperty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The meaning of the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Property\u003cOptional\u003cString\u003e\u003e responseTextProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Updates the responseTextProperty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param responseTextStr A response text to the user, which could be an explanation of the typed command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * or an error message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void setResponseText(String responseTextStr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Resets the response text when the user clears the input text field."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void clearResponseText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 24,
      "HemanshuGandhi": 9
    }
  },
  {
    "path": "src/main/java/com/notably/model/viewstate/ViewStateModelImpl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the data that the user can manipulate through interaction with front-facing components"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * such as buttons and text fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewStateModelImpl implements ViewStateModel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private final StringProperty input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private final BooleanProperty helpOpen;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private final BooleanProperty blockEditable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private final Property\u003cOptional\u003cString\u003e\u003e responseText;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewStateModelImpl() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this(\"\", false, false, Optional.empty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private ViewStateModelImpl(String initialInput, boolean initialHelpBool,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                               boolean initialBlockEditBool, Optional\u003cString\u003e initialResponseText) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(initialInput, initialHelpBool, initialBlockEditBool, initialResponseText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.input \u003d new SimpleStringProperty(initialInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.helpOpen \u003d new SimpleBooleanProperty(initialHelpBool);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.blockEditable \u003d new SimpleBooleanProperty(initialBlockEditBool);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.responseText \u003d new SimpleObjectProperty\u003c\u003e(initialResponseText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandInputModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public StringProperty inputProperty() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.input.getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.input.setValue(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        input.setValue(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HelpFlagModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BooleanProperty helpOpenProperty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.helpOpen;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public Boolean isHelpOpen() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.helpOpen.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setHelpOpen(Boolean bool) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(bool);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.helpOpen.setValue(bool);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BlockEditFlagModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BooleanProperty blockEditableProperty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.blockEditable;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public Boolean isBlockEditable() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.blockEditable.getValue();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setBlockEditable(Boolean bool) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(bool);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.blockEditable.setValue(bool);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Response Text \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cOptional\u003cString\u003e\u003e responseTextProperty() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return responseText;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setResponseText(String responseTextStr) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(responseTextStr);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        responseText.setValue(Optional.of(responseTextStr));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseText() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        responseText.setValue(Optional.empty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 25,
      "HemanshuGandhi": 88
    }
  },
  {
    "path": "src/main/java/com/notably/storage/BlockStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a storage for {@link com.notably.model.BlockModel}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Path getBlockDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns BlockModel data as a {@link BlockModel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cBlockModel\u003e readBlockModel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @see #getBlockModelFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cBlockModel\u003e readBlockModel(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Saves the given {@link BlockModel} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param blockModel cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveBlockModel(BlockModel blockModel) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @see #saveBlockModel(BlockModel)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveBlockModel(BlockModel blockModel, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 45
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonAdaptedBlockTreeItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeItemImpl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Jackson-friendly version of {@link BlockTreeItem}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "class JsonAdaptedBlockTreeItem {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Block\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BLOCK_CHILD \u003d \"Block\u0027s children list contains duplicate children.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final String body;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final List\u003cJsonAdaptedBlockTreeItem\u003e children \u003d new ArrayList\u003cJsonAdaptedBlockTreeItem\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code JsonAdaptedBlockTreeItem} with the given {@code BlockTreeItem} details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public JsonAdaptedBlockTreeItem(@JsonProperty(\"title\") String title, @JsonProperty(\"body\") String body,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        @JsonProperty(\"children\") List\u003cJsonAdaptedBlockTreeItem\u003e children) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (children !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.children.addAll(children);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Converts a given {@code BlockTreeItem} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public JsonAdaptedBlockTreeItem(BlockTreeItem source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        title \u003d source.getTitle().getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        body \u003d source.getBody().getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        children.addAll(source.getBlockChildren()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .stream().map(JsonAdaptedBlockTreeItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Converts this Jackson-friendly adapted {@code BlockTreeItem} object into the model\u0027s"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *  {@code BlockTreeItem} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTreeItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (body \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Body.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final Body modelBody \u003d new Body(body);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final Block modelBlock \u003d new BlockImpl(modelTitle, modelBody);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final List\u003cBlockTreeItem\u003e modelChildren \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (JsonAdaptedBlockTreeItem jsonAdaptedBlockTreeItem : children) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            BlockTreeItem blockTreeItem \u003d jsonAdaptedBlockTreeItem.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (modelChildren.contains(blockTreeItem)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BLOCK_CHILD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            modelChildren.add(blockTreeItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final BlockTreeItem modelBlockTreeItem \u003d new BlockTreeItemImpl(modelBlock);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!modelChildren.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            modelBlockTreeItem.setBlockChildren(modelChildren);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return modelBlockTreeItem;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 91
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonBlockStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A class to access Block data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class JsonBlockStorage implements BlockStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBlockStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public JsonBlockStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path getBlockDataFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cBlockModel\u003e readBlockModel() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return readBlockModel(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Similar to {@link #readBlockModel()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cBlockModel\u003e readBlockModel(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Optional\u003cJsonSerializableBlockModel\u003e jsonBlockModel \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                filePath, JsonSerializableBlockModel.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!jsonBlockModel.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return Optional.of(jsonBlockModel.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel(BlockModel blockModel) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        saveBlockModel(blockModel, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Similar to {@link #saveBlockModel(BlockModel)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel(BlockModel blockModel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(blockModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBlockModel(blockModel), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 6,
      "-": 54,
      "firzanarmani": 20
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonSerializableBlockModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A BlockModel that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "@JsonRootName(value \u003d \"blockdata\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "class JsonSerializableBlockModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MISSING_LAST_OPENED_PATH_FIELD \u003d \"lastOpenedPath field is missing.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BLOCK_CHILD \u003d \"Block\u0027s children list contains duplicate children.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final List\u003cJsonAdaptedBlockTreeItem\u003e root \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String lastOpenedPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code JsonSerializableBlockModel} with the given model root\u0027s childblocks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public JsonSerializableBlockModel(@JsonProperty(\"root\") List\u003cJsonAdaptedBlockTreeItem\u003e items,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        @JsonProperty(\"lastOpenedPath\") String lastOpenedPath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        root.addAll(items);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.lastOpenedPath \u003d lastOpenedPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Converts a given {@code BlockModel} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBlockModel}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public JsonSerializableBlockModel(BlockModel source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        root.addAll(source.getBlockTree()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getRootBlock()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getBlockChildren()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .map(JsonAdaptedBlockTreeItem::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        lastOpenedPath \u003d source.getCurrentlyOpenPath().getStringRepresentation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Converts this block model into the model\u0027s {@code BlockModel} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockModel toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModel \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Generate the tree"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTree blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        List\u003cBlockTreeItem\u003e rootChildren \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (JsonAdaptedBlockTreeItem jsonAdaptedBlockTreeItem : root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            BlockTreeItem blockTreeItem \u003d jsonAdaptedBlockTreeItem.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (rootChildren.contains(blockTreeItem)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BLOCK_CHILD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            rootChildren.add(blockTreeItem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (!rootChildren.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            blockTree.getRootBlock()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                .setBlockChildren(rootChildren);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setBlockTree(blockTree);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Get the last opened path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (lastOpenedPath \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new IllegalValueException(MISSING_LAST_OPENED_PATH_FIELD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        final AbsolutePath lastOpenedPath \u003d AbsolutePath.fromString(this.lastOpenedPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (blockModel.hasPath(lastOpenedPath)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            blockModel.setCurrentlyOpenBlock(lastOpenedPath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return blockModel;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (rootChildren.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            blockModel.setCurrentlyOpenBlock(AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return blockModel;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem firstChild \u003d rootChildren.get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        List\u003cString\u003e pathComponentsToFirstChild \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        pathComponentsToFirstChild.add(firstChild.getTitle().getText());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(AbsolutePath.fromComponents(pathComponentsToFirstChild));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 97
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cUserPrefModel\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cUserPrefModel\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Optional\u003cUserPrefModelImpl\u003e possible \u003d JsonUtil.readJsonFile(prefsFilePath, UserPrefModelImpl.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return possible.map(UserPrefModel.class::cast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefModel userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 38,
      "firzanarmani": 8
    }
  },
  {
    "path": "src/main/java/com/notably/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface Storage extends BlockStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Path getBlockDataFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cBlockModel\u003e readBlockModel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cBlockModel\u003e readBlockModel(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveBlockModel(BlockModel blockModel) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveBlockModel(BlockModel blockModel, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cUserPrefModel\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefModel userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 21,
      "firzanarmani": 13
    }
  },
  {
    "path": "src/main/java/com/notably/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Manages storage of BlockModel data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockStorage blockStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public StorageManager(BlockStorage blockStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.blockStorage \u003d blockStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cUserPrefModel\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefModel userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BlockModel methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path getBlockDataFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockStorage.getBlockDataFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cBlockModel\u003e readBlockModel() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return readBlockModel(blockStorage.getBlockDataFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Optional\u003cBlockModel\u003e readBlockModel(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockStorage.readBlockModel(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel(BlockModel blockModel) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        saveBlockModel(blockModel, blockStorage.getBlockDataFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel(BlockModel blockModel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockStorage.saveBlockModel(blockModel, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 54,
      "firzanarmani": 20
    }
  },
  {
    "path": "src/main/java/com/notably/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.ReadOnlyUserPrefModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a storage for {@link com.notably.model.UserPrefModel}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Optional\u003cUserPrefModel\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Saves the given {@link com.notably.model.ReadOnlyUserPrefModel} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefModel userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 28,
      "firzanarmani": 6
    }
  },
  {
    "path": "src/main/java/com/notably/view/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.suggestion.SuggestionsWindowView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * The VIEW component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class CommandBox extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, StringProperty stringProperty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(commandExecutor, stringProperty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Platform.runLater(() -\u003e commandTextField.requestFocus());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeListeners(stringProperty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up weak and strong listeners for view-state management."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param stringProperty A property that, upon method execution, reflects the data that"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * the user types in the model, and also reflects changes in the model to the text field."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeListeners(StringProperty stringProperty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandTextField.textProperty().bindBidirectional(stringProperty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandTextField.focusedProperty().addListener((observable, unused, isNowFocused) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (isNowFocused) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                Platform.runLater(() -\u003e commandTextField.selectEnd());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setNavigationHandler();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Listens for keystrokes that signify the event where the user navigates out of the CommandBox."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gives control to the {@link SuggestionsWindowView}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setNavigationHandler() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (KeyCode.DOWN \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                Window mainStage \u003d Stage.getWindows().stream().filter(Window::isShowing).findFirst().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                Node suggestionsList \u003d mainStage.getScene().lookup(\"#suggestionsListPanel\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                if (suggestionsList.isVisible()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    suggestionsList.requestFocus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * @see com.notably.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        void execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 50,
      "kevinputera": 5,
      "-": 67,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.commons.Help;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.commons.compiler.Compiler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class HelpWindow extends ViewPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w17-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static Stage stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private WebView commandSummary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Creates a new help modal."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param root Stage to use as the root of the help modal."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(root);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.stage \u003d root;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setCommandSummary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Creates a new help modal."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Loads the Command Summary text into the CommandSummary webview component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setCommandSummary() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String markdownContent \u003d Help.getCommandSummaryMarkdown();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String htmlContent \u003d Compiler.compile(markdownContent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandSummary.getEngine().loadContent(htmlContent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandSummary.getEngine().setUserStyleSheetLocation(getClass()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                .getResource(\"/view/blockcontent/BlockContentDisplay.css\").toExternalForm());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Shows the help modal."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Returns true if the help modal is currently being shown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Hides the help modal."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Focuses on the help modal."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Copied User Guide Url\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 36,
      "kevinputera": 3,
      "-": 92
    }
  },
  {
    "path": "src/main/java/com/notably/view/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.blockcontent.BlockContentView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.sidebar.SideBarTreeView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.suggestion.SuggestionsWindowView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class MainWindow extends ViewPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private SideBarTreeView sidebarTreeView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private BlockContentView blockContentView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private SuggestionsWindowView suggestionsWindowView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label notablyLogo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox mainWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox sideBar;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private StackPane sideBarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox blockContentPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox suggestionsWindow;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(primaryStage, logic, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeHelpWindow(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, model.inputProperty());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sidebarTreeView \u003d new SideBarTreeView(model.getBlockTree(), model.currentlyOpenPathProperty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarPlaceholder.getChildren().add(sidebarTreeView.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentView \u003d new BlockContentView(blockContentPlaceholder, logic, model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsWindowView \u003d new SuggestionsWindowView(model.getSuggestions(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                model.responseTextProperty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsWindow.getChildren().add(suggestionsWindowView.getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBar.setPrefWidth(guiSettings.getWindowWidth() * 0.25);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Creates and returns the HelpWindow component. In the process, sets a listener to ensure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * that the Help Window is opened when activated."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param model app\u0027s model."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeHelpWindow(Model model) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.helpOpenProperty().addListener((Observable observable) -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (model.isHelpOpen()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            model.setHelpOpen(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Opens the help modal or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @see com.notably.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logic.execute(commandText);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 69,
      "kevinputera": 7,
      "-": 89,
      "firzanarmani": 2,
      "ljiazh3ng": 3
    }
  },
  {
    "path": "src/main/java/com/notably/view/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API of VIEW component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface View {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /** Starts the VIEW (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 12,
      "kevinputera": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/ViewManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * The manager of the VIEW component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewManager implements View {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ViewManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/notably_logo_48.png\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(logic, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(primaryStage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Starting VIEW...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(imagePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(type, title, headerText, contentText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(owner, type, title, headerText, contentText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/NotablyTheme.css\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 24,
      "kevinputera": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/notably/view/ViewOnlyModal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.commons.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.effect.ColorAdjust;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for Modals that are used in the Notably application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public abstract class ViewOnlyModal extends ViewPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected static String loggerSource;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected Logger logger;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected Window parentStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected BooleanProperty modelProperty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewOnlyModal(String fxml, Stage root, Model model, BooleanProperty modelProperty,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                         String loggerSource) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(fxml, root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(model, modelProperty, loggerSource);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.modelProperty \u003d modelProperty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.loggerSource \u003d loggerSource;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.logger \u003d getLoggingClass();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.stage \u003d root;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.parentStage \u003d Stage.getWindows().stream().filter(Window::isShowing).findFirst().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setStageStyle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setChangeListeners();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setInitialData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up the modal\u0027s initial data;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected abstract void setInitialData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Helper method that sets the value of the modal\u0027s modelProperty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param bool true if the property is to be set as true, false otherwise."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected abstract void setModelProperty(Boolean bool);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected Logger getLoggingClass() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Customizes the appearance and attributes of the modal."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setStageStyle() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.initStyle(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.initOwner(parentStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.initModality(Modality.WINDOW_MODAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners that update the content in the modal and toggle the visibility"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * and controls of the modal."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setChangeListeners() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setModalVisibilityListeners();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setKeyboardListeners();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setInitialDimensionListeners();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setStageDimensionListeners();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners that bring the modal into view when required, and in doing so apply"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * certain stylings to the main app window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setModalVisibilityListeners() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        updateMainWindowStyle(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        modelProperty.addListener((observable, unused, isPropertyValueTrue) -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (isPropertyValueTrue) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                handle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                setModelProperty(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            updateMainWindowStyle(isPropertyValueTrue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners to trigger changes in the visibility of the modal when certain Keystrokes"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * are registered. Primarily, allows for the user to exit the modal using the \"ESC\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * keyboard shortcut."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setKeyboardListeners() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                handleClose();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners that correctly initialise the X and Y coordinates of the modal such"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * that it is centered to the main app window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setInitialDimensionListeners() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        ChangeListener\u003cNumber\u003e widthListener \u003d (observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setXDisplacement();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        ChangeListener\u003cNumber\u003e heightListener \u003d (observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setYDisplacement();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.widthProperty().addListener(widthListener);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.heightProperty().addListener(heightListener);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setOnShown(e -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            stage.widthProperty().removeListener(widthListener);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            stage.heightProperty().removeListener(heightListener);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners that change the dimensions of the modal upon being repeatedly"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * opened and closed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setStageDimensionListeners() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setXDisplacement();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setYDisplacement();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setOnShowing(event -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setStageDimensionListeners();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Closes the modal."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void handleClose() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Opens the modal or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void handle() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (!isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Applies a darkening effect to the main app window, whenever the modal"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * is currently being displayed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param isModalShowing A boolean that is true if the modal is to be shown, false otherwise."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void updateMainWindowStyle(Boolean isModalShowing) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(isModalShowing);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Node mainWindow \u003d parentStage.getScene().lookup(\"#mainWindow\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        ChangeListener\u003cBoolean\u003e focusedListener \u003d (observable, unused, isFocused) -\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (!isFocused \u0026\u0026 stage.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                ColorAdjust colorAdjust \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                colorAdjust.setBrightness(-0.4);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                mainWindow.setEffect(colorAdjust);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                mainWindow.setEffect(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (isModalShowing) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            parentStage.focusedProperty().addListener(focusedListener);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            parentStage.focusedProperty().removeListener(focusedListener);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Shows the modal."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               Application Thread."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Showing \" + loggerSource);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Returns true if the modal is currently being shown."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Hides the modal."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Closing \" + loggerSource);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Focuses on the modal."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Calculates and sets the width of the modal with respect to the main app window."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setXDisplacement() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Double newWidth \u003d parentStage.getWidth() * 0.8;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setWidth(newWidth);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setX(parentStage.getX() + parentStage.getWidth() / 2 - newWidth / 2);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Calculates and sets the height of the modal with respect to the main app window."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setYDisplacement() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Double newHeight \u003d parentStage.getHeight() * 0.7;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setHeight(newHeight);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        stage.setY(parentStage.getY() + parentStage.getHeight() / 3 - newHeight / 3);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 261
    }
  },
  {
    "path": "src/main/java/com/notably/view/ViewPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents a distinct part of the VIEW. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public abstract class ViewPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @see #ViewPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @see #ViewPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Returns the root object of the scene graph of this ViewPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 14,
      "kevinputera": 2,
      "-": 74
    }
  },
  {
    "path": "src/main/java/com/notably/view/blockcontent/BlockContentDisplayView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view.blockcontent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.compiler.Compiler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.view.ViewPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Read-only and rendered view of the currently open block\u0027s content."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class BlockContentDisplayView extends ViewPart\u003cWebView\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"blockcontent/BlockContentDisplayView.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox blockContentDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private HBox blockTitlePathContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label blockTitleDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Pane separator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label blockPathDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private WebView blockBodyDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public BlockContentDisplayView(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up the view\u0027s initial data and wires up all required change listeners."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        updateBlockContentDisplay(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setChangeListeners();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Updates the content of the view-components to that of the currently open block."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param model App\u0027s model."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void updateBlockContentDisplay(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        AbsolutePath currentlyOpenPath \u003d model.getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        BlockTreeItem currentlyOpenBlock \u003d model.getBlockTree().get(currentlyOpenPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        updateBlockTitleDisplay(currentlyOpenBlock);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        updateBlockPathDisplay(currentlyOpenPath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        updateBlockBodyDisplay(currentlyOpenBlock);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the blockTitleDisplay\u0027s text to the currently open block\u0027s {@link com.notably.model.block.Title}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param currentlyOpenBlock A {@link BlockTreeItem} representing the currently open note block."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void updateBlockTitleDisplay(BlockTreeItem currentlyOpenBlock) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Objects.requireNonNull(currentlyOpenBlock);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String titleString \u003d currentlyOpenBlock.getTitle().getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockTitleDisplay.setText(titleString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the blockPathDisplay\u0027s text to the currently open block\u0027s {@link AbsolutePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param currentlyOpenPath A {@link BlockTreeItem} representing the currently open note block."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void updateBlockPathDisplay(AbsolutePath currentlyOpenPath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Objects.requireNonNull(currentlyOpenPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String pathString \u003d currentlyOpenPath.getStringRepresentation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockPathDisplay.setText(pathString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the blockBodyDisplay\u0027s text to the currently open block\u0027s {@link com.notably.model.block.Body}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param currentlyOpenBlock A {@link BlockTreeItem} representing the currently open note block."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void updateBlockBodyDisplay(BlockTreeItem currentlyOpenBlock) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Objects.requireNonNull(currentlyOpenBlock);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String htmlBody \u003d getHtmlBody(currentlyOpenBlock);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockBodyDisplay.getEngine().loadContent(htmlBody);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockBodyDisplay.getEngine().setUserStyleSheetLocation(getClass()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                .getResource(\"/view/blockcontent/BlockContentDisplay.css\").toExternalForm());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Helper function to retrieve the currently open block\u0027s {@link com.notably.model.block.Body}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * rendered as HTML."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param currentlyOpenBlock A {@link BlockTreeItem} representing the currently open note block."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A String representing the note\u0027s body."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private String getHtmlBody(BlockTreeItem currentlyOpenBlock) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Objects.requireNonNull(currentlyOpenBlock);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String markdownBody \u003d currentlyOpenBlock.getBody().getText();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String htmlBody \u003d Compiler.compile(markdownBody);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return htmlBody;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up listeners for View state management."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setChangeListeners() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.currentlyOpenPathProperty().addListener(observable -\u003e updateBlockContentDisplay(model));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.getBlockTree().getRootBlock().getTreeItem()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                .addEventHandler(TreeItem.treeNotificationEvent(), event -\u003e updateBlockContentDisplay(model));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 92,
      "kevinputera": 47
    }
  },
  {
    "path": "src/main/java/com/notably/view/blockcontent/BlockContentEditView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view.blockcontent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.logic.exceptions.EditBlockBodyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.ViewOnlyModal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * View-Controller for the Editable view of the currently open block\u0027s content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class BlockContentEditView extends ViewOnlyModal {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"blockcontent/BlockContentEditView.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String LOGGER_SOURCE \u003d \"Edit Modal\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private TextArea blockContentTextArea;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BlockContentEditView(Logic logic, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML, new Stage(), model, model.blockEditableProperty(), LOGGER_SOURCE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(logic);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setChangeListeners() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setContentChangeListeners();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super.setChangeListeners();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setModelProperty(Boolean bool) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.setBlockEditable(bool);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Closes the Block Edit modal after saving the changes to the note\u0027s contents."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void handleClose() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        saveData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super.handleClose();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners that update the text content in the Block Edit modal to that of the currently"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * opened note, and whenever there are changes to the {@link com.notably.model.block.BlockTree};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setContentChangeListeners() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.currentlyOpenPathProperty().addListener(observable -\u003e setText(model));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        model.getBlockTree().getRootBlock().getTreeItem()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                .addEventHandler(TreeItem.treeNotificationEvent(), event -\u003e setText(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up the view\u0027s initial data and wire up all required change listeners."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setInitialData() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setText(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the {@link TextArea}\u0027s content to the currently open block\u0027s content in markdown form."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param model App\u0027s model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void setText(Model model) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        AbsolutePath currentlyOpenPath \u003d model.getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        BlockTreeItem currentlyOpenBlock \u003d model.getBlockTree().get(currentlyOpenPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String markdownBody \u003d currentlyOpenBlock.getBody().getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentTextArea.setText(markdownBody);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Saves the data in the Block Edit Modal by notifying the {@link Logic} layer of the app."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void saveData() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            logic.editCurrentBlockBody(blockContentTextArea.getText());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            logger.info(\"Writing new Note\u0027s contents to file...\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } catch (EditBlockBodyException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            logger.warning(\"Unable to write new contents to file.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 82,
      "kevinputera": 19
    }
  },
  {
    "path": "src/main/java/com/notably/view/blockcontent/BlockContentView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view.blockcontent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * View of the currently open block\u0027s content."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class BlockContentView {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final BlockContentDisplayView blockContentDisplayView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final BlockContentEditView blockContentEditView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BlockContentView(VBox blockContentPlaceholder, Logic logic, Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(blockContentPlaceholder, model, logic);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockContentDisplayView \u003d new BlockContentDisplayView(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentEditView \u003d new BlockContentEditView(logic, model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentPlaceholder.getChildren().add(blockContentDisplayView.getRoot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 9,
      "kevinputera": 18
    }
  },
  {
    "path": "src/main/java/com/notably/view/sidebar/SideBarTreeView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.ViewPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.event.EventDispatcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TreeView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the View-Controller for the SideBarTreeView component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class SideBarTreeView extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"SideBarTreeView.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private BlockTreeItem currentlyOpenedNote;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private TreeView\u003cBlock\u003e sideBarTreeView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public SideBarTreeView(BlockTree blockTree, Property\u003cAbsolutePath\u003e currentlyOpenPathProperty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(blockTree, currentlyOpenPathProperty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.currentlyOpenedNote \u003d blockTree.get(currentlyOpenPathProperty.getValue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        autoUpdateTree(blockTree, currentlyOpenPathProperty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeTree();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Listens to changes in the structure of the tree in the Model, and accordingly updates the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * currently opened Note in the SidebarTreeView."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param blockTree A custom object that represents the tree-like hierarchy of Notes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param currentlyOpenPathProperty The path to the currently opened Note."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void autoUpdateTree(BlockTree blockTree, Property\u003cAbsolutePath\u003e currentlyOpenPathProperty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        currentlyOpenPathProperty.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            this.currentlyOpenedNote \u003d blockTree.get(AbsolutePath.fromString(newValue.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            initializeTree();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Calls helper functions that set the tree settings and populate the SideBarTreeView with data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeTree() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setTreeStructure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setTreeSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Provides an alternative way to specify TreeView settings, versus via fxml tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setTreeSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setEditable(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        EventDispatcher sideBarEventDispatcher \u003d sideBarTreeView.getEventDispatcher();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setEventDispatcher(new TreeCellEventDispatcher(sideBarEventDispatcher));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Calls helper functions that set the strategies for populating the SideBarTreeView with data."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setTreeStructure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setCellFactory(treeView -\u003e new SideBarTreeViewCell(currentlyOpenedNote));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        useLevelDisplayStrategy();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        useExpansionStrategy();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Configures the SideBarTreeView to, when possible, display a 3-level nested hierarchy of Notes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * ie (Parent -\u003e currently opened Note and its siblings -\u003e direct children of currently opened Note)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * However, if the currently open Note is the default root Note, the Root is hidden and the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * hierarchy is modified to look like: (Root\u0027s direct children -\u003e Root\u0027s direct grandchildren)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void useLevelDisplayStrategy() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TreeItem\u003cBlock\u003e treeItem \u003d this.currentlyOpenedNote.getTreeItem();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TreeItem\u003cBlock\u003e treeParent \u003d treeItem.getParent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Boolean isRootOpen \u003d treeParent \u003d\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (isRootOpen) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            useRootNoteOpenStrategy(treeItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            useNormalNoteOpenStrategy(treeParent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Helper function that sets the display strategy for the case that the currently open Note"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * is a root Note, as per {@link #useLevelDisplayStrategy()}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param treeItem the currently open Note."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void useRootNoteOpenStrategy(TreeItem\u003cBlock\u003e treeItem) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setShowRoot(false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setRoot(treeItem);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Helper function that sets the display strategy for the case that the currently open Note"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * is not a root Note, as per {@link #useLevelDisplayStrategy()}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param treeParent the parent of the currently open Note."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void useNormalNoteOpenStrategy(TreeItem\u003cBlock\u003e treeParent) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Boolean isParentRoot \u003d treeParent.getParent() \u003d\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (!isParentRoot) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            sideBarTreeView.setShowRoot(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            sideBarTreeView.setShowRoot(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.setRoot(treeParent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Expands the first and second level nodes, and contracts the third level nodes as per the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * 3-level Display Strategy of {@link #useLevelDisplayStrategy()}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void useExpansionStrategy() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.getRoot().setExpanded(true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeView.getRoot().getChildren()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                .forEach(child -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    child.setExpanded(true);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    child.getChildren().forEach(grandChild -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        grandChild.setExpanded(false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 139,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/sidebar/SideBarTreeViewCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TreeCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Custom {@code TreeCell} that displays the text of a {@code Block} within {@link SideBarTreeView}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "class SideBarTreeViewCell extends TreeCell\u003cBlock\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private BlockTreeItem currentlyOpenedNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public SideBarTreeViewCell(BlockTreeItem currentlyOpenedNote) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.currentlyOpenedNote \u003d currentlyOpenedNote;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected void updateItem(Block block, boolean empty) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super.updateItem(block, empty);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setGraphic(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (empty || block \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setText(getNoteTitle());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setSelectedProperty(block);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private String getNoteTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return getItem().getTitle().getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setSelectedProperty(Block block) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if ((block \u003d\u003d currentlyOpenedNote.getBlock())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            updateSelected(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 43
    }
  },
  {
    "path": "src/main/java/com/notably/view/sidebar/TreeCellEventDispatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.event.EventDispatchChain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.event.EventDispatcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Custom {@code EventDispatcher} to allow for finer control over mouse click events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * A {@link SideBarTreeViewCell} should not respond to any mouse click events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "class TreeCellEventDispatcher implements EventDispatcher {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private final EventDispatcher original;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public TreeCellEventDispatcher(EventDispatcher original) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.original \u003d original;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public Event dispatchEvent(Event event, EventDispatchChain tail) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (event.getEventType().equals(MouseEvent.MOUSE_PRESSED)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return original.dispatchEvent(event, tail);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 28
    }
  },
  {
    "path": "src/main/java/com/notably/view/suggestion/SuggestionsListCellData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.ViewPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Custom View-Controller for the components within a {@code SuggestionsListViewCell}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class SuggestionsListCellData extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"suggestion/SuggestionsListViewCell.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private HBox container;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label pathLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label selectedItemLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label searchFrequencyLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Pane leftPlaceholderPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Pane rightPlaceholderPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public SuggestionsListCellData(SuggestionItem suggestionItem, boolean isSelected) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(suggestionItem, isSelected);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setPathLabel(suggestionItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setSearchFrequencyLabel(suggestionItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setSelectedItemLabel(suggestionItem, isSelected);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Getter for the Root Component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return container of type {@code HBox}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public HBox getHBox() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return container;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Updates the pathLabel with the String representation of the {@code SuggestionItem\u0027s} path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param item a particular {@code SuggestionItem} from the list of current suggestions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setPathLabel(SuggestionItem item) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Optional\u003cString\u003e displayProperty \u003d item.getProperty(\"displayText\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String displayString \u003d displayProperty.orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        pathLabel.setText(displayString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Updates the searchFrequencyLabel with the {@code SuggestionItem\u0027s} search count. If the current"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * list of suggestions was not generated for a search command, the label is set to an empty string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * See {@link com.notably.logic.commands.suggestion.SearchSuggestionCommand}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param item a particular {@code SuggestionItem} from the list of current suggestions."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setSearchFrequencyLabel(SuggestionItem item) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Optional\u003cString\u003e frequencyProperty \u003d item.getProperty(\"frequency\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        String frequencyString \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (frequencyProperty.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            frequencyString +\u003d frequencyProperty.get() + \" matches in body\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        searchFrequencyLabel.setText(frequencyString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Updates the selectedItemLabel with a prompt text based on the current command. The prompt"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * text is set to a non-empty String if the {@code SuggestionsListViewCell} is currently"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * selected, but empty otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param item a particular {@code SuggestionItem} from the list of current suggestions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setSelectedItemLabel(SuggestionItem item, boolean isSelected) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (isSelected) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            rightPlaceholderPane.setMinWidth(30);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            selectedItemLabel.setVisible(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            Boolean isSearchCommand \u003d item.getProperty(\"frequency\").isPresent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (isSearchCommand) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                selectedItemLabel.setText((\"Press enter to go to file\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                selectedItemLabel.setText(\"Press enter to autofill\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            selectedItemLabel.setVisible(false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            rightPlaceholderPane.setMinWidth(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 109
    }
  },
  {
    "path": "src/main/java/com/notably/view/suggestion/SuggestionsListViewCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code SuggestionItem}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * within {@code SuggestionsWindowView}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * The layout of the components within a {@code SuggestionsListViewCell} is managed by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * another custom View-Controller, {@link SuggestionsListCellData}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class SuggestionsListViewCell extends ListCell\u003cSuggestionItem\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void updateItem(SuggestionItem suggestionItem, boolean empty) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super.updateItem(suggestionItem, empty);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        if (empty || suggestionItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setText(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            SuggestionsListCellData data \u003d new SuggestionsListCellData(suggestionItem, isSelected());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            setGraphic(data.getHBox());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 27
    }
  },
  {
    "path": "src/main/java/com/notably/view/suggestion/SuggestionsWindowView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.CommandBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.view.ViewPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * A View-Controller for the Suggestions List that appears in the View."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class SuggestionsWindowView extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"suggestion/SuggestionsWindowView.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final int LIST_CELL_HEIGHT \u003d 36;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private VBox suggestionsBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private Label responseText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private ListView\u003cSuggestionItem\u003e suggestionsListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public SuggestionsWindowView(ObservableList\u003cSuggestionItem\u003e suggestionsList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                                 Property\u003cOptional\u003cString\u003e\u003e responseText) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        requireAllNonNull(suggestionsList, responseText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        autoUpdateSuggestionsDisplay(suggestionsList, responseText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeSuggestionsList(suggestionsList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets listeners to update the visibility of the {@code SuggestionsWindow}, and its components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param suggestionsList The current list of suggestions from the model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param responseTextProperty The info text to be displayed above the suggestions list, if any."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void autoUpdateSuggestionsDisplay(ObservableList\u003cSuggestionItem\u003e suggestionsList,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                                              Property\u003cOptional\u003cString\u003e\u003e responseTextProperty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        responseTextProperty.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            Optional\u003cString\u003e response \u003d responseTextProperty.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (response.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                responseText.setText(response.get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                setResponseTextRenderingStatus(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                setResponseTextRenderingStatus(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsList.addListener((Observable observable) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            suggestionsListPanel.setPrefHeight(computePrefListHeight(suggestionsList.size()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (suggestionsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                setSuggestionsListRenderingStatus(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                setSuggestionsListRenderingStatus(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Calls helper functions that set the List settings and populate the SideBarTreeView with data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeSuggestionsList(ObservableList\u003cSuggestionItem\u003e suggestionsList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.setItems(suggestionsList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.setCellFactory(listView -\u003e new SuggestionsListViewCell());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeSelectionHandlers();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets up handlers that facilitate the selection of {@link SuggestionItem\u0027s}, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * facilitate navigation out of the Suggestions List."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeSelectionHandlers() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.focusedProperty().addListener((observable, unused, isNowFocused) -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (isNowFocused \u0026\u0026 suggestionsListPanel.isVisible()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                suggestionsListPanel.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (KeyCode.ENTER \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                suggestionsListPanel.getSelectionModel().getSelectedItem().getAction().run();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                navigateOutOfList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            if (KeyCode.UP \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                int selectedIndex \u003d suggestionsListPanel.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                if (selectedIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    suggestionsListPanel.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    navigateOutOfList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Helper function that handles the event where the user navigates out of the Suggestions List."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gives back control to the {@link CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void navigateOutOfList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        Window mainStage \u003d Stage.getWindows().stream().filter(Window::isShowing).findFirst().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        mainStage.getScene().lookup(\"#commandTextField\").requestFocus();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Toggles the visibility of the Suggestions List."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param bool true if the Suggestions List should be visible, false otherwise."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setSuggestionsListRenderingStatus(boolean bool) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.setManaged(bool);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        suggestionsListPanel.setVisible(bool);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Toggles the visibility of the responseText component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param bool true if the responseText should be visible, false otherwise."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setResponseTextRenderingStatus(boolean bool) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        responseText.setManaged(bool);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        responseText.setVisible(bool);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Computes the height of the Suggestions List based on the number of items in the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * This allows for the dynamic resizing of the list as the number of items change."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param listSize the number of items in the Suggestions List at a given time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return an int representing the height of the Suggestions List."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private int computePrefListHeight(int listSize) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return listSize * LIST_CELL_HEIGHT;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 153
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter a command\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cURL value\u003d\"@NotablyTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cVBox styleClass\u003d\"helpWindow\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"helpWindow\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    \u003cWebView fx:id\u003d\"commandSummary\" maxHeight\u003d\"200\" maxWidth\u003d\"650\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"helpWindow\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" styleClass\u003d\"helpLabel\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        \u003cButton fx:id\u003d\"copyButton\" text\u003d\"Copy URL\" onAction\u003d\"#copyUrl\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         title\u003d\"Notably\" minWidth\u003d\"567\" minHeight\u003d\"412\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cImage url\u003d\"@/images/notably_logo_48.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cURL value\u003d\"@NotablyTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "      \u003cVBox fx:id\u003d\"mainWindow\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003cVBox fx:id\u003d\"sideBar\" VBox.vgrow\u003d\"ALWAYS\" SplitPane.resizableWithParent\u003d\"false\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                minWidth\u003d\"180\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cLabel fx:id\u003d\"notablyLogo\" VBox.vgrow\u003d\"NEVER\" text\u003d\"NOTABLY\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cStackPane fx:id\u003d\"sideBarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"commandBox-pane\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                       minWidth\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"1\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"note-block-pane\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "              \u003cVBox fx:id\u003d\"blockContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "              \u003cVBox fx:id\u003d\"suggestionsWindow\" StackPane.alignment\u003d\"TOP_CENTER\" VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    mouseTransparent\u003d\"true\" focusTraversable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cInsets top\u003d\"1\" right\u003d\"20\" bottom\u003d\"5\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 27,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/SideBarTreeView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.TreeView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"tree-view\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "  \u003cTreeView fx:id\u003d\"sideBarTreeView\" styleClass\u003d\"tree-view\" VBox.vgrow\u003d\"ALWAYS\" focusTraversable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 8
    }
  },
  {
    "path": "src/main/resources/view/blockcontent/BlockContentDisplayView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cVBox fx:id\u003d\"blockContentDisplay\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cHBox fx:id\u003d\"blockTitlePathContainer\" VBox.vgrow\u003d\"NEVER\" alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          prefWidth\u003d\"1\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cLabel fx:id\u003d\"blockTitleDisplay\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cPane fx:id\u003d\"separator\" HBox.hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cLabel fx:id\u003d\"blockPathDisplay\" HBox.hgrow\u003d\"SOMETIMES\" textAlignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cInsets top\u003d\"12\" right\u003d\"0\" bottom\u003d\"12\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cWebView fx:id\u003d\"blockBodyDisplay\" prefWidth\u003d\"5000\" prefHeight\u003d\"5000\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 17,
      "kevinputera": 4
    }
  },
  {
    "path": "src/main/resources/view/blockcontent/BlockContentEditView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cfx:root resizable\u003d\"true\" title\u003d\"Edit Note Body\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" onCloseRequest\u003d\"#handleClose\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cImage url\u003d\"@/images/notably_logo_48.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cURL value\u003d\"@/view/NotablyTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cURL value\u003d\"@/view/Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"block-edit-modal\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    \u003cTextArea fx:id\u003d\"blockContentTextArea\" editable\u003d\"true\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                    \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 33
    }
  },
  {
    "path": "src/main/resources/view/suggestion/SuggestionsListViewCell.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cHBox fx:id\u003d\"container\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "      alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"0\" prefWidth\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cLabel fx:id\u003d\"pathLabel\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cPane fx:id\u003d\"leftPlaceholderPane\" HBox.hgrow\u003d\"ALWAYS\" minWidth\u003d\"30\" prefWidth\u003d\"60\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cLabel fx:id\u003d\"searchFrequencyLabel\" HBox.hgrow\u003d\"SOMETIMES\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cPane fx:id\u003d\"rightPlaceholderPane\" HBox.hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cLabel fx:id\u003d\"selectedItemLabel\" HBox.hgrow\u003d\"SOMETIMES\" textAlignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 15
    }
  },
  {
    "path": "src/main/resources/view/suggestion/SuggestionsWindowView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cVBox fx:id\u003d\"suggestionsBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "      styleClass\u003d\"suggestions-Window\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cLabel fx:id\u003d\"responseText\" VBox.vgrow\u003d\"NEVER\" prefWidth\u003d\"Infinity\" managed\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cListView fx:id\u003d\"suggestionsListPanel\" VBox.vgrow\u003d\"NEVER\" managed\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 11
    }
  },
  {
    "path": "src/test/data/CompilerTest/Markdown.md",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "# Components"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " ##  Header"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " ## Paragraph  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "  Lorem ipsum dolor sit amet, consectetur adipiscing elit.   "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " Donec ac mi a enim sollicitudin tincidunt et.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Quisque laoreet tellus feugiat erat mollis lacinia. Cras."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "##  Unordered Lists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- First item"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " - Second item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- ### Nested header  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "  Third item"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "   Fourth item"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "-  Fifth item  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "   - Nested item 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "      Nesting is so exciting!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "   -  Nested item 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "      -  Deeper nested item 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "      -  Deeper nested item 2  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     - Nested item 3 "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "# More testing "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "## Sample header"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Paragraph can be placed right after a header block."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Similarly, a list can be placed right after a paragraph block."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "- Here\u0027s another list item!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "If a non-indented line of text is placed right after a list, a new paragraph block should be created."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "### A header should also close a paragraph block!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "Excessive newlines should not be respected."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "It\u0027s cool isn\u0027t it!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 41
    }
  },
  {
    "path": "src/test/java/com/notably/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/notably/commons/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/notably/commons/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/notably/commons/compiler/CompilerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.compiler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class CompilerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Path PATH_TO_MARKDOWN \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"CompilerTest\", \"Markdown.md\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final Path PATH_TO_COMPILED \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"CompilerTest\", \"Compiled.html\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compile() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String markdown \u003d Files.readString(PATH_TO_MARKDOWN);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String expected \u003d Files.readString(PATH_TO_COMPILED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String compiled \u003d Compiler.compile(markdown);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expected.trim(), compiled.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 28
    }
  },
  {
    "path": "src/test/java/com/notably/commons/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/notably/commons/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.commons.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/notably/commons/path/AbsolutePathTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class AbsolutePathTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void fromString_validInputString_generateAbsolutePath() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath testInput \u003d AbsolutePath.fromString(\"/CS2103 Happy!/notes/#8.4\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        paths.add(\"CS2103 Happy!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"notes\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        paths.add(\"#8.4\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void fromString_validRootString_generateAbsolutePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath testInput \u003d AbsolutePath.fromString(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_invalidInputString1_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e AbsolutePath.fromString(\"CS2103/notes\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void toRelativePath_validInput_correctedPath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath inputAbsolutePath \u003d AbsolutePath.fromString(\"/\u0026CS2103/notes/hello\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/\u0026CS2103\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath expectedOutput \u003d RelativePath.fromString(\"notes/hello\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedOutput, inputAbsolutePath.toRelativePath(inputCurrPath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void fromRelativePath_validInput_convertedAbsolutePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath inputRelPath \u003d RelativePath.fromString(\"../../hello??\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS.2103/filler\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e expectedPaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        expectedPaths.add(\"hello??\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedPaths, AbsolutePath.fromRelativePath(inputRelPath, inputCurrPath).getComponents());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void fromRelativePath_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelPath \u003d RelativePath.fromString(\"../../hello\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e AbsolutePath.fromRelativePath(inputRelPath, inputCurrPath));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_equalPaths() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath1 \u003d AbsolutePath.fromString(\"/Hello/notes\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath2 \u003d AbsolutePath.fromString(\"/hello/nOtes\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(absolutePath1.compareTo(absolutePath2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_equalSizePathsWithDifferentComponents() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath1 \u003d AbsolutePath.fromString(\"/Hello/notes\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath2 \u003d AbsolutePath.fromString(\"/Hello/New notes\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(absolutePath1.compareTo(absolutePath2) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_differentSizePathsWithSamePrefix() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath1 \u003d AbsolutePath.fromString(\"/Hello/notes/again!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath2 \u003d AbsolutePath.fromString(\"/hello/notes\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(absolutePath1.compareTo(absolutePath2) \u003e 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_differentSizePathsWithDifferentPrefix() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath1 \u003d AbsolutePath.fromString(\"/Hello/zz/again!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath2 \u003d AbsolutePath.fromString(\"/hello/notes\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(absolutePath1.compareTo(absolutePath2) \u003e 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void equals_similarPathWithDifferentCasing_pathAreEqual() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath1 \u003d AbsolutePath.fromString(\"/cs2103\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath absolutePath2 \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(absolutePath1, absolutePath2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 51,
      "ljiazh3ng": 59
    }
  },
  {
    "path": "src/test/java/com/notably/commons/path/RelativePathTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Test for RelativePath."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class RelativePathTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void fromString_validInputString_generateAbsolutePath() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath testInput \u003d RelativePath.fromString(\"CS2103/notes~\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"CS2103\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        paths.add(\"notes~\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_invalidInputString_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e RelativePath.fromString(\"/CS2103!/notes\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void toAbsolutePath_validInput_correctedPath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath inputRelativePath \u003d RelativePath.fromString(\"CS2103/%notes%/hello\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath expectedOutput \u003d AbsolutePath.fromString(\"/CS2103/CS2103/%notes%/hello\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedOutput, inputRelativePath.toAbsolutePath(inputCurrPath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void toAbsolutePath_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath inputRelativePath \u003d RelativePath.fromString(\"../../notes/hello!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e inputRelativePath.toAbsolutePath(inputCurrPath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_equalPaths() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath1 \u003d RelativePath.fromString(\"./notes/../notes\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath2 \u003d RelativePath.fromString(\"NOtes\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(relativePath1.compareTo(relativePath2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_equalSizePathsWithDifferentComponents() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath1 \u003d RelativePath.fromString(\"Hello/notes\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath2 \u003d RelativePath.fromString(\"Hello/./New notes\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(relativePath1.compareTo(relativePath2) \u003e 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_differentSizePathsWithSamePrefix() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath1 \u003d RelativePath.fromString(\"Hello/../hellO/notes/again!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath2 \u003d RelativePath.fromString(\"./hello/notes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(relativePath1.compareTo(relativePath2) \u003e 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void compareTo_differentSizePathsWithDifferentPrefix() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath1 \u003d RelativePath.fromString(\"Hello/../hellO/zz/again!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath relativePath2 \u003d RelativePath.fromString(\"./hello/notes\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertTrue(relativePath1.compareTo(relativePath2) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void equals_similarPathWithSameCasing_pathAreEqual() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath inputRelativePath1 \u003d RelativePath.fromString(\"@CS2103/../@CS2103\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final RelativePath inputRelativePath2 \u003d RelativePath.fromString(\"@CS2103\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(inputRelativePath2, inputRelativePath1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void equals_similarPathWithDifferentCase_pathAreEqual() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath1 \u003d RelativePath.fromString(\"cs2103\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath2 \u003d RelativePath.fromString(\"CS2103\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(inputRelativePath2, inputRelativePath1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 46,
      "ljiazh3ng": 52
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/notably_logo_48.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "kevinputera": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/com/notably/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.exceptions.EditBlockBodyException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.storage.JsonBlockStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            new BlockModelImpl(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            new SuggestionModelImpl(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            new ViewStateModelImpl(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            new UserPrefModelImpl());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() throws java.io.IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        JsonBlockStorage blockStorage \u003d new JsonBlockStorage(getTempFilePath(\"blocks\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        storageManager \u003d new StorageManager(blockStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logic \u003d new LogicManager(model, storageManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e logic.execute(invalidCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void execute_invalidCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String invalidCommand \u003d \"delete /\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e logic.execute(invalidCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void editCurrentBlockBody_editRoot_throwEditBlockBodyException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String body \u003d \"This does not matter\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(EditBlockBodyException.class, () -\u003e logic.editCurrentBlockBody(body));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void editCurrentBlockBody_validCurrentBlock_throwEditBlockBodyException()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throws CommandException, ParseException, EditBlockBodyException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String newCommandText \u003d \"new -t iLoveTesting -o\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String editBody \u003d \"This does not matter\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logic.execute(newCommandText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        logic.editCurrentBlockBody(editBody);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedCurrentPath \u003d AbsolutePath.fromString(\"/iLoveTesting\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String expectedBody \u003d \"This does not matter\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedBody, model.getBlockTree().get(expectedCurrentPath).getBlock().getBody().getText());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 84
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.RelativePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static AbsolutePath toDeletePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_validAbsolutePathWithNoChildren_blockSuccessfullyDeleted() throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(toDeletePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_validRelativePathWithNoChildren_blockSuccessfullyDeleted() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath toDeletePath \u003d RelativePath.fromString(\"CS2106/Lecture Notes\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(toDeletePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath.toAbsolutePath(TypicalBlockModel.INITIAL_OPEN_PATH)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_validAbsolutePathWithChildren_blockSuccessfullyDeleted() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(toDeletePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion1 \u003d TypicalBlockModel.PATH_TO_CS2106_LECTURES;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion2 \u003d TypicalBlockModel.PATH_TO_CS2106_TUTORIALS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion3 \u003d TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_deleteRoot_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath rootPath \u003d AbsolutePath.fromString(\"/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(rootPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_deleteNoneExistingBlockAbsolutePath_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath rootPath \u003d AbsolutePath.fromString(\"/NonExisting\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(rootPath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_deleteNoneExistingBlockRelativePath_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath rootPath \u003d RelativePath.fromString(\"./CS2103T/NonExisting\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d new DeleteCommand(rootPath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 96
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_nonNullModel_editModalPropertyTrue() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        editCommand.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.blockEditableProperty().getValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_editCommandInRoot_throwsCannotModifyRootException() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model.setCurrentlyOpenBlock(AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e editCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 50
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.isHelpOpen());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        helpCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.isHelpOpen());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 39
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/NewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class NewCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_validInput_updatedDatastructure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final Block currentBlock \u003d new BlockImpl(new Title(\"CS2103\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedPath \u003d AbsolutePath.fromString(\"/Y2S2/CS2103\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model.addBlockToCurrentPath(currentBlock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(expectedPath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_invalidInputDuplicateTitle_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final Block filler \u003d new BlockImpl(new Title(\"CS2104\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final Block duplicateBlock \u003d new BlockImpl(new Title(\"CS2104\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final NewCommand newCommandFiller \u003d new NewCommand(filler);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final NewCommand newCommandDuplicate \u003d new NewCommand(duplicateBlock);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        newCommandFiller.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e newCommandDuplicate.execute(model));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 58
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/OpenCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class OpenCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_validPath_updatedCurrentDirectory() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d AbsolutePath.fromString(\"/Y2S2/CS2106\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d new OpenCommand(toOpenPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommand.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(toOpenPath, model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void execute_invalidPath_throwsNoSuchBlockException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d AbsolutePath.fromString(\"/NoSuchBlock\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d new OpenCommand(toOpenPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e openCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 51
    }
  },
  {
    "path": "src/test/java/com/notably/logic/correction/AbsolutePathCorrectionEngineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AbsolutePathCorrectionEngineTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_nullModel_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new AbsolutePathCorrectionEngine(null, new CorrectionEngineParameters()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_negativeDistanceThreshold_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int negativeDistanceThreshold \u003d -1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setDistanceThreshold(negativeDistanceThreshold)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_negativeForwardMatchingThreshold_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int negativeForwardMatchingThreshold \u003d -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatchingThreshold(negativeForwardMatchingThreshold)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndWithinDistanceThreshold_correctionDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/y2s2/Cs2103t/Tutorials/tutorial\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cAbsolutePath\u003e expectedCorrectedItems \u003d List.of(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectedStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndExceedDistanceThreshold_correctionFailed() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/Y2s2/Cs\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.FAILED;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e(expectedCorrectedStatus);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndExactMatch_noCorrection() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/Y2s2/cs2106\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cAbsolutePath\u003e expectedCorrectedItems \u003d List.of(TypicalBlockModel.PATH_TO_CS2106);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.UNCHANGED;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndValidPrefixAndBelowForwardMatchingThreshold_forwardMatchingDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/Y\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cAbsolutePath\u003e expectedCorrectedItems \u003d List.of(TypicalBlockModel.PATH_TO_Y2S2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndInvalidPrefixAndBelowForwardMatchingThreshold_noForwardMatching() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/Z\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cAbsolutePath\u003e expectedCorrectedItems \u003d List.of(TypicalBlockModel.PATH_TO_ROOT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndWithinThresholds_forwardMatchingAndCorrectionDone() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePathCorrectionEngine correctionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final AbsolutePath uncorrectedInput \u003d AbsolutePath.fromString(\"/Y2S2/cs2105\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cAbsolutePath\u003e expectedCorrectedItems \u003d List.of(TypicalBlockModel.PATH_TO_CS2103T,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2106);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cAbsolutePath\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cAbsolutePath\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 162
    }
  },
  {
    "path": "src/test/java/com/notably/logic/correction/StringCorrectionEngineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class StringCorrectionEngineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final List\u003cString\u003e OPTIONS \u003d List.of(\"open\", \"new\", \"help\", \"delete\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_nullOptions_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new StringCorrectionEngine(null, new CorrectionEngineParameters()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_emptyOptions_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e emptyOptions \u003d List.of();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new StringCorrectionEngine(emptyOptions, new CorrectionEngineParameters()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_negativeDistanceThreshold_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int negativeDistanceThreshold \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setDistanceThreshold(negativeDistanceThreshold)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void constructor_negativeForwardMatchingThreshold_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int negativeForwardMatchingThreshold \u003d -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatchingThreshold(negativeForwardMatchingThreshold)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndWithinDistanceThreshold_correctionDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"NRW\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e expectedCorrectedItems \u003d List.of(\"new\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectedStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndExceedDistanceThreshold_correctionFailed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"OPne\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.FAILED;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e(expectedCorrectedStatus);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_noForwardMatchingAndExactlyMatchOption_noCorrection() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(distanceThreshold));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"hELP\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e expectedCorrectedItems \u003d List.of(\"help\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.UNCHANGED;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndValidPrefixAndBelowForwardMatchingThreshold_forwardMatchingDone() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"D\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e expectedCorrectedItems \u003d List.of(\"delete\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndInvalidPrefixAndBelowForwardMatchingThreshold_noForwardMatching() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"F\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.FAILED;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withForwardMatchingAndWithinThresholds_forwardMatchingAndCorrectionDone() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int forwardMatchingThreshold \u003d 2;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatching(true)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setDistanceThreshold(distanceThreshold)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .setForwardMatchingThreshold(forwardMatchingThreshold));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"DL\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e expectedCorrectedItems \u003d List.of(\"delete\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItems);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 149
    }
  },
  {
    "path": "src/test/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class LevenshteinDistanceCalculatorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void calculateDistance_caseSensitive() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String first \u003d \"intention\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String second \u003d \"execution\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int expectedDistance \u003d 8;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        LevenshteinDistanceCalculator calculator \u003d new LevenshteinDistanceCalculator(true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int distance \u003d calculator.calculateDistance(first, second);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedDistance, distance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void calculateDistance_caseInsensitive() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String first \u003d \"INTENTION\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String second \u003d \"intention\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int expectedDistance \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        LevenshteinDistanceCalculator calculator \u003d new LevenshteinDistanceCalculator(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int distance \u003d calculator.calculateDistance(first, second);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedDistance, distance);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 32
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 39
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static DeleteCommandParser deleteCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommandParser \u003d new DeleteCommandParser(model, pathCorrectionEngine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathWithPrefix_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_Y2S2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" -t /Y2S2\").get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathWithPrefix_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" -t /Y2S2/CS2106\").get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathWithPrefixTypo_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_Y2S2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" -t /YaS2\").get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathWithPrefixTypo_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" -t /YbS2/CS2106\").get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathWithoutPrefix_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" CS2106\").get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathWithoutPrefixTypo_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" CS210a\").get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathWithoutPrefix_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" /Y2S2/CS2106\").get(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathWithoutPrefixTypo_validDeleteCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final DeleteCommand deleteCommand \u003d deleteCommandParser.parse(\" /Y2S2/CS2109\").get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_invalidBlock_throwParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e deleteCommandParser.parse(\" -t /nonExistent\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_deleteRootBlock_throwParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e deleteCommandParser.parse(\" -t /\").get(0).execute(model));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "ljiazh3ng": 129
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/NewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class NewCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static AbsolutePath toAnother;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static NewCommandParser newCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        newCommandParser \u003d new NewCommandParser(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptyArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e newCommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptyTitleArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e newCommandParser.parse(\"-t\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_jumpToCreatedBlock_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final List\u003cCommand\u003e commandList \u003d newCommandParser.parse(\" -t Knapsack -o\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedPath \u003d AbsolutePath.fromString(\"/Y2S2/Knapsack\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (Command command : commandList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedPath , model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptyBodyArgument_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final NewCommand newCommand \u003d (NewCommand) newCommandParser.parse(\" -t Knapsack\").get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedPath \u003d AbsolutePath.fromString(\"/Y2S2/Knapsack\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        newCommand.execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(expectedPath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_duplicateTitleArgument_throwsCommandException() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final NewCommand newCommand \u003d (NewCommand) newCommandParser.parse(\" -t CS2103T\").get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e newCommand.execute(model));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 82
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/NotablyParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class NotablyParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static NotablyParser parser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        parser \u003d new NotablyParser(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_newCommandInput_newCommand() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"new -t 1234\").get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof NewCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(ParserUtil.createAbsolutePath(\"1234\", model.getCurrentlyOpenPath())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_existingNoteInput_throwsError() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"new -t CS2106\").get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof NewCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_newCommandInputJump_false() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003c? extends Command\u003e commands \u003d parser.parseCommand(\"new -t CS2101\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath expectedCurrentPath \u003d AbsolutePath.fromString(\"/Y2S2\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath expectedCreatedPath \u003d AbsolutePath.fromString(\"/Y2S2/CS2101\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(commands.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (Command command : commands) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedCurrentPath, model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.hasPath(expectedCreatedPath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_newCommandInputJump_true() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath expectedPath \u003d AbsolutePath.fromString(\"/Y2S2/CS2101\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003c? extends Command\u003e commands \u003d parser.parseCommand(\"new -t CS2101 -o\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(commands.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (Command command : commands) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedPath , model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_openCommandInput_openCommand() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final Command command \u003d parser.parseCommand(\"open -t CS2106\").get(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedPath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof OpenCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedPath , model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_openCommandShorthandInput() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"o -t CS2103T\").get(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof OpenCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(AbsolutePath.fromString(\"/Y2S2/CS2103T\"), model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_deleteCommandInput_deleteBlocks() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2103T;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"delete -t CS2103T\").get(0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion1 \u003d TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion2 \u003d TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion3 \u003d TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedChildrenDeletion4 \u003d TypicalBlockModel.PATH_TO_CS2103T_LECTURES;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion2));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion3));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(expectedChildrenDeletion4));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_deleteCommandInputNoPrefix_deleteCommand() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        AbsolutePath toDeletePath \u003d TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"delete CS2106/Tutorials/Tutorial 1\").get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.hasPath(toDeletePath));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_editCommandInput_editCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"edit\").get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof EditCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.blockEditableProperty().getValue());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_helpCommandInput_helpCommand() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"help\").get(0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.isHelpOpen());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.isHelpOpen());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_helpCommandShorthandInput_helpCommand() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"h\").get(0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertFalse(model.isHelpOpen());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(model.isHelpOpen());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void parseCommand_exitCommandInput_exitCommand() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Command command \u003d parser.parseCommand(\"exit\").get(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 1,
      "ljiazh3ng": 191
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/OpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class OpenCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static OpenCommandParser openCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(false).setDistanceThreshold(2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommandParser \u003d new OpenCommandParser(model, pathCorrectionEngine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptyArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e openCommandParser.parse(\"\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptyTitleArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e openCommandParser.parse(\"-t\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_rootTitleArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e openCommandParser.parse(\"-t /\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_invalidPathArgument_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e openCommandParser.parse(\"-t /nonExisting\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathArgument_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d openCommandParser.parse(\" -t /Y2S2/CS2106\").get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommand.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(toOpenPath, model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_absolutePathArgumentTypo_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d openCommandParser.parse(\" -t /Y2S1/CS2106\").get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommand.execute(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(toOpenPath, model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathArgument_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d openCommandParser.parse(\" -t CS2106\").get(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Current directory `/Y2S2`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommand.execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        //Expected directory after executing Command /another/block"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(toOpenPath, model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_relativePathArgumentTypo_openCommand() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath toOpenPath \u003d TypicalBlockModel.PATH_TO_CS2106;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final OpenCommand openCommand \u003d openCommandParser.parse(\" -t /Y2S2/CS210\").get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Current directory `/Y2S2`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        openCommand.execute(model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        //Expected directory after executing Command /another/block"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(toOpenPath, model.currentlyOpenPathProperty().getValue());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "ljiazh3ng": 102
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/SearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class SearchCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static SearchCommandParser searchCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        searchCommandParser \u003d new SearchCommandParser(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_nonEmptySuggestionList_throwsParseExceptionEmptySuggestion() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Runnable action \u003d () -\u003e {};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        model.setSuggestions(List.of(new SuggestionItemImpl(\"search /CS2103T\", action)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String expectedErrorMessage \u003d \"Please select one of the suggestions below, then press enter!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            searchCommandParser.parse(\"CS2103T content\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            assertEquals(expectedErrorMessage, ex.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void parse_emptySuggestionList_throwsParseExceptionSelectOne() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String arg \u003d \"CS2103T content\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final String expectedErrorMessage \u003d String.format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                (\"Unable to search for notes containing the keyword \u0027%s\u0027\", arg);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            searchCommandParser.parse(arg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            assertEquals(expectedErrorMessage, ex.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 61
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/SuggestionEngineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionEngineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static AbsolutePath toCs2103t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static List\u003cAbsolutePath\u003e paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String DELETE_RESPONSE_MESSAGE_WITH_TITLE \u003d \"Delete a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String OPEN_RESPONSE_MESSAGE_WITH_TITLE \u003d \"Open a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String NEW_RESPONSE_MESSAGE_WITH_TITLE \u003d \"Create a new note titled \\\"%s\\\".\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String SEARCH_RESPONSE_MESSAGE_WITH_KEYWORD \u003d \"Search through all notes based \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"on keyword \\\"%s\\\"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String EDIT_RESPONSE_MESSAGE \u003d \"Edit this note\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_RESPONSE_MESSAGE \u003d \"\\\"%s\\\" is an invalid command format. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"To see the list of available commands, type: help\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String EXIT_RESPONSE_MESSAGE \u003d \"Exit the application\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String HELP_RESPONSE_MESSAGE \u003d \"Display a list of available commands\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() throws InvalidPathException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        toCs2103t \u003d SuggestionTestUtil.getToCs2103t();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths.add(toCs2103t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseTextAndSuggestions() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearResponseText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearSuggestions();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedDeleteCommand_generatesSuggestions() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"dele \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(DELETE_RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedOpenCommand_generatesSuggestions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"op \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(OPEN_RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedNewCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"nw \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"Aa123!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + path;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + arg;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(NEW_RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedSearchCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutKeyword \u003d \"sear \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String keyword \u003d \"FAlse\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutKeyword + \" \" + keyword;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(SEARCH_RESPONSE_MESSAGE_WITH_KEYWORD, keyword)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSearchSugForKeywordFalse();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSearchSuggestions(expectedSuggestions, suggestions, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedEditCommand() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"edt\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(EDIT_RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedHelpCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"hAlp\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(HELP_RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_correctedExitCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"ex\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(EXIT_RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void suggest_invalidCommand_displaysErrorMessage() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"randomCmd\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionEngine suggestionEngine \u003d new SuggestionEngine(model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(ERROR_RESPONSE_MESSAGE, userInput)),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 150
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/SuggestionTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.viewstate.ViewStateModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Contains helper methods for testing generator feature."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static Model getModel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        BlockModel blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionModel suggestionModel \u003d new SuggestionModelImpl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        ViewStateModel viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Model model \u003d new ModelManager(blockModel, suggestionModel, viewStateModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static AbsolutePath getToCs2103t() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return TypicalBlockModel.PATH_TO_CS2103T;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static String getStringRelativePathToCs2103t() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return \"CS2103T\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static List\u003cSuggestionItem\u003e getExpectedSugForCs2103tPathInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103t \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T.getStringRepresentation(), () -\u003e {});"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tLect \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_LECTURES.getStringRepresentation(), () -\u003e {});"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS.getStringRepresentation(), () -\u003e {});"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut1 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1.getStringRepresentation(), () -\u003e {});"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut2 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2.getStringRepresentation(), () -\u003e {});"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return List.of(cs2103t, cs2103tLect, cs2103tTut, cs2103tTut1, cs2103tTut2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static List\u003cString\u003e getExpectedInputsForCs2103tPathInput(String userInputWithoutPath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        expectedInputs.add(userInputWithoutPath + TypicalBlockModel.PATH_TO_CS2103T.getStringRepresentation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        expectedInputs.add(userInputWithoutPath + TypicalBlockModel.PATH_TO_CS2103T_LECTURES.getStringRepresentation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        expectedInputs.add(userInputWithoutPath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                + TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS.getStringRepresentation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        expectedInputs.add(userInputWithoutPath"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                + TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1.getStringRepresentation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        expectedInputs.add(userInputWithoutPath"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                + TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2.getStringRepresentation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return expectedInputs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static List\u003cSuggestionItem\u003e getExpectedSearchSugForKeywordFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut2 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2.getStringRepresentation(), 2, () -\u003e {});"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut1 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1.getStringRepresentation(), 1, () -\u003e {});"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2106Tut1 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1.getStringRepresentation(), 1, () -\u003e {});"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return List.of(cs2103tTut2, cs2103tTut1, cs2106Tut1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Checks the correctness of the suggestions."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param expectedSuggestions The expected suggestions list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The actual list of suggestions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void assertSuggestions(List\u003cSuggestionItem\u003e expectedSuggestions, List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(expectedSuggestions.stream().map(s -\u003e s.getProperty(\"displayText\")).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                suggestions.stream().map(s -\u003e s.getProperty(\"displayText\")).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Checks the correctness of the search suggestions."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param expectedSuggestions The expected suggestions list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The actual list of suggestions."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void assertSearchSuggestions(List\u003cSuggestionItem\u003e expectedSuggestions,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                                             List\u003cSuggestionItem\u003e suggestions, Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(expectedSuggestions.stream().map(s -\u003e s.getProperty(\"displayText\")).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                suggestions.stream().map(s -\u003e s.getProperty(\"displayText\")).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(expectedSuggestions.stream().map(s -\u003e s.getProperty(\"frequency\")).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                suggestions.stream().map(s -\u003e s.getProperty(\"frequency\")).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertInputsForSearch(suggestions, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Checks if the input is cleared after the suggestion is chosen."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The actual list of suggestions."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void assertInputsForSearch(List\u003cSuggestionItem\u003e suggestions, Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (int i \u003d 0; i \u003c suggestions.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            SuggestionItem suggestionItem \u003d suggestions.get(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            suggestionItem.getAction().run();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            String input \u003d model.getInput();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertTrue(input.isEmpty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Checks the correctness of the input stored in CommandInputModel for each generator."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param expectedInputs The expected list of inputs."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The actual list of suggestions."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void assertInputs(List\u003cString\u003e expectedInputs, List\u003cSuggestionItem\u003e suggestions, Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedInputs.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            SuggestionItem suggestionItem \u003d suggestions.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            String expectedInput \u003d expectedInputs.get(i);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            suggestionItem.getAction().run();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            String input \u003d model.getInput();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertEquals(expectedInput, input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 143
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/generator/DeleteSuggestionGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.DeleteSuggestionArgHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class DeleteSuggestionGeneratorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static AbsolutePath toCs2103t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static List\u003cAbsolutePath\u003e paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        toCs2103t \u003d SuggestionTestUtil.getToCs2103t();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths.add(toCs2103t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearSuggestions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSuggestionGenerator(null, \"title\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void constructor_nullTitle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        DeleteSuggestionGenerator deleteSuggestionCommand \u003d new DeleteSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e deleteSuggestionCommand.execute(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_blankOldTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DeleteSuggestionGenerator(paths, \"   \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_correctAbsolutePathWithPrefix_generatesResponseCorrectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInputWithoutPath + toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        DeleteSuggestionGenerator deleteSuggestionCommand \u003d new DeleteSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        deleteSuggestionCommand.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_correctAbsolutePathWithoutPrefix_generatesResponseCorrectly() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInputWithoutPath + toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        DeleteSuggestionGenerator deleteSuggestionCommand \u003d new DeleteSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        deleteSuggestionCommand.execute(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 96,
      "kevinputera": 1
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/generator/OpenSuggestionGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.handler.OpenSuggestionArgHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class OpenSuggestionGeneratorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static AbsolutePath toCs2103t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static List\u003cAbsolutePath\u003e paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        toCs2103t \u003d SuggestionTestUtil.getToCs2103t();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        paths.add(toCs2103t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearSuggestions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpenSuggestionGenerator(null, \"title\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void constructor_nullTitle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpenSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        OpenSuggestionGenerator openSuggestionCommand \u003d new OpenSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e openSuggestionCommand.execute(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_blankOldTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new OpenSuggestionGenerator(paths, \"   \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_correctAbsolutePathWithPrefix_generatesResponseCorrectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInputWithoutPath + toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        OpenSuggestionGenerator openSuggestionCommand \u003d new OpenSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        openSuggestionCommand.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_correctAbsolutePathWithoutPrefix_generatesResponseCorrectly() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInputWithoutPath + toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        OpenSuggestionGenerator openSuggestionCommand \u003d new OpenSuggestionGenerator(paths,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        openSuggestionCommand.execute(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 95,
      "kevinputera": 2
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/generator/SearchSuggestionGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItemImpl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SearchSuggestionGeneratorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void constructor_nullKeyword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchSuggestionGenerator(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SearchSuggestionGenerator searchSuggestionCommand \u003d new SearchSuggestionGenerator(\"keywords\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e searchSuggestionCommand.execute(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void execute_generatesResponseCorrectly() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SearchSuggestionGenerator searchSuggestionCommand \u003d new SearchSuggestionGenerator(\"fALsE\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        searchSuggestionCommand.execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut2 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2.getStringRepresentation(), 2, () -\u003e {});"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2103tTut1 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1.getStringRepresentation(), 1, () -\u003e {});"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionItem cs2106Tut1 \u003d new SuggestionItemImpl("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1.getStringRepresentation(), 1, () -\u003e {});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d List.of(cs2103tTut2, cs2103tTut1, cs2106Tut1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedSuggestions.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            SuggestionItem suggestion \u003d suggestions.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            SuggestionItem expectedSuggestion \u003d expectedSuggestions.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertEquals(expectedSuggestion.getProperty(\"displayText\"), suggestion.getProperty(\"displayText\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertEquals(expectedSuggestion.getProperty(\"frequency\"), suggestion.getProperty(\"frequency\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cAbsolutePath\u003e expectedCurrentlyOpenPaths \u003d List.of(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1, TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedCurrentlyOpenPaths.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            SuggestionItem suggestion \u003d suggestions.get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            suggestion.getAction().run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertEquals(expectedCurrentlyOpenPaths.get(i), model.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            assertTrue(model.getInput().isEmpty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 72
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/DeleteSuggestionArgHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class DeleteSuggestionArgHandlerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static AbsolutePath toCs2103t;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static String stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static DeleteSuggestionArgHandler deleteSuggestionArgHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Delete a note\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Delete a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_CANNOT_DELETE_NOTE \u003d \"Cannot delete \\\"%s\\\" as it is an invalid path\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        toCs2103t \u003d SuggestionTestUtil.getToCs2103t();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        stringRelativePathToCs2103t \u003d SuggestionTestUtil.getStringRelativePathToCs2103t();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(true));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        deleteSuggestionArgHandler \u003d new DeleteSuggestionArgHandler(model, pathCorrectionEngine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdWithoutPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"dele\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdWithoutPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"delete\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectAbsolutePathWithPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation())), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectAbsolutePathWithoutPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"dele\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation())), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectRelativePathWithPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, stringRelativePathToCs2103t)),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectRelativePathWithoutPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"dele\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, stringRelativePathToCs2103t)),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectedAbsolutePathWithPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"dele \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"/Y2S2/CS2104T\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + path;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectedAbsolutePathWithoutPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"/Y2S2/CS2104T\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + path;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectedRelativePathWithPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"dele \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"CS2104T\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + path;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectedRelativePathWithoutPrefix_returnsDeleteSuggestionCommand() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"CS2104T\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + path;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_invalidPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"-\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \" + path;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(ERROR_MESSAGE_CANNOT_DELETE_NOTE, path)),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_uncorrectedPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"random\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d DeleteSuggestionArgHandler.COMMAND_WORD + \" \" + path;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d deleteSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 275,
      "kevinputera": 10
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/EditSuggestionHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class EditSuggestionHandlerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static EditSuggestionHandler editSuggestionHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Edit this note\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        editSuggestionHandler \u003d new EditSuggestionHandler(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d editSuggestionHandler.handle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 34
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/ExitSuggestionHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class ExitSuggestionHandlerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static ExitSuggestionHandler exitSuggestionHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Exit the application\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        exitSuggestionHandler \u003d new ExitSuggestionHandler(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d exitSuggestionHandler.handle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 34
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/HelpSuggestionHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class HelpSuggestionHandlerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static HelpSuggestionHandler helpSuggestionHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Display a list of available commands\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        helpSuggestionHandler \u003d new HelpSuggestionHandler(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d helpSuggestionHandler.handle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 34
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/NewSuggestionArgHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_JUMP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class NewSuggestionArgHandlerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static NewSuggestionArgHandler newSuggestionArgHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Create a new note\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Create a new note titled \\\"%s\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE_AND_OPEN \u003d \"Create a new note titled \\\"%s\\\" and open it.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_COMMAND \u003d \"\\\"%s\\\" is an invalid creation format. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"The correct format is \\\"new -t TITLE [-o]\\\"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_TITLE \u003d \"Title \\\"%s\\\" is invalid. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"Titles cannot start with the period character. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            + \"Titles should only contain alphanumeric characters and symbols except - and /\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        newSuggestionArgHandler \u003d new NewSuggestionArgHandler(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_emptyArg() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d newSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_prefixTitleValidTitleNoPrefixJump() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title \u003d \"Aa123!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d newSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, title)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_prefixTitleValidTitlePrefixJump() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title \u003d \"Aa123!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + title + \" \" + PREFIX_JUMP;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d newSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE_AND_OPEN, title)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_prefixTitleInvalidTitle() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title \u003d \"aA-\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + title + \" \" + PREFIX_JUMP;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d newSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(ERROR_MESSAGE_INVALID_TITLE, title)),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_noPrefixTitleValidTitle() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String title \u003d \"Aa123!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + title + \" \" + PREFIX_JUMP;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"nw\" + arg;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d newSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(ERROR_MESSAGE_INVALID_COMMAND, userInput)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 89,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/OpenSuggestionArgHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.AbsolutePathCorrectionEngine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.CorrectionEngineParameters;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SuggestionGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class OpenSuggestionArgHandlerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static AbsolutePath toCs2103t;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static String stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static OpenSuggestionArgHandler openSuggestionArgHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Open a note\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_TITLE \u003d \"Open a note titled \\\"%s\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String ERROR_MESSAGE_CANNOT_OPEN_NOTE \u003d \"Cannot open \\\"%s\\\" as it is an invalid path\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        toCs2103t \u003d SuggestionTestUtil.getToCs2103t();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        stringRelativePathToCs2103t \u003d SuggestionTestUtil.getStringRelativePathToCs2103t();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionEngine\u003cAbsolutePath\u003e pathCorrectionEngine \u003d new AbsolutePathCorrectionEngine(model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new CorrectionEngineParameters().setForwardMatching(true));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        openSuggestionArgHandler \u003d new OpenSuggestionArgHandler(model, pathCorrectionEngine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdWithoutPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"op\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdWithoutPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \"open\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectAbsolutePathWithPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation())), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectAbsolutePathWithoutPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"op \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + toCs2103t.getStringRepresentation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                toCs2103t.getStringRepresentation())), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectRelativePathWithPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, stringRelativePathToCs2103t)),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectRelativePathWithoutPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"op \";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + stringRelativePathToCs2103t;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, stringRelativePathToCs2103t)),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectedAbsolutePathWithPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"op \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"/Y2S2/CS2104T\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + path;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectedAbsolutePathWithoutPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"/Y2S2/CS2104T\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + path;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctedCmdcorrectedRelativePathWithPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d \"op \" + PREFIX_TITLE + \" \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"CS2104T\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + PREFIX_TITLE + \" \" + path;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_correctCmdcorrectedRelativePathWithoutPrefix_returnsOpenSuggestionCommand() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInputWithoutPath \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String path \u003d \"CS2104T\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d userInputWithoutPath + path;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String arg \u003d \" \" + path;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(arg);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.isPresent());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSugForCs2103tPathInput();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSuggestions(expectedSuggestions, suggestions);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cString\u003e expectedInputs \u003d SuggestionTestUtil.getExpectedInputsForCs2103tPathInput(userInputWithoutPath);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertInputs(expectedInputs, suggestions, model);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_invalidPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"-\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \" + path;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(ERROR_MESSAGE_CANNOT_OPEN_NOTE, path)),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_uncorrectedPath_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String path \u003d \"random\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d OpenSuggestionArgHandler.COMMAND_WORD + \" \" + path;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.setInput(userInput);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SuggestionGenerator\u003e command \u003d openSuggestionArgHandler.handleArg(path);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_TITLE, path)),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 275,
      "kevinputera": 10
    }
  },
  {
    "path": "src/test/java/com/notably/logic/suggestion/handler/SearchSuggestionArgHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.commons.parser.CliSyntax.PREFIX_SEARCH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.SuggestionTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.logic.suggestion.generator.SearchSuggestionGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SearchSuggestionArgHandlerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static SearchSuggestionArgHandler searchSuggestionArgHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE \u003d \"Search through all notes based on keyword\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private static final String RESPONSE_MESSAGE_WITH_KEYWORD \u003d \"Search through all notes based on keyword \\\"%s\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model \u003d SuggestionTestUtil.getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        searchSuggestionArgHandler \u003d new SearchSuggestionArgHandler(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseTextAndSuggestions() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearResponseText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        model.clearSuggestions();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_emptyKeyword_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_SEARCH + \" \" + keyword;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SearchSuggestionGenerator\u003e command \u003d searchSuggestionArgHandler.handleArg(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(RESPONSE_MESSAGE), model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertFalse(command.isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_withPrefixSearch_returnsSearchSuggestionCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String keyword \u003d \"fAlSe\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_SEARCH + \" \" + keyword;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SearchSuggestionGenerator\u003e command \u003d searchSuggestionArgHandler.handleArg(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.get() instanceof SearchSuggestionGenerator);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_KEYWORD, keyword)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSearchSugForKeywordFalse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSearchSuggestions(expectedSuggestions, suggestions, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parse_withoutPrefixSearch_returnsSearchSuggestionCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String keyword \u003d \"fAlSe\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        String userInput \u003d keyword;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Optional\u003c? extends SearchSuggestionGenerator\u003e command \u003d searchSuggestionArgHandler.handleArg(userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertTrue(command.get() instanceof SearchSuggestionGenerator);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        command.get().execute(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertEquals(Optional.of(String.format(RESPONSE_MESSAGE_WITH_KEYWORD, keyword)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                model.responseTextProperty().getValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e expectedSuggestions \u003d SuggestionTestUtil.getExpectedSearchSugForKeywordFalse();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        List\u003cSuggestionItem\u003e suggestions \u003d model.getSuggestions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        SuggestionTestUtil.assertSearchSuggestions(expectedSuggestions, suggestions, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 83
    }
  },
  {
    "path": "src/test/java/com/notably/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeImpl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.suggestion.SuggestionModelImpl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.viewstate.ViewStateModelImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new BlockModelImpl(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new SuggestionModelImpl(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new ViewStateModelImpl(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new UserPrefModelImpl());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new UserPrefModelImpl(), modelManager.getUserPrefModel());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new BlockTreeImpl(), modelManager.getBlockTree());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUserPrefModel_nullUserPrefModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefModel(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUserPrefModel_validUserPrefModel_copiesUserPrefModel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel userPrefModel \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setBlockDataFilePath(Paths.get(\"block/tree/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        modelManager.setUserPrefModel(userPrefModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(userPrefModel, modelManager.getUserPrefModel());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Modifying userPrefModel should not modify modelManager\u0027s userPrefModel"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel oldUserPrefModel \u003d new UserPrefModelImpl(userPrefModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setBlockDataFilePath(Paths.get(\"new/block/tree/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(oldUserPrefModel, modelManager.getUserPrefModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockTreeFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBlockDataFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockTreeFilePath_validPath_setsBlockTreeFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Path path \u003d Paths.get(\"block/tree/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        modelManager.setBlockDataFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(path, modelManager.getBlockDataFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 75
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/BlockModelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.RelativePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.CannotModifyRootException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockModelTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockModel blockModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setUpBeforeEach() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void afterEach() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getBlockTree()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getRootBlock()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getTreeItem()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getChildren(), FXCollections.emptyObservableList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_ROOT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setCurrentlyOpenBlock_changePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2103T);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_CS2103T);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void addBlockToCurrentPath_addToPathToY2S2() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(new Title(\"CS2100\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.addBlockToCurrentPath(newBlock);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(blockModel.hasPath(AbsolutePath.fromString(\"/Y2S2/CS2100\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_removeRoot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(CannotModifyRootException.class, () -\u003e blockModel.removeBlock(TypicalBlockModel.PATH_TO_ROOT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_nonRootPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_deleteCurrentlyOpenBlock_openParent() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(AbsolutePath.fromRelativePath("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            RelativePath.fromString(\".\"), blockModel.getCurrentlyOpenPath()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_CS2106_TUTORIALS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_deleteParentOfCurrentlyOpenBlock_openFirstAvailablePredecessor() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(TypicalBlockModel.PATH_TO_CS2103T);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T_TUTORIALS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_Y2S2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_deleteUnrelatedBlock_currentlyOpenBlockUnchanged() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2106);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), TypicalBlockModel.PATH_TO_CS2106);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(blockModel.hasPath(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock_deleteNonExistentDistantSibling_throws() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2106);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NoSuchBlockException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                blockModel.removeBlock(AbsolutePath.fromRelativePath("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                RelativePath.fromString(\"../NonExistentBlock\"), blockModel.getCurrentlyOpenPath())));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void updateCurrentlyOpenBlockBody_modifyRootBody_throwsCannotModifyRootException () {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_ROOT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(CannotModifyRootException.class, () -\u003e blockModel.updateCurrentlyOpenBlockBody("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                new Body(\"New Body\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void updateCurrentlyOpenBlockBody_nonRootPath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(TypicalBlockModel.PATH_TO_CS2106_TUTORIAL_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.updateCurrentlyOpenBlockBody(new Body(\"Updated body\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getBlockTree()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .get(blockModel.getCurrentlyOpenPath())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getBody()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            .getText(), \"Updated body\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 118
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/BlockTreeItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockTreeItemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BlockTreeItemImpl((Block) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BlockTreeItemImpl((TreeItem\u003cBlock\u003e) null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void isRootBlock_rootBlock_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTreeItem rootBlock \u003d BlockTreeItemImpl.createRootBlockTreeItem();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(rootBlock.isRootBlock());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 23
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/BlockTreeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.CannotModifyRootException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.DuplicateBlockException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.exceptions.NoSuchBlockException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockTreeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockTree blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void setUpTestTree() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree \u003d TypicalBlockModel.getTypicalBlockModel().getBlockTree();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void tearDownTestTree() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(blockTree.getRootBlock().isRootBlock());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void get_root() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.get(TypicalBlockModel.PATH_TO_ROOT), blockTree.getRootBlock());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void get_pathDoesNotExist_throwsNoSuchBlockException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        AbsolutePath nonExistentPath \u003d AbsolutePath.fromString(\"/SomeNonExistentPath\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NoSuchBlockException.class, () -\u003e blockTree.get(nonExistentPath));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void add_addNewBlock() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(new Title(\"CS2101\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        AbsolutePath toCs2103Week2 \u003d AbsolutePath.fromString(\"/Y2S2/CS2101\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.add(TypicalBlockModel.PATH_TO_Y2S2, newBlock);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.get(toCs2103Week2).getBlock(), newBlock);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void add_addDuplicateBlock_throwsDuplicateBlockException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(new Title(\"Y2S2\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(DuplicateBlockException.class, () -\u003e blockTree.add(TypicalBlockModel.PATH_TO_ROOT, newBlock));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void add_addDeeperNestedPath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(new Title(\"Labs\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.add(TypicalBlockModel.PATH_TO_CS2103T, newBlock);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.get(AbsolutePath.fromString(\"/Y2S2/CS2103T/Labs\")).getBlock(), newBlock);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void remove_removeBlockAndChildren_throwsNoSuchBlockException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.remove(TypicalBlockModel.PATH_TO_CS2103T);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NoSuchBlockException.class, () -\u003e blockTree.get(TypicalBlockModel.PATH_TO_CS2103T));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NoSuchBlockException.class, () -\u003e blockTree.get(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void remove_removeRoot_throwsCannotModifyRootException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(CannotModifyRootException.class, () -\u003e blockTree.remove(TypicalBlockModel.PATH_TO_ROOT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void set_modifyRootBody_throwsCannotModifyRootException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block newBlock \u003d new BlockImpl(new Title(\"NUS\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(CannotModifyRootException.class, () -\u003e blockTree.set(TypicalBlockModel.PATH_TO_ROOT, newBlock));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void set_block_editBlock() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Block editedBlock \u003d new BlockImpl(new Title(\"Tutorial 3\"), new Body(\"Was \u0027Tutorial 1\u0027\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        AbsolutePath editedPath \u003d AbsolutePath.fromString(\"/Y2S2/CS2103T/Tutorials/Tutorial 3\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.set(TypicalBlockModel.PATH_TO_CS2103T_TUTORIAL_1, editedBlock);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.get(editedPath).getBlock(), editedBlock);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void testRootBodyContent() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.getRootBlock().getBody().getText(), \"Create a new note to get started!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.add(TypicalBlockModel.PATH_TO_ROOT, TypicalBlockModel.Y2S2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.getRootBlock().getBody().getText(), \"Open a note to get started!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTree.remove(TypicalBlockModel.PATH_TO_Y2S2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockTree.getRootBlock().getBody().getText(), \"Create a new note to get started!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "firzanarmani": 102
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/BodyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BodyTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Body(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_onlyWhitespaces_returnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new Body(\"   \").getText(), \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 19
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Null title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Invalid title"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // Empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // Spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\" Week 2 Lecture\")); // Leading whitespace"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"Week 2 Lecture \")); // Trailing whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"-t Title-1\")); // Contains \u0027-\u0027 character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"Weird/Title\")); // Contains \u0027/\u0027 character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\".\")); // Single period character \u003d RelativePath to here"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"..\")); // Double period character \u003d RelativePath to parent"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"..1\")); // Title starts wih period character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Valid title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"A\")); // Single character title"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"25\")); // Numbers only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"weekly notes\")); // Letters only (and non-leading whitespace)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"lecture 2\")); // Alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Lecture Week 2\")); // With uppercase characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2018 Year 1 Semester 1 CS2103 Week 2 Lecture Notes\")); // Long title"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"!\\\"#$%\u0026\u0027()*+,.:;\u003c\u003d\u003e?@[\\\\]^_`{|}~\")); // Accepted symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"1.2..3...4 1.2 .1\")); // Use of period characters as long as not start of string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void equals_equalsIgnoreCase() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new Title(\"LECTURES\"), new Title(\"lectures\")); // All uppercase vs all lowercase"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new Title(\"WeEK 1 tUtorIal\"), new Title(\"week 1 TUTORIAL\")); // Mixed case"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 55
    }
  },
  {
    "path": "src/test/java/com/notably/model/userpref/UserPrefModelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.userpref;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class UserPrefModelTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel userPref \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setBlockTreeFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel userPrefs \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBlockDataFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "firzanarmani": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/com/notably/model/viewstate/ViewStateModelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.viewstate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewStateModelTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private ViewStateModel viewStateModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setUpBeforeEach() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel \u003d new ViewStateModelImpl();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandInputModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void inputProperty_void_returnsValidProperty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.inputProperty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void getInput_void_returnsValidString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.getInput());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInput_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewStateModel.setInput(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInputAndGetInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        final String input \u003d \"This is the new input\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setInput(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(input, viewStateModel.getInput());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HelpFlagModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void helpOpenProperty_void_returnsValidProperty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.helpOpenProperty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void isHelpOpen_void_returnsValidBoolean() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.isHelpOpen());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setHelpOpen_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewStateModel.setHelpOpen(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setHelpOpenAndGetIsHelpOpen() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setHelpOpen(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(true, viewStateModel.isHelpOpen());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setHelpOpen(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(false, viewStateModel.isHelpOpen());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BlockEditFlagModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void blockEditableProperty_void_returnsValidProperty() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.blockEditableProperty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void isBlockEditable_void_returnsValidBoolean() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(viewStateModel.isBlockEditable());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setBlockEditable_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewStateModel.setBlockEditable(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setBlockEditableAndGetBlockEditable() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setBlockEditable(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(true, viewStateModel.isBlockEditable());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        viewStateModel.setBlockEditable(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(false, viewStateModel.isBlockEditable());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 89
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonAdaptedBlockTreeItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeItemImpl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class JsonAdaptedBlockTreeItemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final BlockTreeItem item1 \u003d new BlockTreeItemImpl(new BlockImpl(new Title(\"Item1\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_validBlockTreeItem_returnsBlockTreeItem() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonAdaptedBlockTreeItem blockTreeItem \u003d new JsonAdaptedBlockTreeItem(item1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(item1, blockTreeItem.toModelType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonAdaptedBlockTreeItem blockTreeItem \u003d new JsonAdaptedBlockTreeItem(\"-t Title/Invalid\", \"Body\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new ArrayList\u003cJsonAdaptedBlockTreeItem\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, Title.MESSAGE_CONSTRAINTS, blockTreeItem::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonAdaptedBlockTreeItem blockTreeItem \u003d new JsonAdaptedBlockTreeItem(null, \"Body\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new ArrayList\u003cJsonAdaptedBlockTreeItem\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, String.format(JsonAdaptedBlockTreeItem.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Title.class.getSimpleName()), blockTreeItem::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_nullBody_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonAdaptedBlockTreeItem blockTreeItem \u003d new JsonAdaptedBlockTreeItem(\"Title\", null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new ArrayList\u003cJsonAdaptedBlockTreeItem\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, String.format(JsonAdaptedBlockTreeItem.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Body.class.getSimpleName()), blockTreeItem::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 48
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonBlockStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class JsonBlockStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBlockStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void readBlockModel_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readBlockModel(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private java.util.Optional\u003cBlockModel\u003e readBlockModel(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new JsonBlockStorage(Paths.get(filePath)).readBlockModel(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Saves the {@code BlockModel} at the specified {@code filePath}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void saveBlockModel(BlockModel blockModel, String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new JsonBlockStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                    .saveBlockModel(blockModel, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(readBlockModel(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBlockModel(\"notJsonFormatBlockData.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void readBlockModel_invalidBlockModel_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBlockModel(\"invalidBlockData.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void readBlockModel_invalidAndValidBlockModel_throwDataConversionException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBlockModel(\"invalidAndValidBlockData.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void readAndSaveBlockModel_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempBlockModel.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel original \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonBlockStorage jsonBlockStorage \u003d new JsonBlockStorage(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        jsonBlockStorage.saveBlockModel(original);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel readBack \u003d jsonBlockStorage.readBlockModel(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getBlockTree(), readBack.getBlockTree());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getCurrentlyOpenPath(), readBack.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        original.getBlockTree().add(AbsolutePath.fromString(\"/Y2S2\"), TypicalBlockModel.CS2107);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        jsonBlockStorage.saveBlockModel(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        readBack \u003d jsonBlockStorage.readBlockModel(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getBlockTree(), readBack.getBlockTree());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getCurrentlyOpenPath(), readBack.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        original.getBlockTree().add(AbsolutePath.fromString(\"/Y2S2\"), TypicalBlockModel.CS3230);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        jsonBlockStorage.saveBlockModel(original); // file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        readBack \u003d jsonBlockStorage.readBlockModel().get(); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getBlockTree(), readBack.getBlockTree());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getCurrentlyOpenPath(), readBack.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel_nullBlockModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBlockModel(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void saveBlockModel_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBlockModel(new BlockModelImpl(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 109
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonSerializableBlockModelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class JsonSerializableBlockModelTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBlockModelTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path TYPICAL_BLOCKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBlockData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path INVALID_BLOCK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBlockData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path DUPLICATE_BLOCK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBlockData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path MISSING_PATH_BLOCK_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPathBlockData.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path PATH_DOESNT_EXIST_BLOCK_FILE \u003d TEST_DATA_FOLDER.resolve(\"pathDoesntExistBlockData.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static final Path BLANK_DATA_INVALID_PATH_BLOCK_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        \"blankDataInvalidPathBlockData.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_typicalBlocksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BLOCKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModelFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel typicalBlockModel \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModelFromFile.getBlockTree(), typicalBlockModel.getBlockTree());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModelFromFile.getCurrentlyOpenPath(), typicalBlockModel.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_invalidBlockFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BLOCK_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_duplicateBlockFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BLOCK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedBlockTreeItem.MESSAGE_DUPLICATE_BLOCK_CHILD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_missingPathBlockFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(MISSING_PATH_BLOCK_FILE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableBlockModel.MISSING_LAST_OPENED_PATH_FIELD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_pathDoesntExistBlockFile_defaultFirstRootChild() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(PATH_DOESNT_EXIST_BLOCK_FILE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModel \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), AbsolutePath.fromString(\"/Y2S2\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void toModelType_blankDataInvalidPathBlockFile_defaultFirstRootChild() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonSerializableBlockModel dataFromFile \u003d JsonUtil.readJsonFile(BLANK_DATA_INVALID_PATH_BLOCK_FILE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            JsonSerializableBlockModel.class).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModel \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(blockModel.getCurrentlyOpenPath(), AbsolutePath.fromString(\"/\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 75
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Optional\u003cUserPrefModel\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel expected \u003d getTypicalUserPrefModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(new UserPrefModelImpl(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel expected \u003d getTypicalUserPrefModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private UserPrefModel getTypicalUserPrefModel() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel userPrefModel \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userPrefModel.setBlockDataFilePath(Paths.get(\"data/blockdata.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return userPrefModel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefModelImpl(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void saveUserPrefs(UserPrefModel userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel original \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 101,
      "firzanarmani": 18
    }
  },
  {
    "path": "src/test/java/com/notably/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.userpref.UserPrefModelImpl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.testutil.TypicalBlockModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        JsonBlockStorage blockStorage \u003d new JsonBlockStorage(getTempFilePath(\"blocks\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storageManager \u003d new StorageManager(blockStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel original \u003d new UserPrefModelImpl();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        UserPrefModel retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void blockReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "         * {@link JsonBlockStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "         * More extensive testing of BlockModel saving/reading is done in {@link JsonBlockStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel original \u003d TypicalBlockModel.getTypicalBlockModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storageManager.saveBlockModel(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel retrieved \u003d storageManager.readBlockModel().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getBlockTree(), retrieved.getBlockTree());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(original.getCurrentlyOpenPath(), retrieved.getCurrentlyOpenPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void getBlockModelFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertNotNull(storageManager.getBlockDataFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 48,
      "firzanarmani": 18
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/TypicalBlockModel.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockImpl;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockModelImpl;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTreeImpl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A utility class containing a list of {@code Block} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class TypicalBlockModel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_ROOT \u003d AbsolutePath.fromString(\"/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_Y2S2 \u003d AbsolutePath.fromString(\"/Y2S2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2103T \u003d AbsolutePath.fromString(\"/Y2S2/CS2103T\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2103T_LECTURES \u003d AbsolutePath.fromString(\"/Y2S2/CS2103T/Lecture Notes\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2103T_TUTORIALS \u003d AbsolutePath.fromString(\"/Y2S2/CS2103T/Tutorials\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2103T_TUTORIAL_1 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath.fromString(\"/Y2S2/CS2103T/Tutorials/Tutorial 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2103T_TUTORIAL_2 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath.fromString(\"/Y2S2/CS2103T/Tutorials/Tutorial 2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2106 \u003d AbsolutePath.fromString(\"/Y2S2/CS2106\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2106_LECTURES \u003d AbsolutePath.fromString(\"/Y2S2/CS2106/Lecture Notes\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2106_TUTORIALS \u003d AbsolutePath.fromString(\"/Y2S2/CS2106/Tutorials\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2106_TUTORIAL_1 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath.fromString(\"/Y2S2/CS2106/Tutorials/Tutorial 1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS2107 \u003d AbsolutePath.fromString(\"/Y2S2/CS2107\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath PATH_TO_CS3230 \u003d AbsolutePath.fromString(\"/Y2S2/CS3230\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final AbsolutePath INITIAL_OPEN_PATH \u003d PATH_TO_Y2S2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block Y2S2 \u003d new BlockImpl(new Title(\"Y2S2\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static final Block CS2103T \u003d new BlockImpl(new Title(\"CS2103T\"), new Body(\"Software Engineering\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2103T_LECTURES \u003d new BlockImpl(new Title(\"Lecture Notes\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2103T_TUTORIALS \u003d new BlockImpl(new Title(\"Tutorials\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2103T_TUTORIAL_1 \u003d new BlockImpl(new Title(\"Tutorial 1\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Q1: True, Q2: False\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2103T_TUTORIAL_2 \u003d new BlockImpl(new Title(\"Tutorial 2\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Q1: False, Q2: False\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2106 \u003d new BlockImpl(new Title(\"CS2106\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Introduction to Operating Systems\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2106_LECTURES \u003d new BlockImpl(new Title(\"Lecture Notes\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2106_TUTORIALS \u003d new BlockImpl(new Title(\"Tutorials\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2106_TUTORIAL_1 \u003d new BlockImpl(new Title(\"Tutorial 1\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Q1: True, Q2: False\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS2107 \u003d new BlockImpl(new Title(\"CS2107\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Introduction to Computer Security\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final Block CS3230 \u003d new BlockImpl(new Title(\"CS3230\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            new Body(\"Design and Analysis of Algorithms\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns an {@code BlockModel} with the typical blocks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static BlockModel getTypicalBlockModel() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockModel blockModel \u003d new BlockModelImpl();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        BlockTree blockTree \u003d new BlockTreeImpl();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_ROOT, Y2S2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_Y2S2, CS2103T);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2103T, CS2103T_LECTURES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2103T, CS2103T_TUTORIALS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2103T_TUTORIALS, CS2103T_TUTORIAL_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2103T_TUTORIALS, CS2103T_TUTORIAL_2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_Y2S2, CS2106);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2106, CS2106_LECTURES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2106, CS2106_TUTORIALS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockTree.add(PATH_TO_CS2106_TUTORIALS, CS2106_TUTORIAL_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setBlockTree(blockTree);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(INITIAL_OPEN_PATH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 31,
      "firzanarmani": 46
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/com/notably/view/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/notably/view/ViewPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"ViewPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"ViewPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"ViewPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"ViewPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestViewPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestViewPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * ViewPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static class TestViewPart\u003cT\u003e extends ViewPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 25,
      "kevinputera": 3,
      "-": 87
    }
  },
  {
    "path": "src/test/resources/view/ViewPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003c?import com.notably.view.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/ViewPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003cfx:root type\u003d\"com.notably.view.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 5
    }
  }
]
